<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Colosoft.Core</name>
    </assembly>
    <members>
        <member name="T:Colosoft.AggregateObserver`1">
            <summary>
            Implementação base de um agregador de observers.
            </summary>
            <typeparam name="TObserver"></typeparam>
        </member>
        <member name="M:Colosoft.AggregateObserver`1.Add(`0)">
            <summary>
            Adiciona mais um novo observer para o agregador. 
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.AggregateObserver`1.Remove(`0)">
            <summary>
            Remove o observer que já foi anexado.
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.AggregateObserver`1.op_Addition(Colosoft.AggregateObserver{`0},`0)">
            <summary>
            Adiciona mais um novo observer para o agregador.
            </summary>
            <param name="aggregate"></param>
            <param name="observer"></param>
        </member>
        <member name="M:Colosoft.AggregateObserver`1.op_Subtraction(Colosoft.AggregateObserver{`0},`0)">
            <summary>
            Remove o observer que já foi anexado.
            </summary>
            <param name="aggregate"></param>
            <param name="observer"></param>
        </member>
        <member name="P:Colosoft.AggregateObserver`1.Observers">
            <summary>
            Observers agregados.
            </summary>
        </member>
        <member name="T:Colosoft.BitSet">
            <summary>
            Representa um conjunto de bits.
            </summary>
        </member>
        <member name="M:Colosoft.BitSet.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.BitSet.#ctor(System.Byte)">
            <summary>
            Cria uma instancia já definindo um conjunto inicial.
            </summary>
            <param name="bitset">Valor do conjunto inicial.</param>
        </member>
        <member name="M:Colosoft.BitSet.IsAnyBitSet(System.Byte)">
            <summary>
            Verifica se o bti informado está no conjunto.
            </summary>
            <param name="bit">Bit que será comparado.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.BitSet.IsBitSet(System.Byte)">
            <summary>
            Verifica se o byte informado está no conjunto.
            </summary>
            <param name="bit"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.BitSet.Set(System.Byte,System.Byte)">
            <summary>
            Define e remove os bits do conjunto.
            </summary>
            <param name="bitsToSet">Bit que será marcado.</param>
            <param name="bitsToUnset">Bit que será desmarcado.</param>
        </member>
        <member name="M:Colosoft.BitSet.SetBit(System.Byte)">
            <summary>
            Define um bit para o conjunto.
            </summary>
            <param name="bit"></param>
        </member>
        <member name="M:Colosoft.BitSet.UnsetBit(System.Byte)">
            <summary>
            Remove o bit do conjunto.
            </summary>
            <param name="bit"></param>
        </member>
        <member name="M:Colosoft.BitSet.Clone">
            <summary>
            Cria um clone da instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.BitSet.Data">
            <summary>
            Dados do conjunto.
            </summary>
        </member>
        <member name="T:Colosoft.Bootstrapper">
            <summary>
            Classe base que prover uma sequencia de inicialização básica para
            implementações especificas.
            </summary>
        </member>
        <member name="M:Colosoft.Bootstrapper.Run">
            <summary>
            Executa o processo da sequencia de inicialização
            </summary>
        </member>
        <member name="M:Colosoft.Bootstrapper.ConfigureServiceLocator">
            <summary>
            Configuração o LocatorProvider para o <see cref="T:Microsoft.Practices.ServiceLocation.ServiceLocator"/>.
            </summary>
        </member>
        <member name="P:Colosoft.Bootstrapper.DomainEvents">
            <summary>
            Instancia dos eventos de domínio.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.AggregateObservableCollection`1">
            <summary>
            Representa um container de coleções observadas
            </summary>
        </member>
        <member name="T:Colosoft.Collections.IObservableCollection`1">
            <summary>
            Assinatura de uma coleção observada.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Colosoft.Collections.IObservableCollection">
            <summary>
            Assinatura de uma coleção observada.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.IObservableCollection.Move(System.Int32,System.Int32)">
            <summary>
            Move o item de uma posição para outra.
            </summary>
            <param name="oldIndex">Indice antigo</param>
            <param name="newIndex">Novo indice.</param>
        </member>
        <member name="T:Colosoft.Collections.IThreadSafeObservableCollection">
            <summary>
            Assinatuda das coleção com suporte para threadsafe.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.IThreadSafeObservableCollection.DisableThreadSafe">
            <summary>
            Desabilita a função de thread safe.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.IThreadSafeObservableCollection.EnableThreadSafe">
            <summary>
            Habilita a função de thread safe.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.IThreadSafeObservableCollection.IsThreadSafe">
            <summary>
            Identifica se a instancia está no modo ThreadSafe.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.INotifyCollectionChangedDispatcher">
            <summary>
            Assinatura das classes que disparam as nodificações
            de alteração da coleção.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.INotifyCollectionChangedDispatcher.AddCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler,Colosoft.Collections.NotifyCollectionChangedDispatcherPriority)">
            <summary>
            Adiciona o evento que será acionado quando a coleção for alterada.
            </summary>
            <param name="eventHandler"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Colosoft.Collections.INotifyCollectionChangedDispatcher.RemoveCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler)">
            <summary>
            Remove o evento registrado para ser acionado quando a coleção for alterada.
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="F:Colosoft.Collections.AggregateObservableCollection`1._reentrancyThreads">
            <summary>
            Lista das threads usadas para fazer o controle de reentrada.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{Colosoft.Collections.IObservableCollection{`0}})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="collections">Coleções que serão agregadas.</param>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.#ctor(Colosoft.Collections.IObservableCollection{`0}[])">
            <summary>
            Construtor padrão.
            </summary>
            <param name="collections">Coleções que serão agregadas.</param>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.Colosoft#Collections#IThreadSafeObservableCollection#DisableThreadSafe">
            <summary>
            Desabilita o thread safe.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.Colosoft#Collections#IThreadSafeObservableCollection#EnableThreadSafe">
            <summary>
            Habilita o thread safe.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.BlockReentrancy">
            <summary>
            Recupera o bloco de reentrada.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Método acionado quando a coleção for alterada.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.Move(System.Int32,System.Int32)">
            <summary>
            Move o item de uma posição para outra.
            </summary>
            <param name="oldIndex">Indice antigo</param>
            <param name="newIndex">Novo indice.</param>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.Add(`0)">
            <summary>
            Adiciona um item para a coleção.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adiciona um item para a coleção.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.Clear">
            <summary>
            Limpa os itens da coleção.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.Contains(`0)">
            <summary>
            Verifica se a coleção contém o item informado.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Verifica se a coleção contém o valor informado.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copia os dados para o vetor informado.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copia os dados para o vetor informado.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.IndexOf(`0)">
            <summary>
            Recupera o indice do item na coleção.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Recupera o indice do valor na coleção.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.Insert(System.Int32,`0)">
            <summary>
            Insere o item na coleção.
            </summary>
            <param name="index">Indice onde o item será inserido.</param>
            <param name="item">Instancia do item que será inserido.</param>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Insere o item na coleção.
            </summary>
            <param name="index">Indice onde o item será inserido.</param>
            <param name="value">Instancia do valor que será inserido.</param>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.Remove(`0)">
            <summary>
            Remove a instancia do item da coleção.
            </summary>
            <param name="item">Instancia do item que será removido.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Remove a instancia do valor da coleção.
            </summary>
            <param name="value">Instancia do valor que será removido.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.RemoveAt(System.Int32)">
            <summary>
            Remove o item na posição informada.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.GetEnumerator">
            <summary>
            Recupera a enumerador da coleção.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.Colosoft#Collections#INotifyCollectionChangedDispatcher#AddCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler,Colosoft.Collections.NotifyCollectionChangedDispatcherPriority)">
            <summary>
            Adiciona o evento que será acionado quando a coleção for alterada.
            </summary>
            <param name="eventHandler"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.Colosoft#Collections#INotifyCollectionChangedDispatcher#RemoveCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler)">
            <summary>
            Remove o evento registrado para ser acionado quando a coleção for alterada.
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="E:Colosoft.Collections.AggregateObservableCollection`1.CollectionChanged">
            <summary>
            Evento acionado quando a coleção for alterada.
            </summary>
        </member>
        <member name="E:Colosoft.Collections.AggregateObservableCollection`1.PropertyChanged">
            <summary>
            Evento acionado quando um propriedade for alterada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.AggregateObservableCollection`1.IsThreadSafe">
            <summary>
            Identifica se a instancia está em modo de ThreadSafe.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.AggregateObservableCollection`1.Count">
            <summary>
            Quantidade de itens na coleção.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.AggregateObservableCollection`1.IsFixedSize">
            <summary>
            Identifica se a coleção possui um tamanho fixado.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.AggregateObservableCollection`1.IsReadOnly">
            <summary>
            Identifica se a coleção é somente leitura.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.AggregateObservableCollection`1.IsSynchronized">
            <summary>
            Identifica se a coleção é sincronizada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.AggregateObservableCollection`1.SyncRoot">
            <summary>
            Instancia para sincronização.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.AggregateObservableCollection`1.Item(System.Int32)">
            <summary>
            Recupera e define o item na posição informada.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Collections.AggregateObservableCollection`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Recupera e define o item na posição informada.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Collections.AggregateObservableCollection`1.ChildMonitor">
            <summary>
            Classe responsável por monitorar a coleção filha.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.ChildMonitor.#ctor(Colosoft.Collections.AggregateObservableCollection{`0},Colosoft.Collections.IObservableCollection{`0},System.Int32)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="owner">Instancia do proprietário.</param>
            <param name="collection">Coleção que será monitorada.</param>
            <param name="collectionIndex">Indice da coleção no pai.</param>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.ChildMonitor.CollectionPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Método acioando quando uma propriedade da coleção for alterada.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.ChildMonitor.CollectionCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Método acionado quando a coleção associada é alterada.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.ChildMonitor.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.AggregateObservableCollection`1.ReentracyMonitor">
            <summary>
            Implementação usada para monitorar reentradas de chamada.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.ReentracyMonitor.#ctor(Colosoft.Collections.AggregateObservableCollection{`0})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Colosoft.Collections.AggregateObservableCollection`1.ReentracyMonitor.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.AsyncVirtualListErrorEventArgs">
            <summary>
            Armazena os argumentos de um evento de erro.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.AsyncVirtualListErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="error"></param>
        </member>
        <member name="P:Colosoft.Collections.AsyncVirtualListErrorEventArgs.Error">
            <summary>
            Instancia do erro associado.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.AsyncVirtualList`1">
            <summary>
            Representa uma coleção de virtualização de carga assincrona.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.VirtualList`1">
            <summary>
            Estrutura que representa uma lista virtual, ou seja,
            ela contêm itens que ainda não foram carregados.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.IVirtualList">
            <summary>
            Assinatura da lista virtual.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.IVirtualList.Refresh">
            <summary>
            Atualiza os dados da lista.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.IVirtualList.Configure(System.Int32)">
            <summary>
            Configura a coleção.
            </summary>
            <param name="pageSize">Tamanho da página de dados.</param>
        </member>
        <member name="P:Colosoft.Collections.IVirtualList.PageSize">
            <summary>
            Tamanho da página de registros.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.IVirtualListResultProcessor`1">
            <summary>
            Assinatura do processador de resultados de uma lista virtual.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.IVirtualListResultProcessor`1.DataPageLoaded(Colosoft.Collections.DataPageLoadedEventArgs{`0})">
            <summary>
            Notifica que uma página de dados foi carregada.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Colosoft.Collections.IVirtualListResultProcessor`1.HasDataPageLoadRegisters">
            <summary>
            Identifica se possui registradores da carga de página de dados.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.VirtualList`1._count">
            <summary>
            Quantidade de elementos da lista.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.VirtualList`1._version">
            <summary>
            Versão da lista.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.VirtualList`1._syncRoot">
            <summary>
            Objeto usadao para garantir a sincronização da lista.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.#ctor(System.Int32,Colosoft.Collections.VirtualListLoaderHandler{`0},System.Object)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="pageSize">Tamanho da página da lista virtual.</param>
            <param name="loader">Instancia do método que será usado para carregar os dados.</param>
            <param name="referenceObject"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.#ctor(System.Int32,Colosoft.Collections.VirtualListLoader{`0},System.Object)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="pageSize">Tamanho da página da lista virtual.</param>
            <param name="loader">Instancia que será usada para carregar os dados.</param>
            <param name="referenceObject"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.Finalize">
            <summary>
            Destrutor.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.Load(System.Int32,System.Int32,System.Int32)">
            <summary>
            Carrega os dados.
            </summary>
            <param name="startRow"></param>
            <param name="pageSize"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.ClearPage(Colosoft.Collections.VirtualListLoaderResult{`0})">
            <summary>
            Limpa uma página.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.CreateDataPage(System.Int32)">
            <summary>
            Cria a páginda de dados.
            </summary>
            <param name="sessionIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.PopulatePage(Colosoft.Collections.VirtualListLoaderResult{`0},System.Int32)">
            <summary>
            Popula uma página.
            </summary>
            <param name="data">Dados a se popular.</param>
            <param name="index">Índice da página.</param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.OnDataPageLoaded(Colosoft.Collections.DataPageLoadedEventArgs{`0})">
            <summary>
            Método acionado quando uma página de dados for carregada.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.GetItem(System.Int32)">
            <summary>
            Recupera o item na posição informada.
            </summary>
            <param name="index">Posição do item.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.SetItem(System.Int32,`0)">
            <summary>
            Define o item na posição informada.
            </summary>
            <param name="index">Posição do item.</param>
            <param name="value">Valor do item que será definido.</param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.RaiseCollectionReset">
            <summary>
            Fires the collection reset event.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.RaisePropertyChanged(System.String)">
            <summary>
            Fires the property changed event.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.OnSet(System.Int32,`0,`0)">
            <summary>
            Método acionado quando o valor de um item é definido.
            </summary>
            <param name="index"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.OnSetComplete(System.Int32,`0)">
            <summary>
            Método acionado quando o set for completado.
            </summary>
            <param name="index"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.OnRefresh">
            <summary>
            Método acionado quando se dar um refresh na lista.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.Clear">
            <summary>
            Limpa os itens da coleção.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.ToAsyncList">
            <summary>
            Recupera uma lista assincrona com as referencia da
            lista virtual.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.Refresh">
            <summary>
            Atualiza os dados da lista.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.Configure(System.Int32)">
            <summary>
            Configura a coleção.
            </summary>
            <param name="pageSize">Tamanho da página de dados.</param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Recupera o enumerator da lista.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador da lista.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copia os dados para a lista.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <summary>
            Copia um Array de DataWrapper para a lista.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.System#Collections#Generic#IList{T}#IndexOf(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.System#Collections#IList#Add(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.System#Collections#IList#Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Coia um array para lista.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.Colosoft#Collections#IVirtualListResultProcessor{T}#DataPageLoaded(Colosoft.Collections.DataPageLoadedEventArgs{`0})">
            <summary>
            Notifica que uma página de dados foi carregada.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="E:Colosoft.Collections.VirtualList`1.CollectionChanged">
            <summary>
            Evento que sinaliza a mudança da coleção.
            </summary>
        </member>
        <member name="E:Colosoft.Collections.VirtualList`1.PropertyChanged">
            <summary>
            Evento que sinaliza a mudança da propriedade.
            </summary>
        </member>
        <member name="E:Colosoft.Collections.VirtualList`1.DataPageLoaded">
            <summary>
            Evento acionado quando uma página de dados for carregada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.Count2">
            <summary>
            Proprieadade para acessar o count nas classes derivadas.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.Loader">
            <summary>
            Instancia do método usado para recuperar os itens da lista virtual.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.InstanceInitialized">
            <summary>
            Identifica se a instancia foi inicializada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.Sessions">
            <summary>
            Sessões onde são armazenados os elementos carregados na lista
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.Count">
            <summary>
            Quantidade de itens na lista.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.IsReadOnly">
            <summary>
            Identifica se a coleção é somente leitura.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.ReferenceObject">
            <summary>
            Instancia do objeto de referencia utilizado na lista.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.PageSize">
            <summary>
            Tamanho da página de dados da lista.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.Item(System.Int32)">
            <summary>
            Recupera o item na posição informada.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.IsSynchronized">
            <summary>
            Identifica se é um lista sincronizada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.SyncRoot">
            <summary>
            Instancia do objeto es sincronização.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.System#Collections#Generic#ICollection{T}#Count">
            <summary>
            Recupera a contagem.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
            <summary>
            Recupera um item da lista.
            </summary>
            <param name="index">Índice do item.</param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.System#Collections#IList#IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.System#Collections#IList#IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Recupera um item da lista.
            </summary>
            <param name="index">Índice do item.</param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.System#Collections#ICollection#Count">
            <summary>
            Recupera a contagem de items.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.System#Collections#ICollection#SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.Colosoft#Collections#IVirtualListResultProcessor{T}#HasDataPageLoadRegisters">
            <summary>
            Identifica se possui registradores da carga de página de dados.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.VirtualList`1.Enumerator">
            <summary>
            Enumerator usado na lista.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.VirtualList`1.Enumerator._list">
            <summary>
            Lista em questão.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.VirtualList`1.Enumerator._index">
            <summary>
            Atual index.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.VirtualList`1.Enumerator._version">
            <summary>
            Versão atual da lista
            </summary>
        </member>
        <member name="F:Colosoft.Collections.VirtualList`1.Enumerator._current">
            <summary>
            Objeto atualmente selecionado.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.Enumerator.#ctor(Colosoft.Collections.VirtualList{`0})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.Enumerator.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.Enumerator.MoveNext">
            <summary>
            Movimenta para o proximo objeto.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.VirtualList`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Reseta a lista.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.Enumerator.Current">
            <summary>
            Atual objeto selecionado.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualList`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Atual objeto selecionado.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.AsyncVirtualList`1.#ctor(System.Int32,Colosoft.Collections.VirtualListLoaderHandler{`0},System.Object)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="loader"></param>
            <param name="refObject"></param>
            <param name="pageSize"></param>
        </member>
        <member name="M:Colosoft.Collections.AsyncVirtualList`1.#ctor(System.Int32,Colosoft.Collections.VirtualListLoader{`0},System.Object)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="loader"></param>
            <param name="refObject"></param>
            <param name="pageSize"></param>
        </member>
        <member name="M:Colosoft.Collections.AsyncVirtualList`1.OnAsyncVirtualListError(System.Exception)">
            <summary>
            Método acionado quando ocorre algum erro na lista assincrona.
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Colosoft.Collections.AsyncVirtualList`1.CreateDataPage(System.Int32)">
            <summary>
            Cria a páginda de dados.
            </summary>
            <param name="sessionIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.AsyncVirtualList`1.Load(System.Int32,System.Int32,System.Int32)">
            <summary>
            Carrega a virtual list.
            </summary>
            <param name="startRow"></param>
            <param name="pageSize"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.AsyncVirtualList`1.GetItem(System.Int32)">
            <summary>
            Recupera um item.
            </summary>
            <param name="index">Índice do item.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.AsyncVirtualList`1.ConverterLoader(Colosoft.Collections.VirtualListLoaderHandler{`0})">
            <summary>
            Método usado para converter o loader.
            </summary>
            <param name="loader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.AsyncVirtualList`1.ConverterLoader(Colosoft.Collections.VirtualListLoader{`0})">
            <summary>
            Método usado para converter o loader.
            </summary>
            <param name="loader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.AsyncVirtualList`1.TakeNewCount(System.Int32)">
            <summary>
            Recupera a nova quantidade de itens da coleção.
            </summary>
            <param name="newCount"></param>
        </member>
        <member name="M:Colosoft.Collections.AsyncVirtualList`1.LoadPageWork(System.Object)">
            <summary>
            Método assíncrono que carrega um página.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Colosoft.Collections.AsyncVirtualList`1.LoadPageError(System.Object)">
            <summary>
            Evento acionado quando ocorre um erro ao carregar a página de dados.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Colosoft.Collections.AsyncVirtualList`1.LoadPageCompleted(System.Object)">
            <summary>
            Método que completa a carga de um página.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Colosoft.Collections.AsyncVirtualList`1.LoadCountWork(System.Object)">
            <summary>
            Método assíncrono que faz a carga da contagem.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Colosoft.Collections.AsyncVirtualList`1.LoadCountCompleted(System.Object)">
            <summary>
            Método que completa a carga da contagem.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Colosoft.Collections.AsyncVirtualList`1.SetInitialCount(System.Int32)">
            <summary>
            Define a contagem inicial.
            </summary>
            <param name="count"></param>
        </member>
        <member name="E:Colosoft.Collections.AsyncVirtualList`1.AsyncVirtualListError">
            <summary>
            Evento acionado quando ocorre algum erro na lista assincrona.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.AsyncVirtualList`1.LoadedItemsCount">
            <summary>
            Número de items carregados.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.AsyncVirtualList`1.IsLoading">
            <summary>
            Representa se a coleção está carregando.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.AsyncVirtualList`1.InstanceInitialized">
            <summary>
            Determina se a intancia foi inicializada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.AsyncVirtualList`1.Count">
            <summary>
            Quantidade de registros na coleção.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.AsyncVirtualList`1.AsyncVirtualListErrorHandler">
            <summary>
            Assinatura do evento acionado quando ocorre algum erro na lista assincrona.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Colosoft.Collections.BaseObservableCollection`1">
            <summary>
            Implementação base de uma coleção observada.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Colosoft.Collections.ItemCollection`1">
            <summary>
            Reimplementação do System.ComponentModel.Collection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.Collection`1" /> class that is empty.</summary>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.Collection`1" /> class as a wrapper for the specified list.</summary>
            <param name="list">The list that is wrapped by the new collection.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="list" /> is null.</exception>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.Add(`0)">
            <summary>Adds an object to the end of the <see cref="T:System.Collections.ObjectModel.Collection`1" />. </summary>
            <param name="item">The object to be added to the end of the <see cref="T:System.Collections.ObjectModel.Collection`1" />. The value can be null for reference types.</param>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.Clear">
            <summary>Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.CopyTo(`0[],System.Int32)">
            <summary>Copies the entire <see cref="T:System.Collections.ObjectModel.Collection`1" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ObjectModel.Collection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index" /> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.ObjectModel.Collection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.Contains(`0)">
            <summary>Determines whether an element is in the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.ObjectModel.Collection`1" />; otherwise, false.</returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.ObjectModel.Collection`1" />. The value can be null for reference types.</param>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.GetEnumerator">
            <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.IndexOf(`0)">
            <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
            <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the entire <see cref="T:System.Collections.ObjectModel.Collection`1" />, if found; otherwise, -1.</returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />. The value can be null for reference types.</param>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.Insert(System.Int32,`0)">
            <summary>Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.</summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.Remove(`0)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
            <returns>true if <paramref name="item" /> is successfully removed; otherwise, false.  This method also returns false if <paramref name="item" /> was not found in the original <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.ObjectModel.Collection`1" />. The value can be null for reference types.</param>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.RemoveAt(System.Int32)">
            <summary>Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.ClearItems">
            <summary>Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.InsertItem(System.Int32,`0)">
            <summary>Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.</summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.RemoveItem(System.Int32)">
            <summary>Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.SetItem(System.Int32,`0)">
            <summary>Replaces the element at the specified index.</summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index" /> is less than zero. </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="array" /> is multidimensional.-or-<paramref name="array" /> does not have zero-based indexing.-or-The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.-or-The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.System#Collections#IList#Add(System.Object)">
            <summary>Adds an item to the <see cref="T:System.Collections.IList" />.</summary>
            <returns>The position into which the new element was inserted.</returns>
            <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.System#Collections#IList#Contains(System.Object)">
            <summary>Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</summary>
            <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.</returns>
            <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
            <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
            <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>Inserts an item into the <see cref="T:System.Collections.IList" /> at the specified index.</summary>
            <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
            <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
        </member>
        <member name="M:Colosoft.Collections.ItemCollection`1.System#Collections#IList#Remove(System.Object)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
            <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
        </member>
        <member name="P:Colosoft.Collections.ItemCollection`1.Count">
            <summary>Gets the number of elements actually contained in the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
            <returns>The number of elements actually contained in the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
        </member>
        <member name="P:Colosoft.Collections.ItemCollection`1.Items">
            <summary>Gets a <see cref="T:System.Collections.Generic.IList`1" /> wrapper around the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IList`1" /> wrapper around the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</returns>
        </member>
        <member name="P:Colosoft.Collections.ItemCollection`1.Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <returns>The element at the specified index.</returns>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />. </exception>
        </member>
        <member name="P:Colosoft.Collections.ItemCollection`1.System#Collections#ICollection#IsSynchronized">
            <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
            <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns false.</returns>
        </member>
        <member name="P:Colosoft.Collections.ItemCollection`1.SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns the current instance.</returns>
        </member>
        <member name="P:Colosoft.Collections.ItemCollection`1.System#Collections#IList#Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <returns>The element at the specified index.</returns>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
            <exception cref="T:System.ArgumentException">The property is set and <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</exception>
        </member>
        <member name="P:Colosoft.Collections.ItemCollection`1.System#Collections#IList#IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</summary>
            <returns>true if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, false.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns false.</returns>
        </member>
        <member name="P:Colosoft.Collections.ItemCollection`1.System#Collections#IList#IsFixedSize">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
            <returns>true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.  In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns false.</returns>
        </member>
        <member name="T:Colosoft.Collections.INotifyCollectionChangedObserverContainer">
            <summary>
            Assinatura do container 
            de observer que tratam as alterações feitas nas coleções.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.INotifyCollectionChangedObserverContainer.AddObserver(Colosoft.Collections.INotifyCollectionChangedObserver,Colosoft.Collections.NotifyCollectionChangedObserverLiveScope)">
            <summary>
            Adiciona o observer para a instancia.
            </summary>
            <param name="observer"></param>
            <param name="liveScope">Escopo do observer.</param>
        </member>
        <member name="M:Colosoft.Collections.INotifyCollectionChangedObserverContainer.RemoveObserver(Colosoft.Collections.INotifyCollectionChangedObserver)">
            <summary>
            Remove o observer da instancia.
            </summary>
            <param name="observer"></param>
        </member>
        <member name="T:Colosoft.Threading.IReentrancyController">
            <summary>
            Assinatura de um controlador de reentrada.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.IReentrancyController.IsReentrancy">
            <summary>
            Identifica se a instância está o como de entrada ativo.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.IResetableCollection">
            <summary>
            Assinatura das coleções que possuem suporte para reset.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.IResetableCollection.Reset">
            <summary>
            Reseta os dados da coleção.
            </summary>
        </member>
        <member name="T:Colosoft.IDisposableState">
            <summary>
            Assinatura das classes que possuem o estado identificando se a instancia foi liberada.
            </summary>
        </member>
        <member name="P:Colosoft.IDisposableState.IsDisposed">
            <summary>
            Identifica se a instancia já sofreu o dispose.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.IIndexedObservableCollection`1">
            <summary>
            Assinatura da coleção observada indexada.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Colosoft.Collections.IIndexedObservableCollection">
            <summary>
            Assinatura de uma coleção observada indexada.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.IIndexedObservableCollection.RemoveAllIndexes">
            <summary>
            Remove todos os indices.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.IIndexedObservableCollection.RemoveIndex(System.String,Colosoft.Collections.ObservableCollectionIndexType)">
            <summary>
            Remove o indice.
            </summary>
            <param name="propertyName"></param>
            <param name="indexType"></param>
        </member>
        <member name="M:Colosoft.Collections.IIndexedObservableCollection.ResetIndex(System.String,Colosoft.Collections.ObservableCollectionIndexType)">
            <summary>
            Reseta o indice.
            </summary>
            <param name="propertyName">Nome da propriedade do indice.</param>
            <param name="indexType">Tipo do indice.</param>
        </member>
        <member name="M:Colosoft.Collections.IIndexedObservableCollection.ContainsIndex(System.String,Colosoft.Collections.ObservableCollectionIndexType)">
            <summary>
            Verifica se contém um indice para a propriedade informada.
            </summary>
            <param name="propertyName">Nome da propriedade do indice.</param>
            <param name="indexType">Tipo de indice.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.IIndexedObservableCollection.Search(System.String,Colosoft.Collections.ObservableCollectionIndexType,System.Object)">
            <summary>
            Realiza uma pesquisa no
            </summary>
            <param name="propertyName"></param>
            <param name="indexType"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.IIndexedObservableCollection`1.CreateIndex``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Colosoft.Collections.ObservableCollectionIndexType,System.Collections.Generic.IComparer{``0})">
            <summary>
            Cria o indice.
            </summary>
            <typeparam name="PropertyType">Tipo da propriedade que será indexada.</typeparam>
            <param name="property">Propriedade que será indexada.</param>
            <param name="type">Tipo de indice.</param>
            <param name="comparer">Comparador</param>
        </member>
        <member name="M:Colosoft.Collections.IIndexedObservableCollection`1.CreateIndex``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Colosoft.Collections.ObservableCollectionIndexType)">
            <summary>
            Cria o indice.
            </summary>
            <typeparam name="PropertyType">Tipo da propriedade que será indexada.</typeparam>
            <param name="property">Propriedade que será indexada.</param>
            <param name="type">Tipo de indice.</param>
        </member>
        <member name="M:Colosoft.Collections.IIndexedObservableCollection`1.Search(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Realiza a pesquisa usando o indice com a chave informada.
            </summary>
            <param name="property">Propriedade indexada.</param>
            <param name="key">Chave que será pesquisa.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.IIndexedObservableCollection`1.Search(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Colosoft.Collections.ObservableCollectionIndexType,System.Object)">
            <summary>
            Realiza a pesquisa usando o indice com a chave informada.
            </summary>
            <param name="property">Propriedade indexada.</param>
            <param name="indexType">Tipo de indice que será usado pela pesquisa.</param>
            <param name="key">Chave que será pesquisa.</param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Collections.ISearchParameterDescriptionContainer">
            <summary>
            Assinatura de um container com a descrição dos parametros de pesquisa.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ISearchParameterDescriptionContainer.SearchParameterDescriptions">
            <summary>
            Relação das descrições dos parametros de pesquisa.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.BaseObservableCollection`1._collectionChanged">
            <summary>
            Instancia usada para armazena os eventos registrados das alterações na coleção.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.BaseObservableCollection`1._reentrancyThreads">
            <summary>
            Lista das threads usadas para fazer o controle de reentrada.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.BaseObservableCollection`1._indexes">
            <summary>
            Armazena a relação dos indices da coleção.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Cria uma instancia com base no enumerador informado.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Cria um nova instancia com os dados da lista informada.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.Finalize">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.BlockReentrancy">
            <summary>
            Recupera o bloco de reentrada.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.CheckReentrancy">
            <summary>
            Verifica a reentrada.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.ClearItems">
            <summary>
            Limpa os itens da coleção.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Insere um novo item na posição informada.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.MoveItem(System.Int32,System.Int32)">
            <summary>
            Move o item de uma posição para outra.
            </summary>
            <param name="oldIndex"></param>
            <param name="newIndex"></param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Método acionado quando a coleção for alterada.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Método acionado quando uma propriedade for alterada.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.RaisePropertyChanged(System.String)">
            <summary>
            Raises this object's PropertyChanged event.
            </summary>
            <param name="propertyName">The property that has a new value.</param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.RemoveItem(System.Int32)">
            <summary>
            Remove o item na posição informada.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Define o item para a posição informada.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.OnPropertyChanged(System.String)">
            <summary>
            Notifica a alteração de uma propriedade.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.CopyFrom(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Copia os dados para a coleção.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Método acionado quando a coleção foi alterada.
            </summary>
            <param name="action"></param>
            <param name="item"></param>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.OnCollectionReset">
            <summary>
            Reseta a coleção.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.Reset">
            <summary>
            Reseta os dados da coleção.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.Colosoft#Collections#IThreadSafeObservableCollection#DisableThreadSafe">
            <summary>
            Desabilita o thread safe.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.Colosoft#Collections#IThreadSafeObservableCollection#EnableThreadSafe">
            <summary>
            Habilita o thread safe.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.Contains(`0)">
            <summary>
            Verifica se a lista contem o item informado
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.Move(System.Int32,System.Int32)">
            <summary>
            Move o item de uma posição para outra.
            </summary>
            <param name="oldIndex">Indice antigo</param>
            <param name="newIndex">Novo indice.</param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.Colosoft#Collections#INotifyCollectionChangedObserverContainer#AddObserver(Colosoft.Collections.INotifyCollectionChangedObserver,Colosoft.Collections.NotifyCollectionChangedObserverLiveScope)">
            <summary>
            Adiciona um observer para a instancia.
            </summary>
            <param name="observer"></param>
            <param name="liveScope"></param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.Colosoft#Collections#INotifyCollectionChangedObserverContainer#RemoveObserver(Colosoft.Collections.INotifyCollectionChangedObserver)">
            <summary>
            Remove o observer da coleção.
            </summary>
            <param name="observer"></param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.Colosoft#Collections#INotifyCollectionChangedDispatcher#AddCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler,Colosoft.Collections.NotifyCollectionChangedDispatcherPriority)">
            <summary>
            Adiciona o evento que será acionado quando a coleção for alterada.
            </summary>
            <param name="eventHandler"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.Colosoft#Collections#INotifyCollectionChangedDispatcher#RemoveCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler)">
            <summary>
            Remove o evento registrado para ser acionado quando a coleção for alterada.
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.RemoveAllIndexes">
            <summary>
            Remove todos os indices.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.RemoveIndex(System.String,Colosoft.Collections.ObservableCollectionIndexType)">
            <summary>
            Remove o indice.
            </summary>
            <param name="propertyName"></param>
            <param name="indexType"></param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.ResetIndex(System.String,Colosoft.Collections.ObservableCollectionIndexType)">
            <summary>
            Reseta o indice.
            </summary>
            <param name="propertyName">Nome da propriedade do indice.</param>
            <param name="indexType">Tipo do indice.</param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.CreateIndex``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Colosoft.Collections.ObservableCollectionIndexType)">
            <summary>
            Cria o indice para a propriedade informada.
            </summary>
            <typeparam name="PropertyType"></typeparam>
            <param name="type"></param>
            <param name="property"></param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.CreateIndex``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Colosoft.Collections.ObservableCollectionIndexType,System.Collections.Generic.IComparer{``0})">
            <summary>
            Cria o indice para a propriedade informada.
            </summary>
            <typeparam name="PropertyType"></typeparam>
            <param name="type"></param>
            <param name="property"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.ContainsIndex(System.String,Colosoft.Collections.ObservableCollectionIndexType)">
            <summary>
            Verifica se contém um indice para a propriedade informada.
            </summary>
            <param name="propertyName">Nome da propriedade do indice.</param>
            <param name="indexType">Tipo de indice.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.Search(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Realiza a pesquisa usando o indice com a chave informada.
            </summary>
            <param name="property">Propriedade indexada.</param>
            <param name="key">Chave que será pesquisa.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.Search(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Colosoft.Collections.ObservableCollectionIndexType,System.Object)">
            <summary>
            Realiza a pesquisa usando o indice com a chave informada.
            </summary>
            <param name="property">Propriedade indexada.</param>
            <param name="indexType"></param>
            <param name="key">Chave que será pesquisa.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.Colosoft#Collections#IIndexedObservableCollection#Search(System.String,Colosoft.Collections.ObservableCollectionIndexType,System.Object)">
            <summary>
            Realiza uma pesquisa no
            </summary>
            <param name="propertyName"></param>
            <param name="indexType"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.Search2(System.String,Colosoft.Collections.ObservableCollectionIndexType,System.Object)">
            <summary>
            Realiza a pesquisa no indice associado com o nome da propriedade.
            </summary>
            <param name="propertyName"></param>
            <param name="indexType"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="E:Colosoft.Collections.BaseObservableCollection`1.CollectionChanged">
            <summary>
            Evento acionado quando a coleção for alterada.
            </summary>
        </member>
        <member name="E:Colosoft.Collections.BaseObservableCollection`1.PropertyChanged">
            <summary>
            Evento acioando quando uma propriedade for alterada.
            </summary>
        </member>
        <member name="E:Colosoft.Collections.BaseObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Evento acioando quando uma propriedade for alterada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.BaseObservableCollection`1.IsDisposed">
            <summary>
            Identifica se a instancia já foi liberada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.BaseObservableCollection`1.IsThreadSafe">
            <summary>
            Identifica se a instancia está em modo de ThreadSafe.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.BaseObservableCollection`1.Colosoft#Threading#IReentrancyController#IsReentrancy">
            <summary>
            Identifica se a instância está o como de entrada ativo.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.BaseObservableCollection`1.ReentracyMonitor">
            <summary>
            Implementação usada para monitorar reentradas de chamada.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.ReentracyMonitor.#ctor(Colosoft.Collections.BaseObservableCollection{`0})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Colosoft.Collections.BaseObservableCollection`1.ReentracyMonitor.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.CollectionChangedWrapperEventData">
            <summary>
            Dados do evento adaptado da alteração da coleção.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.CollectionChangedWrapperEventData._dispatcher">
            <summary>
            Instancia do dispatcher associado.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.CollectionChangedWrapperEventData._action">
            <summary>
            Ação associada.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.CollectionChangedWrapperEventData.#ctor(Colosoft.Threading.IDispatcher,System.Collections.Specialized.NotifyCollectionChangedEventHandler)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="dispatcher">Dispatcher que será utilizado pela instancia.</param>
            <param name="action">Ação que será acionada.</param>
        </member>
        <member name="M:Colosoft.Collections.CollectionChangedWrapperEventData.#ctor(Colosoft.Threading.IDispatcher,System.Collections.Specialized.NotifyCollectionChangedEventHandler,Colosoft.Collections.NotifyCollectionChangedDispatcherPriority)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="dispatcher">Dispatcher que será utilizado pela instancia.</param>
            <param name="action">Ação que será acionada.</param>
            <param name="priority">Prioridade;</param>
        </member>
        <member name="M:Colosoft.Collections.CollectionChangedWrapperEventData.Invoke(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Realiza a chamada para tratar o evento.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.CollectionChangedWrapperEventData.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Collections.CollectionChangedWrapperEventData.Dispose">
            <summary>
            Libera instancia.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.CollectionChangedWrapperEventData.Priority">
            <summary>
            Prioridade associada.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.DataPage2`1">
            <summary>
            Implementação de uma página de dados.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Colosoft.Collections.IDataPage`1">
            <summary>
            Assinatura de uma página de dados.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Colosoft.Collections.IDataPage`1.Populate(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Método usado para popular a página de dados.
            </summary>
            <param name="items">Itens para carrega a página.</param>
        </member>
        <member name="M:Colosoft.Collections.IDataPage`1.NotifyError(System.Exception)">
            <summary>
            Notifica que houve um erro ao carregar a página de dados.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="P:Colosoft.Collections.IDataPage`1.IsPopulated">
            <summary>
            Identifica se a página já foi populada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.IDataPage`1.Count">
            <summary>
            Quantidade de itens na página de dados.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.IDataPage`1.HasError">
            <summary>
            Identifica se a página possui algum erro de carga.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.IDataPage`1.Item(System.Int32)">
            <summary>
            Recupera o item da página pelo indice informado.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.DataPage2`1.Finalize">
            <summary>
            Destrutor.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.DataPage2`1.Populate(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Método usado para popular a página de dados.
            </summary>
            <param name="items">Itens para carrega a página.</param>
        </member>
        <member name="M:Colosoft.Collections.DataPage2`1.NotifyError(System.Exception)">
            <summary>
            Notifica que houve um erro ao carregar a página de dados.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Colosoft.Collections.DataPage2`1.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Collections.DataPage2`1.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.DataPage2`1.GetEnumerator">
            <summary>
            Recupera o enumerador dos itens.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.DataPage2`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador dos itens.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Collections.DataPage2`1.IsPopulated">
            <summary>
            Identifica se a página já foi populada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.DataPage2`1.Count">
            <summary>
            Quantidade de itens carregados na página.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.DataPage2`1.HasError">
            <summary>
            Identifica se a página sofreu algum erro na carga.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.DataPage2`1.Item(System.Int32)">
            <summary>
            Recupera a define o item na posição informada.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Collections.DataWrapper`1">
            <summary>
            Wrapper para dados de lista assíncrona.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Colosoft.Collections.DataWrapper`1.#ctor(System.Int32)">
            <summary>
            Contrutor do wrapper
            </summary>
            <param name="index">Índice do dado.</param>
        </member>
        <member name="M:Colosoft.Collections.DataWrapper`1.#ctor(System.Int32,`0)">
            <summary>
            Cria uma instancia já com o dado inicializado.
            </summary>
            <param name="index">Índice do dado.</param>
            <param name="data">Instancia do dado.</param>
        </member>
        <member name="M:Colosoft.Collections.DataWrapper`1.SetData(`0)">
            <summary>
            Define a instancia com os dados.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Colosoft.Collections.DataWrapper`1.RaisePropertyChanged(System.String[])">
            <summary>
            Dispara o evento de mudança de propriedade.
            </summary>
            <param name="propertyNames">Nomes das propriedades.</param>
        </member>
        <member name="E:Colosoft.Collections.DataWrapper`1.PropertyChanged">
            <summary>
            Evento de mudança de propriedade.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.DataWrapper`1.Index">
            <summary>
            Índicie do dado.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.DataWrapper`1.ItemNumber">
            <summary>
            Número do item.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.DataWrapper`1.IsLoading">
            <summary>
            Define se o item está carregando.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.DataWrapper`1.LoadError">
            <summary>
            Define se ocorre o erro do wrapper.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.DataWrapper`1.Data">
            <summary>
            Dado do item contido no wrapper.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.DataWrapper`1.IsInUse">
            <summary>
            Define se o item está sendo utilizado.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.DataWrapperPage`1">
            <summary>
            Pagina de dados.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Colosoft.Collections.DataWrapperPage`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="firstIndex">Primeiro índice da página.</param>
            <param name="pageLength">Tamanho da página.</param>
        </member>
        <member name="M:Colosoft.Collections.DataWrapperPage`1.Finalize">
            <summary>
            Destrutor.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.DataWrapperPage`1.Populate(System.Collections.Generic.IEnumerable{Colosoft.Collections.DataWrapper{`0}})">
            <summary>
            Método usado para popular a página de dados.
            </summary>
            <param name="items">Itens para carrega a página.</param>
        </member>
        <member name="M:Colosoft.Collections.DataWrapperPage`1.NotifyError(System.Exception)">
            <summary>
            Notifica que houve um erro ao carregar a página de dados.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Colosoft.Collections.DataWrapperPage`1.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Collections.DataWrapperPage`1.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.DataWrapperPage`1.GetEnumerator">
            <summary>
            Recupera o enumerador dos itens.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.DataWrapperPage`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador dos itens.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Collections.DataWrapperPage`1.IsPopulated">
            <summary>
            Identifica se a página já foi populada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.DataWrapperPage`1.Count">
            <summary>
            Quantidade de itens carregados na página.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.DataWrapperPage`1.HasError">
            <summary>
            Identifica se a página sofreu algum erro na carga.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.DataWrapperPage`1.Item(System.Int32)">
            <summary>
            Recupera a define o item na posição informada.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Collections.TimedCacheKey`1">
            <summary>
            Implementação da chave da entrada do cache com tempo.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Colosoft.Collections.TimedCacheKey`1.#ctor(`0,System.DateTime)">
            <summary>
            Cria uma nova instancia com a data de expiração.
            </summary>
            <param name="key"></param>
            <param name="expirationDate"></param>
        </member>
        <member name="M:Colosoft.Collections.TimedCacheKey`1.#ctor(`0,System.TimeSpan)">
            <summary>
            Cria uma nova instancia com o tempo de corte.
            </summary>
            <param name="key"></param>
            <param name="slidingExpirationWindowSize"></param>
        </member>
        <member name="M:Colosoft.Collections.TimedCacheKey`1.Accessed">
            <summary>
            Registra um acesso a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.TimedCacheKey`1.CompareTo(`0)">
            <summary>
            Compara com outra instancia.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Collections.TimedCacheKey`1.ExpirationDate">
            <summary>
            Data que o item ira expirar.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TimedCacheKey`1.Key">
            <summary>
            Chave o item.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TimedCacheKey`1.SlidingExpiration">
            <summary>
            Identifica se á para deslizar a expiração.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TimedCacheKey`1.SlidingExpirationWindowSize">
            <summary>
            Tamanho da janela para deslizar a expiração.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.ExpiringListRemovedArgs`1">
            <summary>
            Argumentos do evento acionado quando o item um item for removido da coleção.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Colosoft.Collections.ExpiringListRemovedArgs`1.#ctor(`0)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Colosoft.Collections.ExpiringListRemovedArgs`1.Item">
            <summary>
            Item removido.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.ExpiringListRemovedHandler`1">
            <summary>
            Representa o evento acionado quando um item for removido da lista.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Colosoft.Collections.ExpiringList`1">
            <summary>
            List that has an expiring built in
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="F:Colosoft.Collections.ExpiringList`1.MAX_LOCK_WAIT">
            <summary>
            Tempo máximo para esperar o lock.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.ExpiringList`1._syncRoot">
            <summary>
            Para thread safety
            </summary>
        </member>
        <member name="F:Colosoft.Collections.ExpiringList`1._isPurging">
            <summary>
            Para thread safety
            </summary>
        </member>
        <member name="F:Colosoft.Collections.ExpiringList`1._timedStorage">
            <summary>
            Lista onde são armazenados os tempos gerais.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ExpiringList`1.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ExpiringList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="comparer">Comparador da chave.</param>
        </member>
        <member name="M:Colosoft.Collections.ExpiringList`1.SetDefaultTime(System.Double)">
            <summary>
            Define o tempo padrão.
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Colosoft.Collections.ExpiringList`1.Add(`0,System.Double)">
            <summary>
            Adiciona um novo item.
            </summary>
            <param name="key">Instancia do item.</param>
            <param name="expirationSeconds">Tempo de vida em segundos.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ExpiringList`1.Add(`0,System.TimeSpan)">
            <summary>
            Adiciona um novo item.
            </summary>
            <param name="key">Instancia do item.</param>
            <param name="slidingExpiration">Tempo para corte.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ExpiringList`1.AddOrUpdate(`0,System.Double)">
            <summary>
            Adiciona ou atualiza o item.
            </summary>
            <param name="key"></param>
            <param name="expirationSeconds">Tempo de vida em segundos.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ExpiringList`1.AddOrUpdate(`0,System.TimeSpan)">
            <summary>
            Adicioan ou atualiza um item.
            </summary>
            <param name="key"></param>
            <param name="slidingExpiration"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ExpiringList`1.Clear">
            <summary>
            Limpa a coleção.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ExpiringList`1.Contains(`0)">
            <summary>
            Verifica se na coleção existe o item informado.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ExpiringList`1.TryFind(System.Predicate{`0},`0@)">
            <summary>
            Verifica se na coleção existe o item com o predicado informado e retorna o primeiro que encontrar
            </summary>
            <param name="predicate"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ExpiringList`1.Remove(`0)">
            <summary>
            Remove a chave informada.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ExpiringList`1.Update(`0)">
            <summary>
            Atualiza o item.
            </summary>
            <param name="key">Instancia do item que será atualizado.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ExpiringList`1.Update(`0,System.Double)">
            <summary>
            Atualiza o item.
            </summary>
            <param name="key"></param>
            <param name="expirationSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ExpiringList`1.Update(`0,System.TimeSpan)">
            <summary>
            Atualiza o item.
            </summary>
            <param name="key"></param>
            <param name="slidingExpiration"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ExpiringList`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copia os itens da coleção para o vetor informado.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
        </member>
        <member name="M:Colosoft.Collections.ExpiringList`1.PurgeCache(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Expurga os objetos expirados a partir do cache. Chamado automaticamente pelo temporizador.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ExpiringList`1.OnRemoved(`0)">
            <summary>
            Método acionado quando um item for removido.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Collections.ExpiringList`1.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="E:Colosoft.Collections.ExpiringList`1.Removed">
            <summary>
            Evento acionado quando um item for removido.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ExpiringList`1.Item(System.Int32)">
            <summary>
            Recupera a instancia de um item pelo indice informado.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Collections.ExpiringList`1.Count">
            <summary>
            Quantidade de itens na instancia.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.FilteredObservableCollection`1">
            <summary>
            Implementação da coleção observada que da suporte para filtro.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Colosoft.Collections.IFilteredObservableCollection">
            <summary>
            Assinatura de uma coleção que suporte filtro.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.IFilteredObservableCollection.Filter">
            <summary>
            Filtro da coleção.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.IFilteredObservableCollection.Source">
            <summary>
            Origem dos dados filtrados.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.FilteredObservableCollection`1._reentrancyThreads">
            <summary>
            Lista das threads usadas para fazer o controle de reentrada.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.#ctor(Colosoft.Collections.IObservableCollection{`0},System.Predicate{`0})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="collection">Coleção que será filtrada.</param>
            <param name="filter">Predicado para o filtro.</param>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.Finalize">
            <summary>
            Destrutor
            </summary>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.ResetIndexReference">
            <summary>
            Realiza um reset das referencias de indice.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.OnInnerCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Método acionado quando a coleção que está filtrar sofrer alteração.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Método acionado quando uma propriedade for alterada.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.Reset">
            <summary>
            Reseta a coleção.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.Move(System.Int32,System.Int32)">
            <summary>
            Move o item de uma posição para outra.
            </summary>
            <param name="oldIndex">Indice antigo</param>
            <param name="newIndex">Novo indice.</param>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.Add(`0)">
            <summary>
            Adiciona um item para a coleção.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.Add(System.Object)">
            <summary>
            Adiciona um item para a coleção.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.Clear">
            <summary>
            Limpa os itens da coleção.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.Contains(`0)">
            <summary>
            Verifica se a coleção contém o item informado.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.Contains(System.Object)">
            <summary>
            Verifica se a coleção contém o valor informado.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copia os dados para o vetor informado.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copia os dados para o vetor informado.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.IndexOf(`0)">
            <summary>
            Recupera o indice do item na coleção.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.IndexOf(System.Object)">
            <summary>
            Recupera o indice do valor na coleção.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.Insert(System.Int32,`0)">
            <summary>
            Insere o item na coleção.
            </summary>
            <param name="index">Indice onde o item será inserido.</param>
            <param name="item">Instancia do item que será inserido.</param>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.Insert(System.Int32,System.Object)">
            <summary>
            Insere o item na coleção.
            </summary>
            <param name="index">Indice onde o item será inserido.</param>
            <param name="value">Instancia do valor que será inserido.</param>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.Remove(`0)">
            <summary>
            Remove a instancia do item da coleção.
            </summary>
            <param name="item">Instancia do item que será removido.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.Remove(System.Object)">
            <summary>
            Remove a instancia do valor da coleção.
            </summary>
            <param name="value">Instancia do valor que será removido.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.RemoveAt(System.Int32)">
            <summary>
            Remove o item na posição informada.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.BlockReentrancy">
            <summary>
            Recupera o bloco de reentrada.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Método acionado quando a coleção for alterada.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.GetEnumerator">
            <summary>
            Recupera a enumerador da coleção.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.Colosoft#Collections#IThreadSafeObservableCollection#DisableThreadSafe">
            <summary>
            Desabilita o thread safe.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.Colosoft#Collections#IThreadSafeObservableCollection#EnableThreadSafe">
            <summary>
            Habilita o thread safe.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.Colosoft#Collections#INotifyCollectionChangedDispatcher#AddCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler,Colosoft.Collections.NotifyCollectionChangedDispatcherPriority)">
            <summary>
            Adiciona o evento que será acionado quando a coleção for alterada.
            </summary>
            <param name="eventHandler"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.Colosoft#Collections#INotifyCollectionChangedDispatcher#RemoveCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler)">
            <summary>
            Remove o evento registrado para ser acionado quando a coleção for alterada.
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="E:Colosoft.Collections.FilteredObservableCollection`1.CollectionChanged">
            <summary>
            Evento acionado quando a coleção for alterada.
            </summary>
        </member>
        <member name="E:Colosoft.Collections.FilteredObservableCollection`1.PropertyChanged">
            <summary>
            Evento acionado quando um propriedade for alterada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.FilteredObservableCollection`1.Source">
            <summary>
            Origem dos dados filtrados.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.FilteredObservableCollection`1.IsThreadSafe">
            <summary>
            Identifica se a instancia está em modo de ThreadSafe.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.FilteredObservableCollection`1.Count">
            <summary>
            Quantidade de itens na coleção.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.FilteredObservableCollection`1.Filter">
            <summary>
            Filtro que será aplicado a coleção.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.FilteredObservableCollection`1.Colosoft#Collections#IFilteredObservableCollection#Filter">
            <summary>
            Filtra que será aplicado a coleção.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.FilteredObservableCollection`1.IsFixedSize">
            <summary>
            Identifica se a coleção possui um tamanho fixado.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.FilteredObservableCollection`1.IsReadOnly">
            <summary>
            Identifica se a coleção é somente leitura.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.FilteredObservableCollection`1.IsSynchronized">
            <summary>
            Identifica se a coleção é sincronizada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.FilteredObservableCollection`1.SyncRoot">
            <summary>
            Instancia para sincronização.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.FilteredObservableCollection`1.Item(System.Int32)">
            <summary>
            Recupera e define o item na posição informada.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Collections.FilteredObservableCollection`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Recupera e define o item na posição informada.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Collections.FilteredObservableCollection`1.FilteredEnumerator">
            <summary>
            Implementação do enumerador dos itens da coleção filtrada.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.FilteredObservableCollection`1.ReentracyMonitor">
            <summary>
            Implementação usada para monitorar reentradas de chamada.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.ReentracyMonitor.#ctor(Colosoft.Collections.FilteredObservableCollection{`0})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Colosoft.Collections.FilteredObservableCollection`1.ReentracyMonitor.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.DataPageLoadedEventArgs`1">
            <summary>
            Armazena os argumentos do evento acionado quando
            uma página de dados for carregada.
            </summary>
            <typeparam name="T">Tipo tratado pela página de dados.</typeparam>
        </member>
        <member name="M:Colosoft.Collections.DataPageLoadedEventArgs`1.#ctor(Colosoft.Collections.IDataPage{`0})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="page"></param>
        </member>
        <member name="P:Colosoft.Collections.DataPageLoadedEventArgs`1.Page">
            <summary>
            Página de dados associada.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.DataPageLoadedEventHandler`1">
            <summary>
            Assinatura do evento acionado quando um página de dados for carregada.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Colosoft.Collections.ILoadErrorControl">
            <summary>
            Assinatura das classe de controle de erro de carga
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ILoadErrorControl.NotifyError(System.Exception)">
            <summary>
            Notifica um erro ocorrido.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="P:Colosoft.Collections.ILoadErrorControl.HasError">
            <summary>
            Identifica se a instanci possui erro.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.IndexNotFoundException">
            <summary>
            Representa o erro acionado quando o indice não é encontrado.
            </summary>
        </member>
        <member name="T:Colosoft.DetailsException">
            <summary>
            Representa uma <see cref="T:System.Exception"/> detalhada.
            </summary>
        </member>
        <member name="T:Colosoft.IDetailsException">
            <summary>
            Assinatura de uma <see cref="T:System.Exception"/> com mensagem formatável.
            </summary>
        </member>
        <member name="P:Colosoft.IDetailsException.MessageFormattable">
            <summary>
            Mensagem formatável.
            </summary>
        </member>
        <member name="M:Colosoft.DetailsException.#ctor(Colosoft.IMessageFormattable)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="message">Instancia da mensagem formatável.</param>
        </member>
        <member name="M:Colosoft.DetailsException.#ctor(Colosoft.IMessageFormattable,System.Exception)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="message">Instancia da mensagem formatável.</param>
            <param name="innerException"></param>
        </member>
        <member name="M:Colosoft.DetailsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor de deserialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.DetailsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Colosoft.DetailsException.MessageFormattable">
            <summary>
            Mensagem formatável.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.IndexNotFoundException.#ctor(System.String)">
            <summary>
            Cria a instancia com o nome do indice não encontrado.
            </summary>
            <param name="indexName"></param>
        </member>
        <member name="T:Colosoft.Collections.NotifyCollectionChangedDispatcherPriority">
            <summary>
            Possíveis prioridades usadas pelo log.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.NotifyCollectionChangedDispatcherPriority.Low">
            <summary>
            Entrada de baixa prioridade.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.NotifyCollectionChangedDispatcherPriority.Normal">
            <summary>
            Entrada de prioridade normal.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.NotifyCollectionChangedDispatcherPriority.High">
            <summary>
            Entrada de alta prioridade.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.INotifyCollectionChangedObserver">
            <summary>
            Assinatura da classe que trabalha como um observer 
            de uma coleção com suporte para notificações.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.INotifyCollectionChangedObserver.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Método acionado qaundo a coleção sofre alguam alteração.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Colosoft.Collections.AggregateNotifyCollectionChangedObserver">
            <summary>
            Implementação do agragador de observers.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.AggregateNotifyCollectionChangedObserver.Finalize">
            <summary>
            Destrutor.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.AggregateNotifyCollectionChangedObserver.Add(Colosoft.Collections.INotifyCollectionChangedObserver,Colosoft.Collections.NotifyCollectionChangedObserverLiveScope)">
            <summary>
            Adiciona mais um novo observer para o agregador. 
            </summary>
            <param name="observer"></param>
            <param name="liveScope"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.AggregateNotifyCollectionChangedObserver.Remove(Colosoft.Collections.INotifyCollectionChangedObserver)">
            <summary>
            Remove o observer que já foi anexado.
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.AggregateNotifyCollectionChangedObserver.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Método acionado quando a coleção sofre alguma alteração.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.AggregateNotifyCollectionChangedObserver.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Collections.AggregateNotifyCollectionChangedObserver.Dispose">
            <summary>
            Libera a instancia
            </summary>
        </member>
        <member name="T:Colosoft.Collections.NotifyCollectionChangedObserverLiveScope">
            <summary>
            Possíveis escopos de vida o observer.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.NotifyCollectionChangedObserverLiveScope.None">
            <summary>
            Idenfinido.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.NotifyCollectionChangedObserverLiveScope.Instance">
            <summary>
            Identifica que o observer irá sobreviver
            durante o tempo de vida da coleção.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.INotifyCollectionChangedObserverRegister">
            <summary>
            Assinatura da classe responsável por registrar um observer.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.INotifyCollectionChangedObserverRegister.Register(Colosoft.Collections.INotifyCollectionChangedObserverContainer)">
            <summary>
            Registra os observers no container.
            </summary>
            <param name="container"></param>
        </member>
        <member name="T:Colosoft.Collections.NotifyCollectionChangedObserverRegisterEnumerable`1">
            <summary>
            Implementação usada para realiza um wrapper do enumerable.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Colosoft.Collections.NotifyCollectionChangedObserverRegisterEnumerable`1.#ctor(System.Collections.IEnumerable,System.Func{System.Object,`0})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="enumerable"></param>
            <param name="converter">Instancia usada para converter o item do enumerador.</param>
        </member>
        <member name="M:Colosoft.Collections.NotifyCollectionChangedObserverRegisterEnumerable`1.Register(Colosoft.Collections.INotifyCollectionChangedObserverContainer)">
            <summary>
            Método usado para regitrar o container.
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:Colosoft.Collections.NotifyCollectionChangedObserverRegisterEnumerable`1.GetEnumerator">
            <summary>
            Recupera o enumerador.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.NotifyCollectionChangedObserverRegisterEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Collections.ObservableCollectionIndexType">
            <summary>
            Possíveis tipos de indice.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.ObservableCollectionIndexType.Any">
            <summary>
            Qualquer tipo de indice.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.ObservableCollectionIndexType.Sorted">
            <summary>
            Indice ordenado.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.ObservableCollectionIndexType.Hash">
            <summary>
            Indice por hash.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.IObservableCollectionIndex`1">
            <summary>
            Assinatura das classes de indices da coleções observadas.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Colosoft.Collections.IObservableCollectionIndex`1.Reset">
            <summary>
            Reseta o indice.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.IObservableCollectionIndex`1.Name">
            <summary>
            Nome do indice.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.IObservableCollectionIndex`1.WatchProperties">
            <summary>
            Propriedade que são monitoradas pelo indice.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.IObservableCollectionIndex`1.Item(System.Object)">
            <summary>
            Recupera o itens associado com o a chave informada.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Collections.SearchParamerterDescription">
            <summary>
            Armazena os dados da descrição do parametro de pesquisa.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.SearchParamerterDescription.#ctor(System.String)">
            <summary>
            Construtor protegido.
            </summary>
            <param name="parameterName"></param>
        </member>
        <member name="M:Colosoft.Collections.SearchParamerterDescription.#ctor(System.String,Colosoft.IMessageFormattable)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="parameterName">Nome do parametro.</param>
            <param name="description">Descrição do parametro.</param>
        </member>
        <member name="M:Colosoft.Collections.SearchParamerterDescription.Clone">
            <summary>
            Clona os dados da instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Collections.SearchParamerterDescription.ParameterName">
            <summary>
            Nome do parametro.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.SearchParamerterDescription.Description">
            <summary>
            Descrição do parametro.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.SearchParameterDescriptionLazy">
            <summary>
            Reprenseta o parametro de pesquisa com carga tardia.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.SearchParameterDescriptionLazy.#ctor(System.String,System.Lazy{Colosoft.IMessageFormattable})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="parameterName"></param>
            <param name="description"></param>
        </member>
        <member name="M:Colosoft.Collections.SearchParameterDescriptionLazy.Clone">
            <summary>
            Clona a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Collections.SearchParameterDescriptionLazy.Description">
            <summary>
            Descrição.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.SearchParameterDescriptionCollection">
            <summary>
            Assinatura de um container com a descrição dos parametros de pesquisa.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.SearchParameterDescriptionCollection.Add(System.String,Colosoft.IMessageFormattable)">
            <summary>
            Adiciona uma descrição para a coleção.
            </summary>
            <param name="parameterName">Nome do parametro.</param>
            <param name="description">Descrição do parametro.</param>
        </member>
        <member name="M:Colosoft.Collections.SearchParameterDescriptionCollection.Add(System.String,System.Lazy{Colosoft.IMessageFormattable})">
            <summary>
            Adiciona uma descrição para a coleção.
            </summary>
            <param name="parameterName"></param>
            <param name="description"></param>
        </member>
        <member name="M:Colosoft.Collections.SearchParameterDescriptionCollection.Add(Colosoft.Collections.SearchParamerterDescription)">
            <summary>
            Adiciona a descrição do parametro.
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:Colosoft.Collections.SearchParameterDescriptionCollection.Remove(Colosoft.Collections.SearchParamerterDescription)">
            <summary>
            Recupera a descrição do parametro.
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.SearchParameterDescriptionCollection.RemoveAt(System.Int32)">
            <summary>
            Remove o parametro na posição informada.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Collections.SearchParameterDescriptionCollection.Clear">
            <summary>
            Limpa o container.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.SearchParameterDescriptionCollection.GetEnumerator">
            <summary>
            Recupera o enumerador dos parametros.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.SearchParameterDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador dos parametros.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.SearchParameterDescriptionCollection.Clone">
            <summary>
            Clona os dados da instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Collections.SearchParameterDescriptionCollection.Count">
            <summary>
            Quantidade de parametros do container.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.SearchParameterDescriptionCollection.Item(System.Int32)">
            <summary>
            Recupera e define o parametro no indice informado.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Collections.ISortableCollection">
            <summary>
            Assinatura que repreesnta um coleção ordenável.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ISortableCollection.ApplySort(System.String)">
            <summary>
            Aplica a ordenação a coleção.
            </summary>
            <param name="sortExpression">Expressão de ordenação.</param>
        </member>
        <member name="M:Colosoft.Collections.ISortableCollection.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Aplica a ordenação a coleção.
            </summary>
            <param name="property">Descritor da propriedade que será ordenada.</param>
            <param name="direction">Direção da ordenação.</param>
        </member>
        <member name="M:Colosoft.Collections.ISortableCollection.RemoveSort">
            <summary>
            Remove a ordenação aplicada.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.IUniqueItemInList`1">
            <summary>
            Contrato para itens que devem ser unicos nas listas
            </summary>
        </member>
        <member name="M:Colosoft.Collections.IUniqueItemInList`1.IsEqual(`0)">
            <summary>
            Verifica se já existe um opcional igual na lista.
            </summary>
            <param name="otherItem"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Collections.ListChangedWrapperEventData">
            <summary>
            Dados do evento adaptado da alteração da coleção.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ListChangedWrapperEventData.#ctor(Colosoft.Threading.IDispatcher,System.ComponentModel.ListChangedEventHandler)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="dispatcher"></param>
            <param name="action"></param>
        </member>
        <member name="M:Colosoft.Collections.ListChangedWrapperEventData.Invoke(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Realiza a chamada para tratar o evento.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Colosoft.Collections.ListChangedWrapperEventData.Dispatcher">
            <summary>
            Instancia do dispatcher associado.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ListChangedWrapperEventData.Action">
            <summary>
            Ação associada.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.ObservableCollectionDebugView`1">
            <summary>
            Classe usada para servir como auxiliar na exibição do debug.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionDebugView`1.#ctor(Colosoft.Collections.IObservableCollection{`0})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionDebugView`1.Items">
            <summary>
            Itens da coleção.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.ObservableCollectionIndex`1">
            <summary>
            Implementação básica de um indice da coleção observada.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionIndex`1.#ctor(System.String,Colosoft.Collections.IObservableCollection{`0},System.String[],System.Func{`0,System.Object},System.Collections.IComparer)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="name">Nome do indice.</param>
            <param name="collection">Coleção que será observada.</param>
            <param name="watchProperties">Relação das propriedades assistidas.</param>
            <param name="keyGetter">Ponteiro do método usado para recupera o valor da chave do item.</param>
            <param name="comparer">Comparador que será utilizado.</param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionIndex`1.Finalize">
            <summary>
            Destrutor.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionIndex`1.Reset">
            <summary>
            Reseta o indice.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionIndex`1.Initialize">
            <summary>
            Inicializa o indice.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionIndex`1.OnAdded(`0,System.Int32)">
            <summary>
            Método usado para tratar os novos itens adicionados.
            </summary>
            <param name="item">Item adicionado</param>
            <param name="index">Indice do item na coleção de origem.</param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionIndex`1.OnRemoved(`0,System.Int32)">
            <summary>
            Método acionado quando o item for removido.
            </summary>
            <param name="item"></param>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionIndex`1.CollectionCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Método acionado quando a coleção for alterada.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionIndex`1.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionIndex`1.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionIndex`1.Name">
            <summary>
            Nome do indice.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionIndex`1.WatchProperties">
            <summary>
            Propriedade que são monitoradas pelo indice.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionIndex`1.KeyGetter">
            <summary>
            Func usado para recuperar o valor da chave.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionIndex`1.Comparer">
            <summary>
            Comparador do indice.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionIndex`1.Collection">
            <summary>
            Coleção onde estão os dados reais.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionIndex`1.SyncRoot">
            <summary>
            Instancia usada para sincronizar as operações.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionIndex`1.Item(System.Object)">
            <summary>
            Recupera o itens pelo indice informado.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Collections.ObservableCollectionProxy`2">
            <summary>
            Implementação da uma coleção observada com suporte a adaptação dos seus itens.
            </summary>
            <typeparam name="T">Tipo da coleção que será adaptada.</typeparam>
            <typeparam name="TProxy">Tipo adaptado da coleção.</typeparam>
        </member>
        <member name="F:Colosoft.Collections.ObservableCollectionProxy`2._internalCollection">
            <summary>
            Instancia da coleção que está sendo adaptada.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.ObservableCollectionProxy`2._proxyCreator">
            <summary>
            Delegate usado para criar o item da coleção.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.ObservableCollectionProxy`2._itemCreator">
            <summary>
            Delegate usado para criar o item a partir do proxy.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.ObservableCollectionProxy`2._propertyChanged">
            <summary>
            Evento acioando quando uma propriedade for alterada.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.ObservableCollectionProxy`2._reentrancyThreads">
            <summary>
            Lista das threads usadas para fazer o controle de reentrada.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.ObservableCollectionProxy`2._proxyCollectionChangesAccumulator">
            <summary>
            Instancia do acumulador de evento de alteração na coleção proxy.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.#ctor(Colosoft.Collections.IObservableCollection{`0},System.Func{`0,`1})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="collection">Coleção que será adaptada.</param>
            <param name="proxyCreator"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.#ctor(Colosoft.Collections.IObservableCollection{`0},System.Func{`0,`1},System.Func{`1,`0})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="collection">Coleção que será adaptada.</param>
            <param name="proxyCreator"></param>
            <param name="itemCreator"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.#ctor">
            <summary>
            Construtor interno.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.Finalize">
            <summary>
            Destrutor.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.Initialize(Colosoft.Collections.IObservableCollection{`0},System.Func{`0,`1},System.Func{`1,`0})">
            <summary>
            Inicializa a instancia.
            </summary>
            <param name="collection"></param>
            <param name="proxyCreator"></param>
            <param name="itemCreator"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.BlockReentrancy">
            <summary>
            Recupera o bloco de reentrada.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.CheckReentrancy">
            <summary>
            Verifica a reentrada.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Método acionado quando uma propriedade for alterada.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Método acionado para notificar que a coleção foi alterada.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.ProxyCollectionCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Método acionado quando a coleção proxy for alterada.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.ProxyCollectionPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Método acionado quando uma propriedade da coleção proxy for alterada.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.CheckDisposed">
            <summary>
            Verifica se a instancia já foi liberada.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.OnPropertyChanged(System.String)">
            <summary>
            Notifica a alteração de uma propriedade.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.InnerCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Método acioando quando a coleção adaptada sofrer alguma alteração.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.Move(System.Int32,System.Int32)">
            <summary>
            Move o item de uma posição para outra.
            </summary>
            <param name="oldIndex">Indice antigo</param>
            <param name="newIndex">Novo indice.</param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.Add(`1)">
            <summary>
            Adiciona um item para a coleção.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.Add(System.Object)">
            <summary>
            Adiciona um item para a coleção.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.Clear">
            <summary>
            Limpa os itens da coleção.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.Contains(`1)">
            <summary>
            Verifica se a coleção contém o item informado.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.Contains(System.Object)">
            <summary>
            Verifica se a coleção contém o valor informado.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copia os dados para o vetor informado.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copia os dados para o vetor informado.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.IndexOf(`1)">
            <summary>
            Recupera o indice do item na coleção.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.IndexOf(System.Object)">
            <summary>
            Recupera o indice do valor na coleção.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.Insert(System.Int32,`1)">
            <summary>
            Insere o item na coleção.
            </summary>
            <param name="index">Indice onde o item será inserido.</param>
            <param name="item">Instancia do item que será inserido.</param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.Insert(System.Int32,System.Object)">
            <summary>
            Insere o item na coleção.
            </summary>
            <param name="index">Indice onde o item será inserido.</param>
            <param name="value">Instancia do valor que será inserido.</param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.Remove(`1)">
            <summary>
            Remove a instancia do item da coleção.
            </summary>
            <param name="item">Instancia do item que será removido.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.Remove(System.Object)">
            <summary>
            Remove a instancia do valor da coleção.
            </summary>
            <param name="value">Instancia do valor que será removido.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.RemoveAt(System.Int32)">
            <summary>
            Remove o item na posição informada.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.Reset">
            <summary>
            Reseta os dados da instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.GetEnumerator">
            <summary>
            Recupera a enumerador da coleção.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.Colosoft#Collections#INotifyCollectionChangedDispatcher#AddCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler,Colosoft.Collections.NotifyCollectionChangedDispatcherPriority)">
            <summary>
            Adiciona o evento que será acionado quando a coleção for alterada.
            </summary>
            <param name="eventHandler"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.Colosoft#Collections#INotifyCollectionChangedDispatcher#RemoveCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler)">
            <summary>
            Remove o evento registrado para ser acionado quando a coleção for alterada.
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.Colosoft#Collections#IThreadSafeObservableCollection#DisableThreadSafe">
            <summary>
            Desabilita o thread safe.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.Colosoft#Collections#IThreadSafeObservableCollection#EnableThreadSafe">
            <summary>
            Habilita o thread safe.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.Colosoft#Collections#INotifyCollectionChangedObserverContainer#AddObserver(Colosoft.Collections.INotifyCollectionChangedObserver,Colosoft.Collections.NotifyCollectionChangedObserverLiveScope)">
            <summary>
            Adiciona um observer para a instancia.
            </summary>
            <param name="observer"></param>
            <param name="liveScope"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.Colosoft#Collections#INotifyCollectionChangedObserverContainer#RemoveObserver(Colosoft.Collections.INotifyCollectionChangedObserver)">
            <summary>
            Remove o observer da coleção.
            </summary>
            <param name="observer"></param>
        </member>
        <member name="E:Colosoft.Collections.ObservableCollectionProxy`2.CollectionChanged">
            <summary>
            Evento acionado quando a coleção for alterada.
            </summary>
        </member>
        <member name="E:Colosoft.Collections.ObservableCollectionProxy`2.PropertyChanged">
            <summary>
            Evento acionado quando um propriedade for alterada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionProxy`2.IsThreadSafe">
            <summary>
            Identifica se a instancia está em modo de ThreadSafe.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionProxy`2.IsCollectionChangesBusy">
            <summary>
            Verifica se as altearções na coleção estão ocupadas.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionProxy`2.SourceCollection">
            <summary>
            Instancia da coleção base no qual o proxy está aplicado.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionProxy`2.ItemCreator">
            <summary>
            Delegate usado para criar um item.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionProxy`2.Count">
            <summary>
            Quantidade de itens na coleção.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionProxy`2.IsFixedSize">
            <summary>
            Identifica se a coleção possui um tamanho fixado.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionProxy`2.IsReadOnly">
            <summary>
            Identifica se a coleção é somente leitura.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionProxy`2.IsSynchronized">
            <summary>
            Identifica se a coleção é sincronizada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionProxy`2.SyncRoot">
            <summary>
            Instancia para sincronização.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionProxy`2.Item(System.Int32)">
            <summary>
            Recupera e define o item na posição informada.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionProxy`2.System#Collections#IList#Item(System.Int32)">
            <summary>
            Recupera e define o item na posição informada.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Collections.ObservableCollectionProxy`2.ProxyEntry">
            <summary>
            Representa uma entrada do proxy.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.ObservableCollectionProxy`2.ProxyEntry.Proxy">
            <summary>
            Instancia do proxy associada.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.ObservableCollectionProxy`2.ProxyEntry.OriginalHashCode">
            <summary>
            Hashcode da instancia original.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.ProxyEntry.#ctor(`1,System.Int32)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="proxy"></param>
            <param name="originalHashCode"></param>
        </member>
        <member name="T:Colosoft.Collections.ObservableCollectionProxy`2.ProxyEntryEqualityComparer">
            <summary>
            Comparador padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.ProxyEntryEqualityComparer.Equals(Colosoft.Collections.ObservableCollectionProxy{`0,`1}.ProxyEntry,Colosoft.Collections.ObservableCollectionProxy{`0,`1}.ProxyEntry)">
            <summary>
            Compara as instancias informadas.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.ProxyEntryEqualityComparer.GetHashCode(Colosoft.Collections.ObservableCollectionProxy{`0,`1}.ProxyEntry)">
            <summary>
            Recupera o hashcode da instancia informada.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Collections.ObservableCollectionProxy`2.ProxyEntryEnumerator">
            <summary>
            Implementação do enumerator para o Proxy.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.ProxyEntryEnumerator.#ctor(System.Collections.Generic.IEnumerator{Colosoft.Collections.ObservableCollectionProxy{`0,`1}.ProxyEntry})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="enumerator"></param>
        </member>
        <member name="T:Colosoft.Collections.ObservableCollectionProxy`2.ReentracyMonitor">
            <summary>
            Implementação usada para monitorar reentradas de chamada.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.ReentracyMonitor.#ctor(Colosoft.Collections.ObservableCollectionProxy{`0,`1})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.ReentracyMonitor.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.ProxyMonitor.#ctor(Colosoft.Collections.ObservableCollectionProxy{`0,`1})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionProxy`2.ProxyMonitor.Free">
            <summary>
            Libera ao monitor.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.ObservableCollectionSortedIndex`1">
            <summary>
            Represente o indice de uma coleção observada.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.ObservableCollectionSortedIndex`1._items">
            <summary>
            Relação dos itens do indice.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionSortedIndex`1.#ctor(System.String,Colosoft.Collections.IObservableCollection{`0},System.String[],System.Func{`0,System.Object},System.Collections.IComparer)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="name">Nome do indice.</param>
            <param name="collection">Coleção que será observada.</param>
            <param name="watchProperties">Relação das propriedades assistidas.</param>
            <param name="keyGetter">Ponteiro do método usado para recupera o valor da chave do item.</param>
            <param name="comparer">Comparador que será utilizado.</param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionSortedIndex`1.Reset">
            <summary>
            Reseta o indice.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionSortedIndex`1.OnAdded(`0,System.Int32)">
            <summary>
            Método usado para tratar os novos itens adicionados.
            </summary>
            <param name="item">Item adicionado</param>
            <param name="index">Indice do item na coleção de origem.</param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionSortedIndex`1.OnRemoved(`0,System.Int32)">
            <summary>
            Método acionado quando o item for removido.
            </summary>
            <param name="item"></param>
            <param name="index"></param>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionSortedIndex`1.Item(System.Object)">
            <summary>
            Recupera o itens pelo indice informado.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Collections.ObservableCollectionSortedIndex`1.SortedList2Item">
            <summary>
            Representa um item da lista ordenada.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionSortedIndex`1.SortedList2Item.#ctor(System.Object,System.Collections.Generic.List{System.Int32})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="key"></param>
            <param name="indexes"></param>
        </member>
        <member name="T:Colosoft.Collections.ObservableCollectionSortedIndex`1.SortedList2ItemComparer">
            <summary>
            Implementação do comparador do item da lista ordenada.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionSortedIndex`1.SortedList2ItemComparer.#ctor(System.Collections.IComparer)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionSortedIndex`1.SortedList2ItemComparer.Compare(Colosoft.Collections.ObservableCollectionSortedIndex{`0}.SortedList2Item,Colosoft.Collections.ObservableCollectionSortedIndex{`0}.SortedList2Item)">
            <summary>
            Compara os itens informados.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Collections.ObservableCollectionSortedIndex`1.SortedList2">
            <summary>
            Implementação de uma lista ordenada customizada para o indice.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionSortedIndex`1.SortedList2.#ctor(Colosoft.Collections.ObservableCollectionSortedIndex{`0}.SortedList2ItemComparer)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionSortedIndex`1.SortedList2.ContainsKey(System.Object)">
            <summary>
            Verifica se existe a chave informada.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionSortedIndex`1.SortedList2.Clear">
            <summary>
            Limpa a coleção.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionSortedIndex`1.SortedList2.Item(System.Object)">
            <summary>
            Recupera as posição pela chave informada.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Collections.ObservableCollectionWrapper`1">
            <summary>
            Implementação do wrapper de uma coleção observada.
            </summary>
            <typeparam name="TDestination"></typeparam>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionWrapper`1.#ctor(Colosoft.Collections.IObservableCollection)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionWrapper`1.Move(System.Int32,System.Int32)">
            <summary>
            Move o item de uma posição para outra.
            </summary>
            <param name="oldIndex">Indice antigo</param>
            <param name="newIndex">Novo indice.</param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionWrapper`1.IndexOf(`0)">
            <summary>
            Recupera o indice do item na coleção.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionWrapper`1.Insert(System.Int32,`0)">
            <summary>
            Insere o item na coleção.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionWrapper`1.RemoveAt(System.Int32)">
            <summary>
            Remove o item na posição informada.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionWrapper`1.Add(`0)">
            <summary>
            Adiciona o item na coleção.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionWrapper`1.Clear">
            <summary>
            Limpa a coleção.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionWrapper`1.Contains(`0)">
            <summary>
            Verifica se o item está contido na coleção.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionWrapper`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copia os itens para o vetor informado.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionWrapper`1.Remove(`0)">
            <summary>
            Remove o item da coleção.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionWrapper`1.GetEnumerator">
            <summary>
            Recupera o enumerador dos itens.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador dos itens.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionWrapper`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adiciona o valor informado.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionWrapper`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Verifica se na coleção existe o valor informado.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionWrapper`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Recupera o indice do valor na coleção.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionWrapper`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Insere o valor na coleção.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionWrapper`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Remove o valor informado.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionWrapper`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Remove o item na posição informada.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionWrapper`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copia os itens para o vetor informado.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="E:Colosoft.Collections.ObservableCollectionWrapper`1.CollectionChanged">
            <summary>
            Evento acionado quando a coleção for alterada.
            </summary>
        </member>
        <member name="E:Colosoft.Collections.ObservableCollectionWrapper`1.PropertyChanged">
            <summary>
            Evento acionado quando uma propriedade for alterada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionWrapper`1.Item(System.Int32)">
            <summary>
            Recupera e define o item na posição informada.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionWrapper`1.Count">
            <summary>
            Quantidade de itens na coleção.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionWrapper`1.IsReadOnly">
            <summary>
            Identifica se a coleção é readonly.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionWrapper`1.System#Collections#IList#IsFixedSize">
            <summary>
            Identifica se possui um tamanho fixo.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionWrapper`1.System#Collections#IList#IsReadOnly">
            <summary>
            Identifica se é somente leitura.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionWrapper`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Recupera e define a instancia do item na posição informada.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionWrapper`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Identifica se é uma instancia sincronizada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ObservableCollectionWrapper`1.SyncRoot">
            <summary>
            Objeto de sincronização.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.ObservableCollectionWrapper`1.Enumerator.#ctor(System.Collections.IEnumerator)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="enumerator"></param>
        </member>
        <member name="T:Colosoft.Collections.SelectionEntryEqualityComparer`1">
            <summary>
            Compara dois itens para a entrada se uma seleção.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <param name="item2"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Collections.SelectionCollection`1">
            <summary>
            Implementação de uma coleção de seleção.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Colosoft.Collections.SelectionCollection`1._selectedItems">
            <summary>
            Lista com a relação dos itens selecionados.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.SelectionCollection`1.#ctor(Colosoft.Collections.IObservableCollection{`0},Colosoft.Collections.IObservableCollection{`0})">
            <summary>
            Cria a instancia com a coleção de origem.
            </summary>
            <param name="source">Coleção de origem com todos os dados da lista.</param>
            <param name="selectedItems">Relação dos itens selecionados.</param>
        </member>
        <member name="M:Colosoft.Collections.SelectionCollection`1.#ctor(Colosoft.Collections.IObservableCollection{`0},Colosoft.Collections.IObservableCollection{`0},Colosoft.Collections.SelectionEntryEqualityComparer{`0})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="source">Coleção de origem com todos os dados da lista.</param>
            <param name="selectedItems">Relação dos itens selecionados.</param>
            <param name="selectionComparer">Comparador que será utilizado na solução.</param>
        </member>
        <member name="M:Colosoft.Collections.SelectionCollection`1.Compare1(`0,`0)">
            <summary>
            Comparação explicita dos itens.
            </summary>
            <param name="item1"></param>
            <param name="item2"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.SelectionCollection`1.Compare2(`0,`0)">
            <summary>
            Compara quando o item é um IEquatable.
            </summary>
            <param name="item1"></param>
            <param name="item2"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.SelectionCollection`1.SelectedItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Método acionado toda vez que a lista de itens selecionados for alterada.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.SelectionCollection`1.CreateEntryProxy(`0)">
            <summary>
            Cria o proxy para a entrada.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.SelectionCollection`1.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Colosoft.Collections.SelectionCollection`1.Entry">
            <summary>
            Representa uma entrada.
            </summary>
        </member>
        <member name="T:Colosoft.NotificationObject">
            <summary>
            Classe base para itens que suporte notificação de propriedade.
            </summary>
        </member>
        <member name="M:Colosoft.NotificationObject.RaisePropertyChanged(System.String)">
            <summary>
            Raises this object's PropertyChanged event.
            </summary>
            <param name="propertyName">The property that has a new value.</param>
        </member>
        <member name="M:Colosoft.NotificationObject.RaisePropertyChanged(System.String[])">
            <summary>
            Raises this object's PropertyChanged event for each of the properties.
            </summary>
            <param name="propertyNames">The properties that have a new value.</param>
        </member>
        <member name="M:Colosoft.NotificationObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Raises this object's PropertyChanged event.
            </summary>
            <typeparam name="T">The type of the property that has a new value</typeparam>
            <param name="propertyExpression">A Lambda expression representing the property that has a new value.</param>
        </member>
        <member name="E:Colosoft.NotificationObject.PropertyChanged">
            <summary>
            Raised when a property on this object has a new value.
            </summary>        
        </member>
        <member name="M:Colosoft.Collections.SelectionCollection`1.Entry.#ctor(Colosoft.Collections.SelectionCollection{`0},`0)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="parent"></param>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Collections.SelectionCollection`1.Entry.SetIsSelected(System.Boolean)">
            <summary>
            Define se e entrada está selecionada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.SelectionCollection`1.Entry.Item">
            <summary>
            Item associado com a instancia.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.SelectionCollection`1.Entry.IsSelected">
            <summary>
            Identifica se a entrada está selecionada
            </summary>
        </member>
        <member name="T:Colosoft.Collections.SelectionEntryEqualityComparer`2">
            <summary>
            Compara dois itens para a entrada se uma seleção.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="item"></param>
            <param name="item2"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Collections.SelectionCollection`2">
            <summary>
            Implementação de uma coleção de seleção.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProxy"></typeparam>
        </member>
        <member name="F:Colosoft.Collections.SelectionCollection`2._selectedItems">
            <summary>
            Lista com a relação dos itens selecionados.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.SelectionCollection`2._selectedItemCreator">
            <summary>
            Delegate do método usado para criar um instancia do proxy para o item selecionado.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.SelectionCollection`2.#ctor(Colosoft.Collections.IObservableCollection{`0},Colosoft.Collections.IObservableCollection{`1},Colosoft.Collections.SelectionEntryEqualityComparer{`0,`1},System.Func{`0,`1})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="source">Coleção de origem com todos os dados da lista.</param>
            <param name="selectedItems">Relação dos itens selecionados.</param>
            <param name="selectionComparer">Comparador que será utilizado na solução.</param>
            <param name="selectedItemCreator">Delegate usado para cria o item selecionado.</param>
        </member>
        <member name="M:Colosoft.Collections.SelectionCollection`2.SelectedItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Método acionado toda vez que a lista de itens selecionados for alterada.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.SelectionCollection`2.CreateEntryProxy(`0)">
            <summary>
            Cria o proxy para a entrada.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.SelectionCollection`2.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Colosoft.Collections.SelectionCollection`2.Entry">
            <summary>
            Representa uma entrada.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.SelectionCollection`2.Entry.#ctor(Colosoft.Collections.SelectionCollection{`0,`1},`0)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="parent"></param>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Collections.SelectionCollection`2.Entry.SetIsSelected(System.Boolean)">
            <summary>
            Define se e entrada está selecionada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.SelectionCollection`2.Entry.Item">
            <summary>
            Item associado com a instancia.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.SelectionCollection`2.Entry.IsSelected">
            <summary>
            Identifica se a entrada está selecionada
            </summary>
        </member>
        <member name="T:Colosoft.Collections.Set`1">
            <summary>
            Implementação de um conjunto de itens.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Colosoft.Collections.Set`1.#ctor">
            <summary>
            Cria uma nova instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.Set`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Cria uma nova instancia definindo o comparador.
            </summary>
            <param name="equalityComparer"></param>
        </member>
        <member name="M:Colosoft.Collections.Set`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Cria uma nova instancia com a lista do conteúdo inicial.
            </summary>
            <param name="initialContents"></param>
        </member>
        <member name="M:Colosoft.Collections.Set`1.#ctor(System.Int32)">
            <summary>
            Cria uma nova instancia definindo o tamanho incial do conjunto.
            </summary>
            <param name="numItems"></param>
        </member>
        <member name="M:Colosoft.Collections.Set`1.#ctor(System.Collections.Generic.IList{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Cria uma nova instancia definindo os itens inciais e o comparador.
            </summary>
            <param name="initialContents"></param>
            <param name="equalityComparer"></param>
        </member>
        <member name="M:Colosoft.Collections.Set`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Cria uma nova instancia definindo o tamanho e o comparador.
            </summary>
            <param name="numItems"></param>
            <param name="equalityComparer"></param>
        </member>
        <member name="M:Colosoft.Collections.Set`1.Add(`0)">
            <summary>
            Adiciona um novo item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Collections.Set`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adiciona uma faixa de itens.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Colosoft.Collections.Set`1.Clear">
            <summary>
            Limpa os itens do conjunto.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.Set`1.Contains(`0)">
            <summary>
            Verifica se no conjunto existe o item informado.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.Set`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copia o itens para o vetor informado.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Collections.Set`1.GetEnumerator">
            <summary>
            Recupera o enumerador para os itens.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.Set`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador para os itens.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.Set`1.Remove(`0)">
            <summary>
            Remove o item informado.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.Set`1.ToArray">
            <summary>
            Transforma o conjunto em um vetor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.Set`1.ToList">
            <summary>
            Transforma o conjunto em uma lista.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Collections.Set`1.Count">
            <summary>
            Quantidade de itens no conjunto.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.Set`1.IsReadOnly">
            <summary>
            Identifica se a coleção é somente leitura.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.SortableObservableCollection`1">
            <summary>
            Implementação de uma coleção observada ordenada.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.SortableObservableCollection`1._source">
            <summary>
            Coleção de origem.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.SortableObservableCollection`1._indexes">
            <summary>
            Relação dos indices dos itens da coleção.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.SortableObservableCollection`1._comparer">
            <summary>
            Comparador utilizado pela instancia.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.SortableObservableCollection`1._comparerPropertiesContainer">
            <summary>
            Container das propriedade usadas pelo comparer.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.#ctor(Colosoft.Collections.IObservableCollection{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="source">Relação da coleção de origem dos dados.</param>
            <param name="comparer">Comparador que será utilizado para ordenar os itens.</param>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.Finalize">
            <summary>
            Destrutor.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Método acionado quando uma propriedade for alterada.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.OnPropertyChanged(System.String)">
            <summary>
            Notifica a alteração de uma propriedade.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.RegisterItem(`0)">
            <summary>
            Registra o item controlado pela coleção.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.UnregisterItem(`0)">
            <summary>
            Remove registro do item controlado pela coleção.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.ItemPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Método acionado quando a propriedade de uma dos itens da coleção for alterada.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.CalculateIndexes">
            <summary>
            Calcula os indíces da coleção.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.CalculateIndexesWithoutNotifyChanges">
            <summary>
            Calcula os indíces da coleção sem notificar as alterações.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.SourceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Método acionado quando a coleção de origem for alterada.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.IndexesCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Método acionado quando a coleção de indices for alterada.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.IndexOf(`0)">
            <summary>
            Recupera o indice do item na coleção.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.Insert(System.Int32,`0)">
            <summary>
            Insere o item na coleção
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.RemoveAt(System.Int32)">
            <summary>
            Remove o item na posição informada.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.Add(`0)">
            <summary>
            Adiciona o item na coleção.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.Clear">
            <summary>
            Limpa a coleção.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.Contains(`0)">
            <summary>
            Verifica se o item informado existe na coleção.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Cropa os dados para o vetor informado.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.Remove(`0)">
            <summary>
            Remove o item informado.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.Move(System.Int32,System.Int32)">
            <summary>
            Novo o item.
            </summary>
            <param name="oldIndex"></param>
            <param name="newIndex"></param>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.GetEnumerator">
            <summary>
            Recupera o enumerador dos itens.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador dos itens.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adiciona o valor a coleção.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Verifica se contém o valor informado.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Recupera o indice do item na coleção.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Insere o item no posição informada.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Collections.SortableObservableCollection`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Remove o item.
            </summary>
            <param name="value"></param>
        </member>
        <member name="E:Colosoft.Collections.SortableObservableCollection`1.CollectionChanged">
            <summary>
            Evento acionado quando a coleção for alterada.
            </summary>
        </member>
        <member name="E:Colosoft.Collections.SortableObservableCollection`1.PropertyChanged">
            <summary>
            Evento acionado quando uma propriedade for alterada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.SortableObservableCollection`1.Count">
            <summary>
            Quantidade de itens na coleçao.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.SortableObservableCollection`1.IsReadOnly">
            <summary>
            Identifica se a co~leção é somente leitura.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.SortableObservableCollection`1.Item(System.Int32)">
            <summary>
            Recupera o item que está no indice informado.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Collections.SortableObservableCollection`1.System#Collections#IList#IsFixedSize">
            <summary>
            Identifica se a coleção possui um tamanho fixado.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.TreeViewSourceNodeSelectionChangedEventArgs">
            <summary>
            Armazena o argumento da alteração.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSourceNodeSelectionChangedEventArgs.Node">
            <summary>
            Instancia do nó selecionado.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.TreeViewSource">
            <summary>
            Implementação de uma estrutura de árvore.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.TreeViewSource._reentrancyThreads">
            <summary>
            Lista das threads usadas para fazer o controle de reentrada.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSource.#ctor(System.Collections.IEnumerable,System.Func{System.Object,System.Object},System.String,System.Func{System.Object,System.Object},System.String,System.Func{System.Object,Colosoft.IMessageFormattable},System.String,System.Object,System.Boolean,System.Boolean,System.Collections.IEqualityComparer)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="items">Items que serão tratados pela árvore.</param>
            <param name="keyGetter"></param>
            <param name="keyPropertyName"></param>
            <param name="ownerKeyGetter"></param>
            <param name="ownerKeyPropertyName"></param>
            <param name="nameGetter"></param>
            <param name="namePropertyName"></param>
            <param name="rootItem">Item da raiz da árvore.</param>
            <param name="isInitializeExpanded"></param>
            <param name="isLazyLoad">Identifica se a árvore possui cargar tardia.</param>
            <param name="keyEqualityComparer"></param>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSource.FindNodeFromItem(System.Object)">
            <summary>
            Pesquisa o nó para o item informado.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSource.FindNodeFromItem(Colosoft.Collections.ITreeViewSourceNode,System.Object)">
            <summary>
            Pesquisa o nó para o item informado.
            </summary>
            <param name="owner"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSource.CreateKeyComparer(System.Reflection.PropertyInfo)">
            <summary>
            Cria o comparador para a chave.
            </summary>
            <param name="keyPropertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSource.BlockReentrancy">
            <summary>
            Recupera o bloco de reentrada.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSource.RootCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Método acionado quando a coleção for alterada.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSource.UnselectedAll">
            <summary>
            Remove a seleção de todos os nós.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSource.Create``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.String}},``0,System.Boolean,System.Boolean,System.Collections.IEqualityComparer)">
            <summary>
            Cria uma instancia do TreeViewSource.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="keyProperty"></param>
            <param name="ownerKeyProperty"></param>
            <param name="nameProperty"></param>
            <param name="root">Instancia do item da raiz.</param>
            <param name="isInitializeExpanded"></param>
            <param name="isLazyLoad"></param>
            <param name="keyEqualityComparer"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSource.Create``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,Colosoft.IMessageFormattable}},``0,System.Boolean,System.Boolean,System.Collections.IEqualityComparer)">
            <summary>
            Cria uma instancia do TreeViewSource.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="keyProperty"></param>
            <param name="ownerKeyProperty"></param>
            <param name="nameProperty"></param>
            <param name="root">Instancia do item da raiz.</param>
            <param name="isInitializeExpanded"></param>
            <param name="isLazyLoad"></param>
            <param name="keyEqualityComparer"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSource.OnNodeSelectionChanged(Colosoft.Collections.ITreeViewSourceNode)">
            <summary>
            Método acionado quando a seleção do nó for alterada.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSource.GetName(System.Object)">
            <summary>
            Recupera o nome do item informado.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSource.GetKey(System.Object)">
            <summary>
            Recupera o valor da chave para o item informado.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSource.GetOwnerKey(System.Object)">
            <summary>
            Recupera a chave do proprietário do item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSource.GetEnumerator">
            <summary>
            Recupera o enumerador dos nós.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSource.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador dos nós.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSource.Colosoft#Collections#INotifyCollectionChangedDispatcher#AddCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler,Colosoft.Collections.NotifyCollectionChangedDispatcherPriority)">
            <summary>
            Adiciona o evento que será acionado quando a coleção for alterada.
            </summary>
            <param name="eventHandler"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSource.Colosoft#Collections#INotifyCollectionChangedDispatcher#RemoveCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler)">
            <summary>
            Remove o evento registrado para ser acionado quando a coleção for alterada.
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="E:Colosoft.Collections.TreeViewSource.CollectionChanged">
            <summary>
            Evento acionado quando a coleção for alterada.
            </summary>
        </member>
        <member name="E:Colosoft.Collections.TreeViewSource.NodeSelectionChanged">
            <summary>
            Evento acionado quando a seleção de um nó for alterado.
            Esse evento só funciona para o nó raiz.
            </summary>
        </member>
        <member name="E:Colosoft.Collections.TreeViewSource.SelectedNodeChanged">
            <summary>
            Método acionado quando o nó selecionado for alterado.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSource.IsThreadSafe">
            <summary>
            Identifica se a instancia está em modo de ThreadSafe.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSource.IsMultiSelect">
            <summary>
            Identifica se a instancia é multiseleção.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSource.KeyPropertyName">
            <summary>
            Nome da propriedade chave.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSource.NamePropertyName">
            <summary>
            Nome da propriedade nome.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSource.OwnerPropertyName">
            <summary>
            Nome da propriedade Owner.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSource.IsLazyLoad">
            <summary>
            Identifica se a árvore está configurada para carregar em modo Lazy.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSource.SelectedItem">
            <summary>
            Seleciona o item informado.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSource.SelectedNode">
            <summary>
            Instancia do nó selecionado.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSource.SelectedNodes">
            <summary>
            Relação dos nós selecionados.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSource.Items">
            <summary>
            Itens associados.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSource.KeyEqualityComparer">
            <summary>
            Instancia do comparador das chaves dos nós
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSource.IsInitializeExpanded">
            <summary>
            Identifica se é para inicializar com os itens expandidos.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.TreeViewSource.ReentracyMonitor">
            <summary>
            Implementação usada para monitorar reentradas de chamada.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSource.ReentracyMonitor.#ctor(Colosoft.Collections.TreeViewSource)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSource.ReentracyMonitor.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.ITreeViewSourceNode">
            <summary>
            Assinatura de um nó da arvore.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ITreeViewSourceNode.Key">
            <summary>
            Chave do nó.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ITreeViewSourceNode.Name">
            <summary>
            Nome do nó.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ITreeViewSourceNode.Value">
            <summary>
            Valor do nó.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ITreeViewSourceNode.IsExpanded">
            <summary>
            Identifica se o nó está expandido.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.ITreeViewSourceNode.IsSelected">
            <summary>
            Identifica se o nó está selecionado.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.TreeViewSourceNode">
            <summary>
            Implementação genérico do nó de uma arvore.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.TreeViewSourceNode._collectionChanged">
            <summary>
            Instancia usada para armazena os eventos registrados das alterações na coleção.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.TreeViewSourceNode._reentrancyThreads">
            <summary>
            Lista das threads usadas para fazer o controle de reentrada.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.TreeViewSourceNode._isEmpty">
            <summary>
            Identifica se o nó está vazio.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.GetTree">
            <summary>
            Instancia da árvore onde o nó está inserido.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.#ctor(Colosoft.Collections.TreeViewSource,System.Object)">
            <summary>
            Cria um nó para a raiz da árvore.
            </summary>
            <param name="tree"></param>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.#ctor(Colosoft.Collections.TreeViewSourceNode,Colosoft.Collections.TreeViewSourceNode,System.Object)">
            <summary>
            Cria um nó filho.
            </summary>
            <param name="owner"></param>
            <param name="left">Nó da esquerda.</param>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.Finalize">
            <summary>
            Destrutor.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.BlockReentrancy">
            <summary>
            Recupera o bloco de reentrada.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.ClearCache">
            <summary>
            Limpa os itens do cache.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Método acionado quando a coleção for alterada.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.ItemPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Método acionado quando uma propriedade do item for alterada.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.Initialize">
            <summary>
            Inicializa o nó.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.ItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Método acionado quando a coleção dos itens for alterada.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.KeysEquals(Colosoft.Collections.TreeViewSource,System.Object,System.Object)">
            <summary>
            Verifica se as chaves informadas são iguais.
            </summary>
            <param name="tree"></param>
            <param name="key1"></param>
            <param name="key2"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.ResetCollection">
            <summary>
            Reseta a coleção.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.ToString">
            <summary>
            Recupera o texto que representa a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.GetEnumeratorByFirstChild">
            <summary>
            Recupera a enumereação a partir do primeiro filho.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.GetEnumerator">
            <summary>
            Recupera o enumerador dos itens.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador dos itens.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.System#Collections#IList#Add(System.Object)">
            <summary>
            Adiciona um item para a coleção.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.System#Collections#IList#Clear">
            <summary>
            Limpa a coleção.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.System#Collections#IList#Contains(System.Object)">
            <summary>
            Verifica se no nó existe algum filho com o valor informado.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Localiza o indice do valor informado.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.System#Collections#IList#Remove(System.Object)">
            <summary>
            Remove o valor informado.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Remove o item na posição informada.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.System#Collections#Generic#IList{Colosoft#Collections#ITreeViewSourceNode}#IndexOf(Colosoft.Collections.ITreeViewSourceNode)">
            <summary>
            Localiza o indice do item na coleção.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.System#Collections#Generic#IList{Colosoft#Collections#ITreeViewSourceNode}#Insert(System.Int32,Colosoft.Collections.ITreeViewSourceNode)">
            <summary>
            Insere o item na posição informada.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.System#Collections#Generic#IList{Colosoft#Collections#ITreeViewSourceNode}#RemoveAt(System.Int32)">
            <summary>
            Remove o item na posição informada.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.System#Collections#Generic#ICollection{Colosoft#Collections#ITreeViewSourceNode}#Add(Colosoft.Collections.ITreeViewSourceNode)">
            <summary>
            Adiciona o item para a coleção.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.System#Collections#Generic#ICollection{Colosoft#Collections#ITreeViewSourceNode}#Clear">
            <summary>
            Limpa a coleção.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.System#Collections#Generic#ICollection{Colosoft#Collections#ITreeViewSourceNode}#Contains(Colosoft.Collections.ITreeViewSourceNode)">
            <summary>
            Verifica se a coleção contém o item informado.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.System#Collections#Generic#ICollection{Colosoft#Collections#ITreeViewSourceNode}#CopyTo(Colosoft.Collections.ITreeViewSourceNode[],System.Int32)">
            <summary>
            Copia os dados da lista.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.System#Collections#Generic#ICollection{Colosoft#Collections#ITreeViewSourceNode}#Remove(Colosoft.Collections.ITreeViewSourceNode)">
            <summary>
            Remove o item da coleção.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.Colosoft#Collections#IThreadSafeObservableCollection#DisableThreadSafe">
            <summary>
            Desabilita o thread safe.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.Colosoft#Collections#IThreadSafeObservableCollection#EnableThreadSafe">
            <summary>
            Habilita o thread safe.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.Colosoft#Collections#INotifyCollectionChangedDispatcher#AddCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler,Colosoft.Collections.NotifyCollectionChangedDispatcherPriority)">
            <summary>
            Adiciona o evento que será acionado quando a coleção for alterada.
            </summary>
            <param name="eventHandler"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.Colosoft#Collections#INotifyCollectionChangedDispatcher#RemoveCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventHandler)">
            <summary>
            Remove o evento registrado para ser acionado quando a coleção for alterada.
            </summary>
            <param name="eventHandler"></param>
        </member>
        <member name="E:Colosoft.Collections.TreeViewSourceNode.CollectionChanged">
            <summary>
            Evento acionado quando a coleção for alterada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSourceNode.IsThreadSafe">
            <summary>
            Identifica se a instancia está em modo de ThreadSafe.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSourceNode.Owner">
            <summary>
            Nó proprietário.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSourceNode.Left">
            <summary>
            Nó da esquerda.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSourceNode.Right">
            <summary>
            Nó da direita.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSourceNode.FirstChild">
            <summary>
            Primeiro filho
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSourceNode.Count">
            <summary>
            Quantidade de itens no nó.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSourceNode.Name">
            <summary>
            Nome do item associado com o nó.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSourceNode.Key">
            <summary>
            Chave do nó.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSourceNode.Value">
            <summary>
            Valor do nó.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSourceNode.IsExpanded">
            <summary>
            Identifica que o nó está ou não expandido.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSourceNode.IsSelected">
            <summary>
            Identifica que o nó está selecionado.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSourceNode.System#Collections#IList#IsFixedSize">
            <summary>
            Identifica se possui um tamanho fixado.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSourceNode.System#Collections#IList#IsReadOnly">
            <summary>
            Identifica se é uma coleçao somente leitura.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSourceNode.System#Collections#IList#Item(System.Int32)">
            <summary>
            Recupera o item na posição informada.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSourceNode.System#Collections#Generic#IList{Colosoft#Collections#ITreeViewSourceNode}#Item(System.Int32)">
            <summary>
            Recupera o item na posição informada.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSourceNode.System#Collections#Generic#ICollection{Colosoft#Collections#ITreeViewSourceNode}#IsReadOnly">
            <summary>
            Identifica se a coleção é somente leitura.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.TreeViewSourceNode.Enumerator">
            <summary>
            Implementação do enumerador do nó.
            </summary>
        </member>
        <member name="F:Colosoft.Collections.TreeViewSourceNode.Enumerator._isOwnerPropertyIndexed">
            <summary>
            Identifica que a propriedade que armazena o ponteiro para o pai é indexada.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.Enumerator.#ctor(Colosoft.Collections.TreeViewSourceNode)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.Enumerator.MoveNext">
            <summary>
            Move para o próximo nó.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.Enumerator.Reset">
            <summary>
            Reseta o enumerador.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.Enumerator.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSourceNode.Enumerator.Current">
            <summary>
            Instancia do atual nó.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.TreeViewSourceNode.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Instancia do atual nó.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.TreeViewSourceNode.ReentracyMonitor">
            <summary>
            Implementação usada para monitorar reentradas de chamada.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.ReentracyMonitor.#ctor(Colosoft.Collections.TreeViewSourceNode)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Colosoft.Collections.TreeViewSourceNode.ReentracyMonitor.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.VirtualListLoaderEventArgs">
            <summary>
            Argumentos usados no evento do loader
            </summary>
        </member>
        <member name="M:Colosoft.Collections.VirtualListLoaderEventArgs.#ctor(System.Int32,System.Int32,System.Boolean,System.Object)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="startRow">Linha inicial para recuperar os itens.</param>
            <param name="pageSize">Tamanho da página de itens que será carregada.</param>
            <param name="needItemsCount">Identifica que é necessárion fornecer a quantidade de itens da lista.</param>
            <param name="referenceObject">Instancia do objeto de referencia usado na lista.</param>
        </member>
        <member name="P:Colosoft.Collections.VirtualListLoaderEventArgs.ReferenceObject">
            <summary>
            Instancia do objeto de referencia usado na lista.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualListLoaderEventArgs.StartRow">
            <summary>
            Linha inicial para recuperar os itens.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualListLoaderEventArgs.PageSize">
            <summary>
            Tamanho da página de itens que será carregada.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualListLoaderEventArgs.NeedItemsCount">
            <summary>
            Identifica que é necessário fornecer a quantidade de itens da lista.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.VirtualListLoaderHandler`1">
            <summary>
            Delegate que representa os métodos utilizados para carregar os dados da lista virtual.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Collections.VirtualListLoader`1">
            <summary>
            Classe responsável pelo fornecimento de dados para a lista virtual.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.VirtualListLoader`1.Finalize">
            <summary>
            Destrutor.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.VirtualListLoader`1.Load(Colosoft.Collections.IObservableCollection,System.Int32,System.Int32,System.Boolean,System.Object)">
            <summary>
            Carrega os dados para a lista virtual.
            </summary>
            <param name="virtualList">Instancia da lista virtual associada.</param>
            <param name="startRow">Linha inicial para recuperar os itens.</param>
            <param name="pageSize">Tamanho da página de itens que será carregada.</param>
            <param name="needItemsCount">Identifica que é necessárion fornecer a quantidade de itens da lista.</param>
            <param name="referenceObject">Instancia do objeto de referencia usado na lista.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.VirtualListLoader`1.Create(Colosoft.Collections.VirtualListLoaderHandler{`0})">
            <summary>
            Cria uma instancia do loader com base no metodo informado.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.VirtualListLoader`1.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualListLoader`1.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="T:Colosoft.Collections.VirtualListLoader`1.Default">
            <summary>
            Implementação do loader padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.VirtualListLoader`1.Default.#ctor(Colosoft.Collections.VirtualListLoaderHandler{`0})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualListLoader`1.Default.Load(Colosoft.Collections.IObservableCollection,System.Int32,System.Int32,System.Boolean,System.Object)">
            <summary>
            Carrega os dados para a lista virtual.
            </summary>
            <param name="virtualList">Instancia da lista virtual associada.</param>
            <param name="startRow">Linha inicial para recuperar os itens.</param>
            <param name="pageSize">Tamanho da página de itens que será carregada.</param>
            <param name="needItemsCount">Identifica que é necessárion fornecer a quantidade de itens da lista.</param>
            <param name="referenceObject">Instancia do objeto de referencia usado na lista.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Collections.VirtualListLoader`1.Default.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Colosoft.Collections.VirtualListLoaderResult`1">
            <summary>
            Resultado da carga de dados.
            </summary>
        </member>
        <member name="M:Colosoft.Collections.VirtualListLoaderResult`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Cria um instancia do resultado informando o enumerable dos itens que serão carregados.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualListLoaderResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Cria uma instancia do resultado informandos o itens que serão carregados
            e o novo tamanho da coleção.
            </summary>
            <param name="items"></param>
            <param name="newCount"></param>
        </member>
        <member name="M:Colosoft.Collections.VirtualListLoaderResult`1.#ctor(System.Exception)">
            <summary>
            Construtor usado para informar que houve um erro na carga.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="P:Colosoft.Collections.VirtualListLoaderResult`1.Items">
            <summary>
            Relação dos itens do resultado.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualListLoaderResult`1.UpdateCount">
            <summary>
            Identifica se o Count foi atualizado.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualListLoaderResult`1.NewCount">
            <summary>
            Nova quantidade de elementos.
            </summary>
        </member>
        <member name="P:Colosoft.Collections.VirtualListLoaderResult`1.Error">
            <summary>
            Instancia do erro ocorrido na carga.
            </summary>
        </member>
        <member name="T:Colosoft.Configuration.Attributes.ConfigKeyPresence">
            <summary>
            Fornece informações sobre a chave no arquivo de configuração.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.Attributes.ConfigKeyPresence.Mandatory">
            <summary>
            Identifica que a presença da chave é obrigatória.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.Attributes.ConfigKeyPresence.Optional">
            <summary>
            Identifica que a presença da chave é opcional
            </summary>
        </member>
        <member name="T:Colosoft.Configuration.Attributes.ConfigurationAttribute">
            <summary>
            Atributo que identifica que o valor da propriedade ou método será recuperado do
            arquivo de configuração.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.Attributes.ConfigurationAttribute._xmlNodePath">
            <summary>
            Nome do nodo do arquivo XML que o atributo representa.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.Attributes.ConfigurationAttribute._keyPresenceRequirement">
            <summary>
            Armazena a informação sobre a presença do nodo no arquivo XML.
            Por padrão é obrigatório.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.Attributes.ConfigurationAttribute._requiredParameters">
            <summary>
            Número de parametros que o método requer.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.Attributes.ConfigurationAttribute.#ctor(System.String)">
            <summary>
            Construtor.
            </summary>
            <param name="xmlNodePath">Nome do nodo que o atributo representa.</param>
        </member>
        <member name="M:Colosoft.Configuration.Attributes.ConfigurationAttribute.#ctor(System.String,Colosoft.Configuration.Attributes.ConfigKeyPresence)">
            <summary>
            Construtor.
            </summary>
            <param name="xmlNodePath">Nome do nodo que o atributo representa.</param>
            <param name="keyPresenceRequirement">Informação sobre a presença do nodo no arquivo XML.</param>
        </member>
        <member name="M:Colosoft.Configuration.Attributes.ConfigurationAttribute.#ctor(System.String,Colosoft.Configuration.Attributes.ConfigKeyPresence,System.Int32)">
            <summary>
            Construtor.
            </summary>
            <param name="xmlNodePath">Nome do nodo que o atributo representa.</param>
            <param name="keyPresenceRequirement">Informação sobre a presença do nodo no arquivo XML.</param>
            <param name="requiredParameters">Número de parametros que o método requer.</param>
        </member>
        <member name="P:Colosoft.Configuration.Attributes.ConfigurationAttribute.XmlNodePath">
            <summary>
            Gets and Sets o nome do nodo do arquivo XML que o atributo representa.
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.Attributes.ConfigurationAttribute.KeyPresenceRequirement">
            <summary>
            Get and Sets a informação sobre a presença do nodo no arquivo XML.
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.Attributes.ConfigurationAttribute.RequiredParameters">
            <summary>
            Número de parametros que o método requer.
            </summary>
        </member>
        <member name="T:Colosoft.Configuration.Attributes.ElementContentAttribute">
            <summary>
            Identifica que o valor do parametro é o conteúdo do elemento.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.ConfigurationMap.instanceTargets">
            <summary>
            Lista do alvos a serem chamados para carrega os informações do
            arquivo de configuração.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.ConfigurationMap.instanceOverloads">
            <summary>
            Armazena os métodos configurados para serem chamado quando carrega
            as informações do arquivo de configuração. Ela contem a relação dos 
            nomes do método, que podem ser sobrecarregados.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.ConfigurationMap.#ctor(System.Type)">
            <summary>
            Constrói a novo instancia do ConfigurationMap para o tipo submetido. 
            Isso irá carrega as informações dos metados contidos no tipo para carregar
            o mapeamento do arquivo de configuração <see cref="T:Colosoft.Configuration.Attributes.ConfigurationAttribute"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.ConfigurationMap.Configure(System.Collections.IList,System.Object)">
            <summary>
            Configure all targets in the specified object using the given ElementTree 
            as source. If a Type is passed in obj, static members will be configured.
            If an object instance is passed in obj, instance members will be configured.
            </summary>
            <param name="handlers">The list of handlers providing the source values</param>
            <param name="obj">The object to be configured</param>
        </member>
        <member name="M:Colosoft.Configuration.ConfigurationMap.VerifyKeyPresence(Colosoft.Configuration.Targets.ElementTarget,System.Boolean)">
            <summary>
            Faz a verificação se chave do alvo foi encontrada no arquivo de configuração.
            </summary>
            <param name="target">Elemento alvo.</param>
            <param name="keyFound">Identificador se a a chave foi encontrada.</param>
        </member>
        <member name="T:Colosoft.Configuration.Configuration">
            <summary>
            Configuração do sistema.
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.Configuration.Instance">
            <summary>
            Instância da configuração do sistema.
            </summary>
        </member>
        <member name="T:Colosoft.Configuration.Configurator">
            <summary>
            Representa um configurador.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.Configurator.cfgLock">
            <summary>
            Lock usado para garantir acesso único.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.Configurator.refreshLock">
            <summary>
            Lock usado para garantir acesso único a parte de atualização das seções.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.Configurator.handlers">
            <summary>
            Lista do handlers de configuração.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.Configurator.namedHandlers">
            <summary>
            Os handlers registrados nessa lista, são para obter um handler pelo nome de armazenamento
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.Configurator.isLoggingEnabled">
            <summary>
            Identifica se o log de evento está abilitado.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.Configurator.CRLF">
            <summary>
            Constante de quebra de linha
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.Configurator.errorLog">
            <summary>
            String que armazena o log de erros.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.Configurator.exceptionLog">
            <summary>
            String que armazena as exceptions ocorridas
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.Configurator.#ctor">
            <summary>
            Construtor privado
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.Configurator.RefreshHandlers">
            <summary>
            Atualiza os Handlers modificados.
            </summary>
            <returns>True caso os dados tenham sido alterados</returns>
        </member>
        <member name="M:Colosoft.Configuration.Configurator.RefreshHandlers``1">
            <summary>
            Atualiza os Handlers do tipo informado modificados.
            </summary>
            <returns>True caso os dados tenham sido alterados</returns>
        </member>
        <member name="M:Colosoft.Configuration.Configurator.RefreshHandlers(System.Predicate{Colosoft.Configuration.Handlers.BaseSectionHandler})">
            <summary>
            Atualiza os Handlers do sistema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Configuration.Configurator.AddSectionHandler(System.String,System.String)">
            <summary>
            Esse método cria um handler de configuração para um sessão especifica
            do arquivo de configuração padrão do .NET.
            </summary>
            <param name="configStoreName">O nome em que o handler está associado. Se for null
            o handler será usado para as conigurações do GDA, senão quando o método configure for
            chamado com o nome especificado</param>
            <param name="sectionName">Nome da sessão GDASectionHandler está declarada no arquivo de
            configuração padrão do .NET.</param>
        </member>
        <member name="M:Colosoft.Configuration.Configurator.AddSectionHandler(System.String)">
            <summary>
            Esse método cria um handler de configuração para um sessão especifica
            do arquivo de configuração padrão do .NET.
            </summary>
            <param name="sectionName">Nome da sessão GDASectionHandler está declarada no arquivo de
            configuração padrão do .NET.</param>
        </member>
        <member name="M:Colosoft.Configuration.Configurator.AddExternalHandler(System.String,System.Xml.XmlNode)">
            <summary>
            This method creates a configuration handler for the given XML fragment,
            which (if valid) will be used as configuration source.
            </summary>
            <param name="configStoreName">The name with which to associate this handler. If null is given
            the handler will be used to configure GDA settings, otherwise it will only be used when
            Configure is called with a matching name.</param>
            <param name="root">The root node of the XML fragment to use as 
            configuration source.</param>
        </member>
        <member name="M:Colosoft.Configuration.Configurator.AddExternalHandler(System.Xml.XmlNode)">
            <summary>
            This method creates a configuration handler for the given XML fragment,
            which (if valid) will be used as configuration source.
            </summary>
            <param name="root">The root node of the XML fragment to use as 
            configuration source.</param>
        </member>
        <member name="M:Colosoft.Configuration.Configurator.AddStreamHandler(System.String,System.IO.Stream)">
            <summary>
            This method creates a configuration handler for the specified stream.
            </summary>
            <param name="configStoreName">The name with which to associate this handler. If null is given
            the handler will be used to configure GDA settings, otherwise it will only be used when
            Configure is called with a matching name.</param>
            <param name="stream">The stream from which to read the configuration XML document/snippet.</param>
        </member>
        <member name="M:Colosoft.Configuration.Configurator.AddStreamHandler(System.IO.Stream)">
            <summary>
            This method creates a configuration handler for the specified stream.
            </summary>
            <param name="stream">The stream from which to read the configuration XML document/snippet.</param>
        </member>
        <member name="M:Colosoft.Configuration.Configurator.Configure(System.String,System.Object)">
            <summary>
            Configure all targets in the specified instance.
            </summary>
            <param name="configStoreName">The name of the handler to use as configuration source.
            If null is given, GDA's configuration store will be used (effectively this means
            one of the automatically registered handlers).</param>
            <param name="instance">The object to be configured</param>
        </member>
        <member name="M:Colosoft.Configuration.Configurator.Configure(System.Object)">
            <summary>
            Configure all targets in the specified instance.
            </summary>
            <param name="instance">The object to be configured</param>
        </member>
        <member name="M:Colosoft.Configuration.Configurator.Configure(System.String,System.Type)">
            <summary>
            Configure all targets in the specified type (static members).
            </summary>
            <param name="configStoreName">The name of the handler to use as configuration source.
            If null is given, GDA's configuration store will be used (effectively this means
            one of the automatically registered handlers).</param>
            <param name="type">The type to be configured</param>
        </member>
        <member name="M:Colosoft.Configuration.Configurator.Configure(System.Type)">
            <summary>
            Configure all targets in the specified type (static members).
            </summary>
            <param name="type">The type to be configured</param>
        </member>
        <member name="M:Colosoft.Configuration.Configurator.InitializeHandlers">
            <summary>
            This method creates the default configuration handlers provided 
            by itself.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.Configurator.AddFileHandler(System.String,System.String)">
            <summary>
            Esse método cria um handler de configuração com base em arquivo com o nome especificado.
            O nome do arquivo não deve conter o caminho completo, apenas o nome (o GDA usa diretorios pré-
            definido para localizar o arquivo.
            </summary>
            <param name="configStoreName">O nome em que o handler está associado. Se for null
            o handler será usado para as conigurações do GDA, senão quando o método configure for
            chamado com o nome especificado</param>
            <param name="fileName">Nome do arquivo de configuração.</param>
        </member>
        <member name="M:Colosoft.Configuration.Configurator.AddFileHandler(System.String)">
            <summary>
            This method creates a configuration handler for the specified file name. The
            file name must not include path information (GDA will search for it in specific
            predefined locations).
            </summary>
            <param name="fileName">The name of the configuration file.</param>
        </member>
        <member name="P:Colosoft.Configuration.Configurator.IsLoggingEnabled">
            <summary>
            Accessor to turn logging on or off. This property is updated when the configuration 
            is being accessed.
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.Configurator.HandlerCount">
            <summary>
            Returns the number of valid registered configuration handlers. Only the first handler
            is used used to obtain configuration options, but if HandlerCount is 0 then GDA
            has not been able to find any valid configuration source.
            </summary>
        </member>
        <member name="T:Colosoft.Configuration.Exceptions.ConfigException">
            <summary>
            Representa um erro de configuracao.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.Exceptions.ConfigException.#ctor(System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Colosoft.Configuration.Exceptions.ConfigException.#ctor(System.Exception)">
            <summary>
            Cria uma instancia com base na exception interna.
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Colosoft.Configuration.Exceptions.ConfigException.#ctor(System.String,System.Exception)">
            <summary>
            Cria uma instancia do erro.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Colosoft.Configuration.Exceptions.ConfigException.#ctor(System.String,System.Object[])">
            <summary>
            Cria uma instancia do erro com mensagem de formatacao.
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Colosoft.Configuration.Exceptions.ConfigException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor usado na serializacao.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Colosoft.Configuration.Exceptions.LoadConfigurationException">
            <summary>
            Armazena as informações do erro ocorrido ao carregar as configurações do GDA.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.Exceptions.LoadConfigurationException.#ctor(System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Colosoft.Configuration.Exceptions.LoadConfigurationException.#ctor(System.Exception)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Colosoft.Configuration.Exceptions.LoadConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Cria uma instancia com os dados iniciais.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Colosoft.Configuration.Exceptions.LoadConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor usado na serializacao.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Colosoft.Configuration.Exceptions.MissingConfigurationKeyException">
            <summary>
            Trata o erro ocorrido quando a chave do arquivo de configuração é necessário
            e não é encontrado.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.Exceptions.MissingConfigurationKeyException.#ctor(System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Colosoft.Configuration.Handlers.BaseSectionHandler">
            <summary>
            Manipulador de uma seção base.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.Handlers.BaseSectionHandler.root">
            <summary>
            Nó principal que contem as informações do GDA
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.Handlers.BaseSectionHandler.#ctor(System.Xml.XmlNode)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Colosoft.Configuration.Handlers.BaseSectionHandler.Refresh">
            <summary>
            Atualiza os dados da seção.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.Handlers.BaseSectionHandler.GetNode(System.String)">
            <summary>
            Obtem um nó da árvore.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.Handlers.BaseSectionHandler.GetNodes(System.String)">
            <summary>
            Obtem o nós que estão contidos no nó da árvore.
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.Handlers.BaseSectionHandler.IsValid">
            <summary>
            Determina se a sessão carregada do arquivo xml é válida
            </summary>
            <returns>True se estiver usando o arquivo de configuração.</returns>
        </member>
        <member name="P:Colosoft.Configuration.Handlers.BaseSectionHandler.XmlRoot">
            <summary>
            Obtem o nó principal do XML de configuração.
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.Handlers.BaseSectionHandler.IsChanged">
            <summary>
            Verifica se os dados da seção foram alterados.
            </summary>
        </member>
        <member name="T:Colosoft.Configuration.Handlers.FileConfigHandler">
            <summary>
            Manipulador da configuração de um arquivo.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.Handlers.FileConfigHandler.APPSETTINGS_FILE">
            <summary>
            The key used to lookup a custom config file location in the standard .NET configuration file.
            If this key is present the specified filename will be used before searching elsewhere.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.Handlers.FileConfigHandler.APPSETTINGS_FOLDER">
            <summary>
            Chaves usadas para fazer um link para o arquivo de configuração customizado contido na mesma
            localização aonde os arquivos de configuração padrão do .NET estão localizados.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.Handlers.FileConfigHandler.CONFIG_FOLDERS">
            <summary>
            List of folders that instance will search (in addition to any custom folder specified in the
            regular .NET configuration file (usually App.config or Web.config). Folders are searched in
            order of appearance. All paths are expanded relative to the location of the GDA assembly.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.Handlers.FileConfigHandler.localConfigFilePath">
            <summary>
            The full local path and file name of the configuration file. This variable is initialized
            once the full location and filename has been determined. Thus, it contains the local file 
            path (and name) of the file this handler is using.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.Handlers.FileConfigHandler.#ctor">
            <summary>
            Constructor to use when GDA should search for a file called GDA.config
            in a number of predefined locations.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.Handlers.FileConfigHandler.#ctor(System.String)">
            <summary>
            Construtor usado para especificar a caminho e no do arquivo manualmente.
            </summary>
            <param name="file">Caminho completo ou nome do arquivo de configuração.</param>
            <exception cref="T:System.Exception">No configuration file could be located.</exception>
        </member>
        <member name="M:Colosoft.Configuration.Handlers.FileConfigHandler.Refresh">
            <summary>
            Atualiza os dados do manipulador.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.Handlers.FileConfigHandler.GetLocalPath(System.String)">
            <summary>
            Captura o caminho do arquivo de configuração.
            </summary>
            <param name="path">Informação do arquivo do configuração.</param>
            <returns>Caminho do arquivo de configuração.</returns>
        </member>
        <member name="M:Colosoft.Configuration.Handlers.FileConfigHandler.GetTextReader(System.String)">
            <summary>
            Abre o arquivo referenciado.
            </summary>
            <param name="localFilePath">Caminho do arquivo.</param>
            <returns>Stream do arquivo</returns>
        </member>
        <member name="M:Colosoft.Configuration.Handlers.FileConfigHandler.LoadXml(System.IO.TextReader)">
            <summary>
            Carrega os dados do arquivo configuração.
            </summary>
            <param name="reader">Stream do arquivo.</param>
            <returns>Xml.</returns>
        </member>
        <member name="M:Colosoft.Configuration.Handlers.FileConfigHandler.GetConfigFileInfoFromApplicationConfig">
            <summary>
            Captura o arquivo de configuração dentro do arquivo de configuração da aplicação.
            </summary>
            <returns>Caminho do arquivo</returns>
        </member>
        <member name="M:Colosoft.Configuration.Handlers.FileConfigHandler.GetExecutingAssemblyLocation">
            <summary>
            Captura o caminho onde o assembly está sendo executado.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Configuration.Handlers.FileConfigHandler.IsChanged">
            <summary>
            Verifica se o arquivo foi alterado.
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.Handlers.FileConfigHandler.LocalConfigFilePath">
            <summary>
            Caminho do arquivo de configuração local.
            </summary>
        </member>
        <member name="T:Colosoft.Configuration.IRegistry2">
            <summary>
            Assinatura da interface de um registro.
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.IRegistry2.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.IRegistry2.Registries">
            <summary>
            Registros
            </summary>
        </member>
        <member name="T:Colosoft.Configuration.IRegistryEntry">
            <summary>
            Assinatura de uma entrada de um registro de configuração
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.IRegistryEntry.Name">
            <summary>
            Nome
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.IRegistryEntry.FullName">
            <summary>
            Caminho completo.
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.IRegistryEntry.Value">
            <summary>
            Valor
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.IRegistryEntry.Path">
            <summary>
            Caminho
            </summary>
        </member>
        <member name="T:Colosoft.Configuration.IRegistryEntry2">
            <summary>
            Assinatura de uma entrada de um registro de configuração
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.IRegistryEntry2.FullName">
            <summary>
            Caminho completo.
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.IRegistryEntry2.Value">
            <summary>
            Valor
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.IRegistryEntry2.Path">
            <summary>
            Caminho
            </summary>
        </member>
        <member name="T:Colosoft.Configuration.IRegistryLoader">
            <summary>
            Assinatura da interface, que carrega as configurações
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.IRegistryLoader.GetRoot">
            <summary>
            Recupera os nodos raiz da configuração
            </summary>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Configuration.IRegistryLoader2">
            <summary>
            Assinatura da interface, que carrega as configurações
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.IRegistryLoader2.GetRoot">
            <summary>
            Recupera os nodos raiz da configuração
            </summary>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Configuration.ISettingsRepository">
            <summary>
            Representa um repositório que armazena os dados de configuração.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.ISettingsRepository.Get``1(Colosoft.Configuration.SettingsScope,System.Uri)">
            <summary>
            Recupera uma instancia de configuração contida no caminho informado.
            </summary>
            <param name="scope"></param>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Configuration.ISettingsRepository.Set(Colosoft.Configuration.SettingsScope,System.Uri,System.Object)">
            <summary>
            Define o valor de uma variável textual da configuração.
            </summary>
            <param name="scope"></param>
            <param name="location"></param>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Configuration.ISettingsRepository.GetStream(Colosoft.Configuration.SettingsScope,System.Uri)">
            <summary>
            Recupera uma stream contida no caminho informado.
            </summary>
            <param name="scope"></param>
            <param name="location">Localização da stream na configuração.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Configuration.ISettingsRepository.SaveStream(Colosoft.Configuration.SettingsScope,System.Uri,System.IO.Stream)">
            <summary>
            Salva a stream na configuração.
            </summary>
            <param name="scope"></param>
            <param name="location"></param>
            <param name="stream"></param>
        </member>
        <member name="P:Colosoft.Configuration.ISettingsRepository.Name">
            <summary>
            Nome do respositório.
            </summary>
        </member>
        <member name="T:Colosoft.Configuration.ISystemConfiguration">
            <summary>
            Contrato para busca da configuração.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.ISystemConfiguration.ReadPath(System.String)">
            <summary>
            Lê a configuração do caminho informado.
            </summary>
            <param name="path">caminho</param>
            <returns></returns>
        </member>
        <member name="F:Colosoft.Configuration.MemberAttributeInfo.MemberInfo">
            <summary>
            Membro relacionado (method, field, property, etc.).
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.MemberAttributeInfo.Attributes">
            <summary>
            Lista dos atributos relacionados.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.MemberAttributeInfo.#ctor(System.Reflection.MemberInfo,System.Collections.IList)">
            <summary>
            Cria um nova instancia fazendo o link entre o MemberInfo e os atributos relacionados
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.MemberAttributeInfo.Item(System.Int32)">
            <summary>
            Obtem o atributo relacionados com o MemberInfo.
            </summary>
        </member>
        <member name="T:Colosoft.Configuration.Registry">
            <summary>
            Classe que armazena os dados dos registros de configuração.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.Registry.GetValue(System.String)">
            <summary>
            Recupera o valor de um item, passando o caminho.
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Configuration.Registry.PopulateRoot">
            <summary>
            Popula a lista
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.Registry.#ctor(Colosoft.Configuration.IRegistryLoader)">
            <summary>
            Construtor Padrão
            </summary>
            <param name="registryLoader"></param>
        </member>
        <member name="P:Colosoft.Configuration.Registry.Root">
            <summary>
            Lista dos nodos raiz.
            </summary>
        </member>
        <member name="T:Colosoft.Configuration.Registry2">
            <summary>
            Classe que armazena os dados dos registros de configuração.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.Registry2.GetValue(System.String)">
            <summary>
            Recupera o valor de um item, passando o caminho.
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Configuration.Registry2.PopulateRoot">
            <summary>
            Popula a lista
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.Registry2.#ctor(Colosoft.Configuration.IRegistryLoader2)">
            <summary>
            Construtor Padrão
            </summary>
            <param name="registryLoader"></param>
        </member>
        <member name="P:Colosoft.Configuration.Registry2.Root">
            <summary>
            Lista dos nodos raiz.
            </summary>
        </member>
        <member name="T:Colosoft.Configuration.RegistryFolder">
            <summary>
            Classe que armazena os dados dos registros da configuração
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.RegistryFolder.Name">
            <summary>
            Nome do registro
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.RegistryFolder.Entries">
            <summary>
            Entradas
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.RegistryFolder.Children">
            <summary>
            Filhos
            </summary>
        </member>
        <member name="T:Colosoft.Configuration.RegistryFolder2">
            <summary>
            Classe que armazena os dados dos registros da configuração
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.RegistryFolder2.Name">
            <summary>
            Nome do registro
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.RegistryFolder2.Entries">
            <summary>
            Entradas
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.RegistryFolder2.Children">
            <summary>
            Filhos
            </summary>
        </member>
        <member name="P:Colosoft.Configuration.RegistryFolder2.Registries">
            <summary>
            Registros.
            </summary>
        </member>
        <member name="T:Colosoft.Configuration.SettingsManager">
            <summary>
            Classe reposável por gerenciar as configuração do sistema.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.SettingsManager._repositories">
            <summary>
            Dicionário onde os repositórios são armazenados.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.SettingsManager.AddRepository(Colosoft.Configuration.ISettingsRepository)">
            <summary>
            Adiciona um repositório no gerenciador.
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:Colosoft.Configuration.SettingsManager.GetRepository(System.String)">
            <summary>
            Recupera o repositório pelo nome.
            </summary>
            <param name="name">Nome do repositório.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Configuration.SettingsManager.Get``1(Colosoft.Configuration.SettingsScope,System.Uri)">
            <summary>
            Recupera uma instancia de configuração contida no caminho informado.
            </summary>
            <param name="scope"></param>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Configuration.SettingsManager.Set(Colosoft.Configuration.SettingsScope,System.Uri,System.Object)">
            <summary>
            Define o valor de uma variável textual da configuração.
            </summary>
            <param name="scope"></param>
            <param name="location"></param>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Configuration.SettingsManager.GetStream(Colosoft.Configuration.SettingsScope,System.Uri)">
            <summary>
            Recupera uma stream contida no caminho informado.
            </summary>
            <param name="scope"></param>
            <param name="location">Localização da stream na configuração.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Configuration.SettingsManager.SaveStream(Colosoft.Configuration.SettingsScope,System.Uri,System.IO.Stream)">
            <summary>
            Salva a stream na configuração.
            </summary>
            <param name="scope"></param>
            <param name="location"></param>
            <param name="stream"></param>
        </member>
        <member name="T:Colosoft.Configuration.SettingsScope">
            <summary>
            Possíveis escopos de configuração.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.SettingsScope.User">
            <summary>
            Configurações do usuário.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.SettingsScope.Application">
            <summary>
            Configurações da aplicação.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.SettingsScope.System">
            <summary>
            Configuração do sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.Targets.ElementTarget.#ctor(Colosoft.Configuration.Attributes.ConfigurationAttribute)">
            <summary>
            Construtor.
            </summary>
            <param name="ca">Atributo de configuração para preecher o objeto.</param>
        </member>
        <member name="M:Colosoft.Configuration.Targets.ElementTarget.Configure(System.Object,System.Xml.XmlNode)">
            <summary>
            Configura os dados lidos do nodo xml no objeto.
            </summary>
            <param name="target">Objeto.</param>
            <param name="node">Nodo xml contendo os dados.</param>
        </member>
        <member name="T:Colosoft.Configuration.Targets.FieldTarget">
            <summary>
            Identifica o campo alvo do atributo do arquivo de configuração.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.Targets.FieldTarget.RepresentFieldInfo">
            <summary>
            Propriedade relacionado ao alvo.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.Targets.FieldTarget.#ctor(Colosoft.Configuration.Attributes.ConfigurationAttribute,System.Reflection.FieldInfo)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="ca"></param>
            <param name="fi"></param>
        </member>
        <member name="M:Colosoft.Configuration.Targets.FieldTarget.Configure(System.Object,System.Xml.XmlNode)">
            <summary>
            Configura o valor ao campo.
            </summary>
            <param name="target">Objeto que contem o campo.</param>
            <param name="node">Nó do arquivo XML contendo as informações.</param>
        </member>
        <member name="F:Colosoft.Configuration.Targets.MethodTarget._lock">
            <summary>
            Um simples objeto para ser usado garantindo acesso único a dispacher.
            </summary>
        </member>
        <member name="F:Colosoft.Configuration.Targets.MethodTarget.dispatcher">
            <summary>
            Dispacher que irá conter os método a serem chamados.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.Targets.MethodTarget.#ctor(Colosoft.Configuration.Attributes.ConfigurationAttribute,System.Reflection.MethodInfo)">
            <summary>
            Construtor.
            </summary>
            <param name="ca"></param>
            <param name="methodInfo"></param>
        </member>
        <member name="M:Colosoft.Configuration.Targets.MethodTarget.Configure(System.Object,System.Xml.XmlNode)">
            <summary>
            Use the supplied XmlNode to configure the target object. This configuration target 
            performs a method callback on the target object, and uses the attributes of the XmlNode
            as parameters. The method parameter names must match the names of the node attributes 
            (a leading underscore will be stripped to permit using C# reserved words in the XML file). 
            This method does not check whether the node matches the requested environment.
            </summary>
            <param name="target">The object to cofigure.</param>
            <param name="node">The node containing the configuration value(s).</param>
        </member>
        <member name="F:Colosoft.Configuration.Targets.PropertyTarget.RepresentPropertyInfo">
            <summary>
            Representa a propriedade alvo.
            </summary>
        </member>
        <member name="M:Colosoft.Configuration.Targets.PropertyTarget.#ctor(Colosoft.Configuration.Attributes.ConfigurationAttribute,System.Reflection.PropertyInfo)">
            <summary>
            Construtor
            </summary>
            <param name="ca">Metadado relacionado com a propriedade.</param>
            <param name="pi">Propriedade</param>
        </member>
        <member name="T:Colosoft.CoreExtensions">
            <summary>
            Extensões basicas do sistema.
            </summary>
        </member>
        <member name="M:Colosoft.CoreExtensions.GetAdjustFactor(System.String)">
            <summary>
            Recupera o fator de ajuste de data de acordo com especificador de frações de segundos da máscara.
            </summary>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.MaskValue(System.String)">
            <summary>
            Mascara uma string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.CompareMask(System.String,System.String,System.Int32)">
            <summary>
            Compara uma string e suas máscaras.
            </summary>
            <param name="str1"></param>
            <param name="str2"></param>
            <param name="ret"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.Join(Colosoft.IMessageFormattable,System.String,Colosoft.IMessageFormattable[])">
            <summary>
            Realiza a junção das mensagens informadas.
            </summary>
            <param name="left"></param>
            <param name="separator"></param>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.IsFlags(System.Type)">
            <summary>
            Indica que um tipo pode ser tratada como um campo de bit; ou seja, um conjunto de sinalizadores.
            </summary>
            <param name="type">Tipo a ser analisado.</param>
            <returns>Retorna verdadeiro se o tipo é um conjunto de sinalizadores.</returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Cria uma ConditionalExpression que representa um bloco condicional com uma instrução 'if'.
            </summary>
            <param name="test">Uma expressão para definir a propriedade 'Test'.</param>
            <param name="ifTrue">Uma expressão para definir a propriedade 'ifTrue'.</param>
            <returns>A ConditionalExpression.</returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.GetMember(System.Linq.Expressions.Expression{System.Func{System.String}})">
            <summary>
            Recupera as informações do membro associado com a expressão informada.
            </summary>
            <param name="expression"></param>
            <returns>Informações do membro contido na expressão informada.</returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.GetMember``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Recupera as informações do membro associado com a expressão informada.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <returns>Informações do membro contido na expressão informada.</returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.GetMember``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Recupera as informações do membro associado com a expressão informada.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="Result"></typeparam>
            <param name="expression"></param>
            <returns>Informações do membro contido na expressão informada.</returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.GetFormatter(System.String,System.Object[])">
            <summary>
            Recupera o formatador de texto para a string informada.
            </summary>
            <param name="text"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.GetFormatter(System.Exception)">
            <summary>
            Recupera o formatador de texto para a exception informada.
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.Join(System.Collections.Generic.IEnumerable{Colosoft.IMessageFormattable},System.String)">
            <summary>
            Junta as mensagem informadas.
            </summary>
            <param name="messages"></param>
            <param name="separator">Separador.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.FormatOrNull(Colosoft.IMessageFormattable)">
            <summary>
            Formata o valor da mensagem, caso ela seja nula retorna o valor null.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.RemoveDiacritics(System.String)">
            <summary>
            Remove os caracteres especiais de uma string.
            </summary>
            <param name="inputString">String de entrada</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.ClearMask(System.String)">
            <summary>
            Limpeza de máscara simples.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.ValidateCPF(System.String)">
            <summary>
            Valida um CPF(Brasil)
            </summary>
            <param name="inputString">palavra contendo o CPF</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.ValidateCNPJ(System.String)">
            <summary>
            Valida um CNPJ(Brasil)
            </summary>
            <param name="inputString">palavra contendo o CPF</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.ValidateAlg(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Valida um valor por dígitos verificadores
            </summary>
            <param name="inputString">palavra a ser validada</param>
            <param name="size">POsição do dígito a ser verificado</param>
            <param name="start">...</param>
            <param name="limit">...</param>
            <param name="baseValue">...</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.TrimAndNormalize(System.String)">
            <summary>
            Tratamento de strings para entrada no sistema. Limpa espaços e normaliza a înstância Unicode.
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.IsNullOrEmpty(Colosoft.IMessageFormattable)">
            <summary>
            Verifica se o valor da mensagem é nulo ou vazio.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.AdjustValue(System.Double,System.Double)">
            <summary>
            Ajusta o valor de um ponto flutuante de acordo com a precisão recebida
            </summary>
            <param name="Value">Valor a ser ajustado</param>
            <param name="Precision">Precisão</param>
            <returns>Valor ajustado</returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.Truncate(System.Decimal,System.Int32)">
            <summary>
            Trunca o numero informado na quantidade de digitos informada.
            </summary>
            <param name="number"></param>
            <param name="digits"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.GetAssemblyName(System.Type)">
            <summary>
            Retorna o nome do assembly.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.FilterByMask(System.DateTimeOffset,System.String)">
            <summary>
            Elimina os componentes da data que não são armazenados de acordo com a máscara especificada.
            </summary>
            <param name="value"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.FilterByMask(System.DateTime,System.String)">
            <summary>
            Elimina os componentes da data que não são armazenados de acordo com a máscara especificada.
            </summary>
            <param name="value"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.IfNotNull``2(``0,System.Func{``0,``1},``1)">
            <summary>
            Processa o valor se for não nulo, retornando um valor default em caso contrário.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TR"></typeparam>
            <param name="value"></param>
            <param name="call"></param>
            <param name="stdVal"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.IfHasValue``2(System.Nullable{``0},System.Func{``0,``1},``1)">
            <summary>
            Processa o valor se estiver definido, retornando um valor default em caso contrário.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TR"></typeparam>
            <param name="value"></param>
            <param name="call"></param>
            <param name="stdVal"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.IsIn(System.String,System.String[])">
            <summary>
            Determina se a lista de strings parâmetro contem a string base.
            </summary>
            <param name="instance"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.GetIndividualFlags(System.Enum)">
            <summary>
            Enumerates through the individual set bits in a flag enum.
            </summary>
            <param name="flags">The flags enum value.</param>
            <returns>An enumeration of just the <i>set</i> bits in the flags enum.</returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.GetWeekDay(System.DateTime)">
            <summary>
            Recupera o flag do dia da semana com base na data informada.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Aplica o distinc nos itens usando o comparador que é uma expressão Lambda.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CoreExtensions.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``1,System.Boolean})">
            <summary>
            Agrupa a coleção de itens informados.
            </summary>
            <typeparam name="TSource">Tipo do item da coleção.</typeparam>
            <typeparam name="TKey">Tipo da chave de agrupamento.</typeparam>
            <param name="source">Origem dos itens.</param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Cryptography.Decryptor">
            <summary>
            Classe responsável pela descriptografia.
            </summary>
            <example>
            try 
            { 
                Decryptor dec = new Decryptor(algorithm); 
                dec.IV = IV; 
                byte[] plainText = dec.Decrypt(cipherText, key); 
                Console.WriteLine(" Plain text: " + Encoding.ASCII.GetString(plainText)); 
            } 
            catch(Exception ex) 
            { 
                Console.WriteLine("Exception decrypting. " + ex.Message); 
                return; 
            } 
            </example>
        </member>
        <member name="M:Colosoft.Cryptography.Decryptor.#ctor(Colosoft.Cryptography.EncryptionAlgorithm)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="algorithm">Algoritmo de criptografia que sera utilizado</param>
        </member>
        <member name="M:Colosoft.Cryptography.Decryptor.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            Descriptografa os dados no vetor informado usando a chave fornecida.
            </summary>
            <param name="bytesData">Vetor dos dados que serão processados.</param>
            <param name="bytesKey">Chave que será usada.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Cryptography.Decryptor.Decrypt(System.IO.Stream,System.IO.Stream,System.Byte[])">
            <summary>
            Descriptografa os dados da stream de entrada e escreve na stream de saída.
            </summary>
            <param name="inStream">Stream de entrada.</param>
            <param name="outStream">Stream de saída.</param>
            <param name="bytesKey"></param>
        </member>
        <member name="P:Colosoft.Cryptography.Decryptor.IV">
            <summary>
            Vetor inicia.
            </summary>
        </member>
        <member name="T:Colosoft.Cryptography.DecryptTransformer">
            <summary>
            Transformador da descriptografia.
            </summary>
        </member>
        <member name="M:Colosoft.Cryptography.DecryptTransformer.#ctor(Colosoft.Cryptography.EncryptionAlgorithm)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="algorithm"></param>
        </member>
        <member name="M:Colosoft.Cryptography.DecryptTransformer.GetCryptoServiceProvider(System.Byte[])">
            <summary>
            Recupera o provedor do serviço de criptografia.
            </summary>
            <param name="bytesKey"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Cryptography.DecryptTransformer.IV">
            <summary>
            Vetor inicial.
            </summary>
        </member>
        <member name="T:Colosoft.Cryptography.EncryptionAlgorithm">
            <summary>
            Algoritmos de criptografia.
            </summary>
        </member>
        <member name="F:Colosoft.Cryptography.EncryptionAlgorithm.Des">
            <summary>
            DES
            </summary>
        </member>
        <member name="F:Colosoft.Cryptography.EncryptionAlgorithm.Rc2">
            <summary>
            RC2
            </summary>
        </member>
        <member name="F:Colosoft.Cryptography.EncryptionAlgorithm.Rijndael">
            <summary>
            Rijndael
            </summary>
        </member>
        <member name="F:Colosoft.Cryptography.EncryptionAlgorithm.TripleDes">
            <summary>
            TripleDes
            </summary>
        </member>
        <member name="T:Colosoft.Cryptography.EncryptionUtil">
            <summary>
            Utilitário para critografia.
            </summary>
        </member>
        <member name="M:Colosoft.Cryptography.EncryptionUtil.ConvertStringToByteArray(System.String)">
            <summary>
            Converte o texto para um vetor de bytes.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Cryptography.EncryptionUtil.Decrypt(System.Byte[])">
            <summary>
            Descriptogra o buffer informado para um texto.
            </summary>
            <param name="cypherText"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Cryptography.EncryptionUtil.Encrypt(System.String)">
            <summary>
            Criptogra o texto informado em um vetor de bytes.
            </summary>
            <param name="plainText"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Cryptography.Encryptor">
            <summary>
            Classe usada para criptografar dados.
            </summary>
        </member>
        <member name="M:Colosoft.Cryptography.Encryptor.#ctor(Colosoft.Cryptography.EncryptionAlgorithm)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="algorithm"></param>
        </member>
        <member name="M:Colosoft.Cryptography.Encryptor.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            Criptografa os dados 
            </summary>
            <param name="bytesData"></param>
            <param name="bytesKey"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Cryptography.Encryptor.Encrypt(System.IO.Stream,System.IO.Stream,System.Security.Cryptography.ICryptoTransform)">
            <summary>
            Criptografa os dados 
            </summary>
            <param name="inStream">Stream com os dados que serão criptografados.</param>
            <param name="outStream">Stream onde serão salvos os dados criptografados.</param>
            <param name="transform">Provedor usado para criptografar os dados</param>
        </member>
        <member name="M:Colosoft.Cryptography.Encryptor.Encrypt(System.IO.Stream,System.IO.Stream,System.Byte[])">
            <summary>
            Criptografa os dados 
            </summary>
            <param name="inStream">Stream com os dados que serão criptografados.</param>
            <param name="outStream">Stream onde serão salvos os dados criptografados.</param>
            <param name="bytesKey">chave.</param>
        </member>
        <member name="M:Colosoft.Cryptography.Encryptor.GetCryptoProvider(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm@)">
            <summary>
            Recupera o provedor para a criptografia.
            </summary>
            <param name="bytesKey"></param>
            <param name="algoritm"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Cryptography.Encryptor.IV">
            <summary>
            Vetor inicial.
            </summary>
        </member>
        <member name="P:Colosoft.Cryptography.Encryptor.Key">
            <summary>
            Chave privada usada na criptografia.
            </summary>
        </member>
        <member name="T:Colosoft.Cryptography.EncryptTransformer">
            <summary>
            Transformador para criptografia.
            </summary>
        </member>
        <member name="M:Colosoft.Cryptography.EncryptTransformer.#ctor(Colosoft.Cryptography.EncryptionAlgorithm)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="algorithm"></param>
        </member>
        <member name="M:Colosoft.Cryptography.EncryptTransformer.GetCryptoServiceProvider(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm@)">
            <summary>
            Recupera o provedor do serviço de criptografia.
            </summary>
            <param name="bytesKey">Vetor com a chave que será usada pelo algoritmo.</param>
            <param name="algorithm">Algoritmo simetrico.</param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Cryptography.EncryptTransformer.IV">
            <summary>
            Vetor inicial.
            </summary>
        </member>
        <member name="P:Colosoft.Cryptography.EncryptTransformer.Key">
            <summary>
            Chave privada usada na criptografia.
            </summary>
        </member>
        <member name="T:Colosoft.Cryptography.RSACryptografyKey">
            <summary>
            Armazena os dados da chave de criptografia.
            </summary>
        </member>
        <member name="P:Colosoft.Cryptography.RSACryptografyKey.BitStrength">
            <summary>
            BitStrength
            </summary>
        </member>
        <member name="P:Colosoft.Cryptography.RSACryptografyKey.RSAKeyValue">
            <summary>
            Valor da chave.
            </summary>
        </member>
        <member name="T:Colosoft.Cryptography.RSACryptografyKey.RSAKey">
            <summary>
            Classe que armazena os dados da chave.
            </summary>
        </member>
        <member name="P:Colosoft.Cryptography.RSACryptografyKey.RSAKey.Modulus">
            <summary>
            Modulus.
            </summary>
        </member>
        <member name="P:Colosoft.Cryptography.RSACryptografyKey.RSAKey.Exponent">
            <summary>
            Exponent
            </summary>
        </member>
        <member name="P:Colosoft.Cryptography.RSACryptografyKey.RSAKey.P">
            <summary>
            P
            </summary>
        </member>
        <member name="P:Colosoft.Cryptography.RSACryptografyKey.RSAKey.Q">
            <summary>
            Q
            </summary>
        </member>
        <member name="P:Colosoft.Cryptography.RSACryptografyKey.RSAKey.DP">
            <summary>
            DP
            </summary>
        </member>
        <member name="P:Colosoft.Cryptography.RSACryptografyKey.RSAKey.DQ">
            <summary>
            DQ
            </summary>
        </member>
        <member name="P:Colosoft.Cryptography.RSACryptografyKey.RSAKey.InverseQ">
            <summary>
            InverseQ
            </summary>
        </member>
        <member name="P:Colosoft.Cryptography.RSACryptografyKey.RSAKey.D">
            <summary>
            D
            </summary>
        </member>
        <member name="T:Colosoft.Cryptography.RSACryptoHelper">
            <summary>
            Classe com método que auxiliam na utilização da criptografia RSA.
            </summary>
        </member>
        <member name="M:Colosoft.Cryptography.RSACryptoHelper.EncryptString(System.String,Colosoft.Cryptography.RSACryptografyKey)">
            <summary>
            Criptografa o texto informado.
            </summary>
            <param name="inputString">Texto que será criptografado.</param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Cryptography.RSACryptoHelper.EncryptString(System.String,System.Int32,System.String)">
            <summary>
            Criptografa o texto informado.
            </summary>
            <param name="inputString">Texto que será criptografado.</param>
            <param name="dwKeySize">Tamanho da chave.</param>
            <param name="xmlString">Xml contendo e chave privada para a criptografia.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Cryptography.RSACryptoHelper.DecryptString(System.String,Colosoft.Cryptography.RSACryptografyKey)">
            <summary>
            Descriptografa o texto informado.
            </summary>
            <param name="inputString">Texto contem os dados criptografados.</param>
            <param name="key">Chavem que será usada.</param>
        </member>
        <member name="M:Colosoft.Cryptography.RSACryptoHelper.DecryptString(System.String,System.Int32,System.String)">
            <summary>
            Descriptografa o texto informado.
            </summary>
            <param name="inputString">Texto contem os dados criptografados.</param>
            <param name="dwKeySize">Tamanho da chave.</param>
            <param name="xmlString">Xml contendo a chave pública.</param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.DataStructures.BinaryPriorityQueue">
            <summary>
            Implementação da fila de prioridade binária.
            </summary>
        </member>
        <member name="T:Colosoft.DataStructures.IPriorityQueue">
            <summary>
            Assinatura da classe que representa um filha com prioriedade.
            </summary>
        </member>
        <member name="M:Colosoft.DataStructures.IPriorityQueue.Peek">
            <summary>
            Recupera a instancia do primeiro item da fila.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.DataStructures.IPriorityQueue.Pop">
            <summary>
            Remove o primeiro item da fila.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.DataStructures.IPriorityQueue.Push(System.Object)">
            <summary>
            Adiciona um novo item na fila.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.DataStructures.IPriorityQueue.Update(System.Int32)">
            <summary>
            Atualiza o item na posição informada.
            </summary>
            <param name="i">Posição do item.</param>
        </member>
        <member name="F:Colosoft.DataStructures.BinaryPriorityQueue._comparer">
            <summary>
            Comparador da instancia.
            </summary>
        </member>
        <member name="F:Colosoft.DataStructures.BinaryPriorityQueue._innerList">
            <summary>
            Lista interna.
            </summary>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.#ctor(System.Collections.IComparer)">
            <summary>
            Cria a instancia com o comparador informado.
            </summary>
            <param name="comparer">Comparador que será usado.</param>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.#ctor(System.Int32)">
            <summary>
            Cria a instancia informando a capacidade inicial da fila.
            </summary>
            <param name="capacity">Capacidade inicial da fila.</param>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.#ctor(System.Collections.IComparer,System.Int32)">
            <summary>
            Cria uma instancia informada o comparador e a capacidade inicial da fila.
            </summary>
            <param name="comparer">Comparador que será usado.</param>
            <param name="capacity">Capacidade inicial da fila.</param>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.#ctor(System.Collections.ArrayList,System.Collections.IComparer,System.Boolean)">
            <summary>
            Cria a instancia já com s lista dos itens.
            </summary>
            <param name="innerList"></param>
            <param name="comparer"></param>
            <param name="copy">True se deverá ser feita uma cópia da lista.</param>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.Peek">
            <summary>
            Recupera a instancia do primeiro item da fila.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.Pop">
            <summary>
            Remove o primeiro item da fila.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.Push(System.Object)">
            <summary>
            Adiciona um novo item na fila.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.Clear">
            <summary>
            Limpa todos os dados da fila.
            </summary>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.Clone">
            <summary>
            Cria um clone da instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.Contains(System.Object)">
            <summary>
            Verifica se na fila existe o valor informado.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.CopyTo(System.Array,System.Int32)">
            <summary>
            Copia os valores para o vetor informado.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.ReadOnly(Colosoft.DataStructures.BinaryPriorityQueue)">
            <summary>
            Recupera um cópid de somente leitura.
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.Syncronized(Colosoft.DataStructures.BinaryPriorityQueue)">
            <summary>
            Sincroniza a fila.
            </summary>
            <param name="queue"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.Update(System.Int32)">
            <summary>
            Atualiza o item na posição informada.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.OnCompare(System.Int32,System.Int32)">
            <summary>
            Compara os elementos nas posições informadas.
            </summary>
            <param name="position1">Posição do primeiro elemento.</param>
            <param name="position2">Posição do segundo elemento.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.SwitchElements(System.Int32,System.Int32)">
            <summary>
            Troca os elementos nas posição informadas.
            </summary>
            <param name="i"></param>
            <param name="j"></param>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador da instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.System#Collections#IList#Add(System.Object)">
            <summary>
            Adiciona um novo item.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.System#Collections#IList#Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.DataStructures.BinaryPriorityQueue.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Colosoft.DataStructures.BinaryPriorityQueue.Count">
            <summary>
            Quantidade de itens na fila.
            </summary>
        </member>
        <member name="P:Colosoft.DataStructures.BinaryPriorityQueue.IsSynchronized">
            <summary>
            Identifica se a instancia é sincronizada.
            </summary>
        </member>
        <member name="P:Colosoft.DataStructures.BinaryPriorityQueue.SyncRoot">
            <summary>
            Instancia de sincronização.
            </summary>
        </member>
        <member name="P:Colosoft.DataStructures.BinaryPriorityQueue.System#Collections#IList#IsFixedSize">
            <summary>
            Verifica se possui o tamanho fixo.
            </summary>
        </member>
        <member name="P:Colosoft.DataStructures.BinaryPriorityQueue.System#Collections#IList#IsReadOnly">
            <summary>
            Verificva se é somente leitura.
            </summary>
        </member>
        <member name="P:Colosoft.DataStructures.BinaryPriorityQueue.System#Collections#IList#Item(System.Int32)">
            <summary>
            Recupera o item pela posição informada.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Data.IStorageControl">
            <summary>
            Assinaturas das classes que possuem um controle da armazenamento.
            </summary>
        </member>
        <member name="P:Colosoft.Data.IStorageControl.ExistsInStorage">
            <summary>
            Identifica se os dados da instancia existem 
            fonte de armazenamento.
            </summary>
        </member>
        <member name="T:Colosoft.DetailsInvalidOperationException">
            <summary>
            Implementação de um <see cref="T:System.InvalidOperationException"/> com detalhes.
            </summary>
        </member>
        <member name="M:Colosoft.DetailsInvalidOperationException.#ctor(Colosoft.IMessageFormattable)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="message">Instancia da mensagem formatável.</param>
        </member>
        <member name="M:Colosoft.DetailsInvalidOperationException.#ctor(Colosoft.IMessageFormattable,System.Exception)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="message">Instancia da mensagem formatável.</param>
            <param name="innerException"></param>
        </member>
        <member name="M:Colosoft.DetailsInvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor de deserialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.DetailsInvalidOperationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Colosoft.DetailsInvalidOperationException.MessageFormattable">
            <summary>
            Mensagem formatável.
            </summary>
        </member>
        <member name="T:Colosoft.Diagnostics.Error">
            <summary>
            Classe com método para tratar os erros ocorridos no sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Diagnostics.Error.CreateNotification">
            <summary>
            Cria uma notificação de erro do sistema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Diagnostics.Error.Show(System.Exception)">
            <summary>
            Exibe a mensagem do erro ocorrido.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Colosoft.Diagnostics.Error.Show(Colosoft.IMessageFormattable,System.Exception)">
            <summary>
            Exibe a mensagem o erro informado.
            </summary>
            <param name="message">Mensagem do erro.</param>
            <param name="exception">Instancia do erro ocorrido.</param>
        </member>
        <member name="P:Colosoft.Diagnostics.Error.ExceptionNotificationFactory">
            <summary>
            Instancia do método usado para criar o Notification dos exceptions.
            </summary>
        </member>
        <member name="T:Colosoft.Diagnostics.ExceptionFormatter">
            <summary>
            Classe que auxilia na formatação de mensagens de erro.
            </summary>
        </member>
        <member name="M:Colosoft.Diagnostics.ExceptionFormatter.FormatDataDictionary(System.Exception)">
            <summary>
            Forma o dicionário de dados.
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Diagnostics.ExceptionFormatter.FormatOneException(System.Exception,System.Boolean)">
            <summary>
            Formata um erro.
            </summary>
            <param name="exception"></param>
            <param name="useBriefFormat">Identifica se é para usar um pequena descrição.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Diagnostics.ExceptionFormatter.GetTargetSiteDescription(System.Exception)">
            <summary>
            Recupera a descrição do método alvo onde o erro foi disparado
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Diagnostics.ExceptionFormatter.FormatExceptions(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Formata erros.
            </summary>
            <param name="exceptions"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Diagnostics.ExceptionFormatter.FormatException(System.Exception,System.Boolean)">
            <summary>
            Formata um erro.
            </summary>
            <param name="exception"></param>
            <param name="useBriefFormat">Identifica se é para usar um pequena descrição.</param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Diagnostics.ExceptionNotification">
            <summary>
            Implementação base para a notificação de um erro.
            </summary>
        </member>
        <member name="T:Colosoft.Diagnostics.IExceptionNotification">
            <summary>
            Assintura da notificação de um erro do sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Diagnostics.IExceptionNotification.Configure(Colosoft.IMessageFormattable,System.Exception)">
            <summary>
            Configura a notificação do erro.
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Colosoft.Diagnostics.IExceptionNotification.ShowDialog">
            <summary>
            Exibe o dialogo com o erro ocorrido.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Diagnostics.ExceptionNotification.Configure(Colosoft.IMessageFormattable,System.Exception)">
            <summary>
            Configura a notificação do erro.
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Colosoft.Diagnostics.ExceptionNotification.ShowDialog">
            <summary>
            Exibe o dialogo com o erro ocorrido.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Diagnostics.Trace">
            <summary>
            Classe reponsável por realiza o trace do sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Diagnostics.Trace.CreateOperation(System.String,System.Object[])">
            <summary>
            Cria uma operação para ser monitorada.
            </summary>
            <param name="name">Nome da operação que será monitorada.</param>
            <param name="args">Argumentos que serão utilizados na formação do nome da operação</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Diagnostics.Trace.WriteLine(System.Object)">
            <summary>
            Escreve uma linha para o trace.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Colosoft.Diagnostics.Trace.IsEnabled">
            <summary>
            Identifia se o 
            </summary>
        </member>
        <member name="T:Colosoft.Diagnostics.Trace.OperationScope">
            <summary>
            Representa o escopo de uma operação.
            </summary>
        </member>
        <member name="M:Colosoft.Diagnostics.Trace.OperationScope.#ctor(System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="name">Nome da operação.</param>
        </member>
        <member name="M:Colosoft.Diagnostics.Trace.OperationScope.Finalize">
            <summary>
            Destrutor.
            </summary>
        </member>
        <member name="M:Colosoft.Diagnostics.Trace.OperationScope.Stop">
            <summary>
            Para a operação.
            </summary>
        </member>
        <member name="M:Colosoft.Diagnostics.Trace.OperationScope.ToString">
            <summary>
            Recupera o texto que representa a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Diagnostics.Trace.OperationScope.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Diagnostics.Trace.OperationScope.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="P:Colosoft.Diagnostics.Trace.OperationScope.Elapsed">
            <summary>
            Recupera o tempo total passado desde o inicio da operação.
            </summary>
        </member>
        <member name="P:Colosoft.Diagnostics.Trace.OperationScope.ElapsedMilliseconds">
            <summary>
            Recupera o tempo total, em milisegundos, desde o início da operação.
            </summary>
        </member>
        <member name="P:Colosoft.Diagnostics.Trace.OperationScope.Name">
            <summary>
            Nome da operação.
            </summary>
        </member>
        <member name="P:Colosoft.Diagnostics.Trace.OperationScope.IsRunning">
            <summary>
            Identifica se a operação está em execução.
            </summary>
        </member>
        <member name="T:Colosoft.Domain.BackgroundEventSubscription`1">
            <summary>
            Customização da classe <see cref="T:Colosoft.Domain.DomainEventSubscription`1"/> para chamada na thread de background.
            </summary>
            <typeparam name="TPayload"></typeparam>
        </member>
        <member name="T:Colosoft.Domain.DomainEventSubscription`1">
            <summary>
            Implementação básico da inscrição de eventos.
            </summary>
            <typeparam name="TPayload">Tipo generico usado pelos tipos <see cref="T:System.Action`1"/> e <see cref="T:System.Predicate`1"/>.</typeparam>
        </member>
        <member name="T:Colosoft.Domain.IDomainEventSubscription">
            <summary>
            Assinatura das classes que representa a inscrição de um evento do domínio.
            </summary>
        </member>
        <member name="M:Colosoft.Domain.IDomainEventSubscription.GetExecutionStrategy">
            <summary>
            Recupera a estratégia de execução para publicar o evento.
            </summary>
            <returns>Instancia da estratégia.</returns>
        </member>
        <member name="P:Colosoft.Domain.IDomainEventSubscription.SubscriptionToken">
            <summary>
            Instancia do token que representa a inscrição.
            </summary>
        </member>
        <member name="F:Colosoft.Domain.DomainEventSubscription`1._name">
            <summary>
            Nome da assinatura.
            </summary>
        </member>
        <member name="F:Colosoft.Domain.DomainEventSubscription`1._actionReference">
            <summary>
            Referência para o delegate da ação.
            </summary>
        </member>
        <member name="F:Colosoft.Domain.DomainEventSubscription`1._filterReference">
            <summary>
            Referência para o delegate do filtro.
            </summary>
        </member>
        <member name="F:Colosoft.Domain.DomainEventSubscription`1._allowCallReentrance">
            <summary>
            Identifica se permite reentrada de chamada.
            </summary>
        </member>
        <member name="F:Colosoft.Domain.DomainEventSubscription`1._threadStrategies">
            <summary>
            Dicionário com as estratégias com base na thread.
            </summary>
        </member>
        <member name="M:Colosoft.Domain.DomainEventSubscription`1.#ctor(Colosoft.Domain.IDelegateReference,Colosoft.Domain.IDelegateReference,System.Boolean,System.String)">
            <summary>
             Constructor padrão.
            </summary>
            <param name="actionReference">Referência para um delegate do tipo <see cref="T:System.Action`1"/>.</param>
            <param name="filterReference">Referência para um delegate do tipo <see cref="T:System.Predicate`1"/>.</param>
            <param name="allowCallReentrance">Identifica se a instancia irá permitir reentrada de chamada.</param>
            <param name="name">Nome da assinatura.</param>
        </member>
        <member name="M:Colosoft.Domain.DomainEventSubscription`1.GetExecuteAction">
            <summary>
            Recupera a ação da execução.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Domain.DomainEventSubscription`1.GetFilterPredicate">
            <summary>
            Recupera o predicado do filtro.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Domain.DomainEventSubscription`1.GetExecutionStrategy">
            <summary>
            Recupera a estratégia de execução para publicar o evento.
            </summary>
            <returns>Instancia da estratégia.</returns>
        </member>
        <member name="M:Colosoft.Domain.DomainEventSubscription`1.StrategyDisposed(System.Object,System.EventArgs)">
            <summary>
            Método acionado quando algum estratégia da inscrição 
            ter sua instancia liberada.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Domain.DomainEventSubscription`1.InvokeAction(System.Action{`0},`0)">
            <summary>
            Realiza a chama da ação da inscrição.
            </summary>
            <param name="action">Ação que será executada.</param>
            <param name="argument">Argumento que será repassado para a ação.</param>
        </member>
        <member name="M:Colosoft.Domain.DomainEventSubscription`1.InvokeFilter(System.Predicate{`0},`0)">
            <summary>
            Realiza a chama do filtro da inscrição.
            </summary>
            <param name="filter"></param>
            <param name="argument"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Domain.DomainEventSubscription`1.ToString">
            <summary>
            Recupera o texto que representa a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Domain.DomainEventSubscription`1.Action">
            <summary>
            Recupera o delegate da ação.
            </summary>
        </member>
        <member name="P:Colosoft.Domain.DomainEventSubscription`1.Filter">
            <summary>
            Recupera o delegate do filtro.
            </summary>
        </member>
        <member name="P:Colosoft.Domain.DomainEventSubscription`1.SubscriptionToken">
            <summary>
            Token da inscrição.
            </summary>
        </member>
        <member name="M:Colosoft.Domain.BackgroundEventSubscription`1.#ctor(Colosoft.Domain.IDelegateReference,Colosoft.Domain.IDelegateReference,System.Boolean,System.String)">
            <summary>
            Constructor padrão.
            </summary>
            <param name="actionReference">Referência para um delegate do tipo <see cref="T:System.Action`1"/>.</param>
            <param name="filterReference">Referência para um delegate do tipo <see cref="T:System.Predicate`1"/>.</param>
            <param name="allowCallReentrance">Identifica se a instancia irá permitir reentrada de chamada.</param>
            <param name="name">Nome da assinatura.</param>
        </member>
        <member name="M:Colosoft.Domain.BackgroundEventSubscription`1.InvokeAction(System.Action{`0},`0)">
            <summary>
            Realiza a chama da ação da inscrição.
            </summary>
            <param name="action">Ação que será executada.</param>
            <param name="argument">Argumento que será repassado para a ação.</param>
        </member>
        <member name="T:Colosoft.Domain.CompositeDomainEvent`1">
            <summary>
            Representa a classe que gerencia a publicação e inscrição dos eventos do dominio.
            </summary>
            <typeparam name="TPayload"></typeparam>
        </member>
        <member name="T:Colosoft.Domain.DomainEventBase">
            <summary>
            Implementação básica de um evento de domínio.
            </summary>
        </member>
        <member name="M:Colosoft.Domain.DomainEventBase.PruneAndReturnStrategies">
            <summary>
            Recupera as estratégia de execução.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Domain.DomainEventBase.InternalSubscribe(Colosoft.Domain.IDomainEventSubscription)">
            <summary>
            Inscreve um evento para o domínio.
            </summary>
            <param name="subscription">Instancia da inscrição.</param>
            <returns>Token gerado para a inscrição feita.</returns>
        </member>
        <member name="M:Colosoft.Domain.DomainEventBase.Unsubscribe(Colosoft.Domain.SubscriptionToken)">
            <summary>
            Remove a inscrição associada com o token informado.
            </summary>
            <param name="token">Instancia do token da inscrição.</param>
        </member>
        <member name="M:Colosoft.Domain.DomainEventBase.Contains(Colosoft.Domain.SubscriptionToken)">
            <summary>
            Verifica se o token já está registrado na instancia.
            </summary>
            <param name="token">Token da inscrição que será verificado.</param>
            <returns><see langword="true"/> caso a instancia tenha o token informado.</returns>
        </member>
        <member name="M:Colosoft.Domain.DomainEventBase.InternalPublish(System.Object[])">
            <summary>
            Chama todas as estratégias de execução das inscrições.
            </summary>
            <param name="arguments">Argumentos que serão passados para os listeners</param>
        </member>
        <member name="P:Colosoft.Domain.DomainEventBase.Subscriptions">
            <summary>
            Recupera a coleção das inscrições feitas para o evento.
            </summary>
        </member>
        <member name="M:Colosoft.Domain.CompositeDomainEvent`1.Subscribe(System.Action{`0})">
            <summary>
            Registra o delegate para um evento que será publicado usando a opção <see cref="F:Colosoft.Domain.DomainEventThreadOption.PublisherThread"/>.
            </summary>
            <param name="action">Instancia da ação que será registrada.</param>
            <returns>Token da inscrição.</returns>
        </member>
        <member name="M:Colosoft.Domain.CompositeDomainEvent`1.Subscribe(System.Action{`0},Colosoft.Domain.DomainEventThreadOption)">
            <summary>
            Registra o delegate para o evento.
            </summary>
            <param name="action">Instancia da ação que será registrada.</param>
            <param name="threadOption">Opção de thread para o acionamento da ação.</param>
            <returns>Token da inscrição.</returns>
        </member>
        <member name="M:Colosoft.Domain.CompositeDomainEvent`1.Subscribe(System.Action{`0},System.Boolean)">
            <summary>
            Registra o delegate para um evento que será publicado usando a opção <see cref="F:Colosoft.Domain.DomainEventThreadOption.PublisherThread"/>.
            </summary>
            <param name="action">Instancia da ação que será registrada.</param>
            <param name="keepSubscriberReferenceAlive">Quando <see langword="true"/>, a instancia
            mantem uma regerencia da inscrição que não será capturada pelo garbage collected.</param>
            <returns>Token da inscrição.</returns>
        </member>
        <member name="M:Colosoft.Domain.CompositeDomainEvent`1.Subscribe(System.Action{`0},Colosoft.Domain.DomainEventThreadOption,System.Boolean)">
            <summary>
            Registra o delegate para o evento.
            </summary>
            <param name="action">Instancia da ação que será registrada.</param>
            <param name="threadOption">Opção de thread para o acionamento da ação.</param>
            <param name="keepSubscriberReferenceAlive">Quando <see langword="true"/>, a instancia
            mantem uma regerencia da inscrição que não será capturada pelo garbage collected.</param>
            <returns>Token da inscrição.</returns>
        </member>
        <member name="M:Colosoft.Domain.CompositeDomainEvent`1.Subscribe(System.Action{`0},Colosoft.Domain.DomainEventThreadOption,System.Boolean,System.Predicate{`0},System.Boolean,System.String)">
            <summary>
            Registra o delegate de um evento.
            </summary>
            <param name="action">Instancia da ação que será registrada.</param>
            <param name="threadOption">Opção de thread para o acionamento da ação.</param>
            <param name="keepSubscriberReferenceAlive">Quando <see langword="true"/>, a instancia
            mantem uma regerencia da inscrição que não será capturada pelo garbage collected.</param>
            <param name="filter">Predicado do filtro para acionar o evento registrado.</param>
            <param name="allowCallReentrance"><see langword="true"/> identifica que permite rechamada da ação.</param>
            <param name="name">Nome da assinatura.</param>
            <returns>Token da inscrição.</returns>
        </member>
        <member name="M:Colosoft.Domain.CompositeDomainEvent`1.Unsubscribe(System.Action{`0})">
            <summary>
            Remove a primeira inscrição que for igual ao <seealso cref="T:System.Action`1"/> que está na lista de inscrições.
            </summary>
            <param name="subscriber">Instancia da <see cref="T:System.Action`1"/> usada quando o evento foi registrado.</param>
        </member>
        <member name="M:Colosoft.Domain.CompositeDomainEvent`1.Contains(System.Action{`0})">
            <summary>
            Verifica se existe alguma inscrição igual a instancia informada..
            </summary>
            <param name="subscriber"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Domain.CompositeDomainEvent`1.Publish(`0)">
            <summary>
            Publica o evento com o argumento informado.
            </summary>
            <param name="payload">Message que será enviada para as inscrições.</param>
        </member>
        <member name="P:Colosoft.Domain.CompositeDomainEvent`1.Dispatcher">
            <summary>
            Instancia do despachante associado.
            </summary>
        </member>
        <member name="T:Colosoft.Domain.DelegateReference">
            <summary>
            Implementação para a referencia de um <see cref="T:System.Delegate"/>.
            </summary>
        </member>
        <member name="T:Colosoft.Domain.IDelegateReference">
            <summary>
            Representa a referencia de um <see cref="T:System.Delegate"/>
            </summary>
        </member>
        <member name="P:Colosoft.Domain.IDelegateReference.Target">
            <summary>
            Recupera o objeto <see cref="T:System.Delegate"/> referenciado.
            </summary>
        </member>
        <member name="M:Colosoft.Domain.DelegateReference.#ctor(System.Delegate,System.Boolean)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="delegate">Instancia do original do <see cref="T:System.Delegate"/> para criar uma referencia..</param>
            <param name="keepReferenceAlive"><see langword="false"/> se for para criar uma referencia fraca para o delegate, permitindo o garbage collected. 
            Ou mantem uma referancia forte para a instancia.</param>
        </member>
        <member name="M:Colosoft.Domain.DelegateReference.TryGetDelegate">
            <summary>
            Tenta recupera a instancia do delegate.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Domain.DelegateReference.Target">
            <summary>
            Recupera o objeto <see cref="T:System.Delegate"/> referenciado.
            </summary>
        </member>
        <member name="T:Colosoft.Domain.DispatcherEventSubscription`1">
            <summary>
            Customnização da classe <see cref="T:Colosoft.Domain.DomainEventSubscription`1"/> para chamada pelo <see cref="T:Colosoft.Threading.IDispatcher"/>.
            </summary>
            <typeparam name="TPayload"></typeparam>
        </member>
        <member name="M:Colosoft.Domain.DispatcherEventSubscription`1.#ctor(Colosoft.Domain.IDelegateReference,Colosoft.Domain.IDelegateReference,System.Boolean,Colosoft.Threading.IDispatcher,System.String)">
            <summary>
             Constructor padrão.
            </summary>
            <param name="actionReference">Referência para um delegate do tipo <see cref="T:System.Action`1"/>.</param>
            <param name="filterReference">Referência para um delegate do tipo <see cref="T:System.Predicate`1"/>.</param>
            <param name="allowCallReentrance">Identifica se a instancia irá permitir reentrada de chamada.</param>
            <param name="dispatcher">Despachante que será usado na instancia.</param>
            <param name="name">Nome da assinatura.</param>
        </member>
        <member name="M:Colosoft.Domain.DispatcherEventSubscription`1.InvokeAction(System.Action{`0},`0)">
            <summary>
            Realiza a chama da ação da inscrição.
            </summary>
            <param name="action">Ação que será executada.</param>
            <param name="argument">Argumento que será repassado para a ação.</param>
        </member>
        <member name="M:Colosoft.Domain.DispatcherEventSubscription`1.InvokeFilter(System.Predicate{`0},`0)">
            <summary>
            Realiza a chama do filtro da inscrição.
            </summary>
            <param name="filter"></param>
            <param name="argument"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Domain.DomainEventExecutionStrategy">
            <summary>
            Classe que representa a estratégia de execução de uma evento.
            </summary>
        </member>
        <member name="T:Colosoft.Domain.IDomainEventExecutionStrategy">
            <summary>
            Assinatura das classes que representam a estratégia de execução.
            </summary>
        </member>
        <member name="M:Colosoft.Domain.IDomainEventExecutionStrategy.CanExecute(System.Object[])">
            <summary>
            Verifica se a execução pode ser realizada.
            </summary>
            <param name="arguments">Argumentos que serão usados na validação da execução.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Domain.IDomainEventExecutionStrategy.Execute(System.Object[])">
            <summary>
            Executa a estratégia.
            </summary>
            <param name="arguments">Argumentos que serão usados na execução.</param>
        </member>
        <member name="E:Colosoft.Domain.IDomainEventExecutionStrategy.Disposed">
            <summary>
            Evento acionado quando a instancia for liberada.
            </summary>
        </member>
        <member name="M:Colosoft.Domain.DomainEventExecutionStrategy.CanExecute(System.Object[])">
            <summary>
            Verifica se a execução pode ser realizada.
            </summary>
            <param name="arguments">Argumentos que serão usados na validação da execução.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Domain.DomainEventExecutionStrategy.Execute(System.Object[])">
            <summary>
            Executa a estratégia.
            </summary>
            <param name="arguments">Argumentos que serão usados na execução.</param>
        </member>
        <member name="M:Colosoft.Domain.DomainEventExecutionStrategy.#ctor(System.String,System.Type,System.Action{System.Object[]},System.Predicate{System.Object[]})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="name">Nome associado.</param>
            <param name="domainEventType">Tipo do evento de domínio.</param>
            <param name="action">Ação da estratégia.</param>
            <param name="filter">Filtro que será usado para validar a execução da estratégia.</param>
        </member>
        <member name="M:Colosoft.Domain.DomainEventExecutionStrategy.ToString">
            <summary>
            Recupera o texto que representa a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Domain.DomainEventExecutionStrategy.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Domain.DomainEventExecutionStrategy.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="E:Colosoft.Domain.DomainEventExecutionStrategy.Disposed">
            <summary>
            Evento acionado quando a instancia for liberada.
            </summary>
        </member>
        <member name="P:Colosoft.Domain.DomainEventExecutionStrategy.DomainEventType">
            <summary>
            Tipo do evento de domínio associado.
            </summary>
        </member>
        <member name="T:Colosoft.Domain.DomainEvents">
            <summary>
            Implementação de <see cref="T:Colosoft.Domain.IDomainEvents"/>
            </summary>
        </member>
        <member name="T:Colosoft.Domain.IDomainEvents">
            <summary>
            Assinatura da classes responsável por incorporar e gerenciar
            os eventos do dominio da aplicação.
            </summary>
        </member>
        <member name="M:Colosoft.Domain.IDomainEvents.GetEvent``1">
            <summary>
            Recupera a instancia do evento.
            </summary>
            <typeparam name="TEventType">Tipo do evento que será recuperado.</typeparam>
            <returns>Instancia do objeto do evento do tipo <typeparamref name="TEventType"/>.</returns>
        </member>
        <member name="M:Colosoft.Domain.DomainEvents.GetEvent``1">
            <summary>
            Recupera a instancia do evento.
            </summary>
            <typeparam name="TEventType">Tipo do evento que será recuperado.</typeparam>
            <returns>Instancia do objeto do evento do tipo <typeparamref name="TEventType"/>.</returns>
        </member>
        <member name="P:Colosoft.Domain.DomainEvents.Instance">
            <summary>
            Instancia unico dos dominio de eventos do sistema.
            </summary>
        </member>
        <member name="T:Colosoft.Domain.DomainEventThreadOption">
            <summary>
            Define qual thread um <see cref="T:Colosoft.Domain.CompositeDomainEvent`1"/> irá chamar.
            </summary>
        </member>
        <member name="F:Colosoft.Domain.DomainEventThreadOption.PublisherThread">
            <summary>
            A chamada utilizará a atual thrader do publicador.
            </summary>
        </member>
        <member name="F:Colosoft.Domain.DomainEventThreadOption.DispatcherThread">
            <summary>
            A chamada será feita utilizando o dispatcher.
            </summary>
        </member>
        <member name="F:Colosoft.Domain.DomainEventThreadOption.BackgroundThread">
            <summary>
            A chamada será feita de forma assincrona em uma thread de fundo.
            </summary>
        </member>
        <member name="T:Colosoft.Domain.EntityEventType">
            <summary>
            Possíveis tipos de eventos das entidades.
            </summary>
        </member>
        <member name="F:Colosoft.Domain.EntityEventType.Initialized">
            <summary>
            Representa o evento acionado quando a entidade for inicializada.
            </summary>
        </member>
        <member name="F:Colosoft.Domain.EntityEventType.PropertyChanging">
            <summary>
            Representa o evento acionado quando uma propriedade da entidade
            estiver sendo alterada.
            </summary>
        </member>
        <member name="F:Colosoft.Domain.EntityEventType.PropertyChanged">
            <summary>
            Representa o evento acionado quando uma propriedade da entidade
            for alterada.
            </summary>
        </member>
        <member name="F:Colosoft.Domain.EntityEventType.Validating">
            <summary>
            Representa o evento acionado quando a entidade estiver sendo validada.
            </summary>
        </member>
        <member name="F:Colosoft.Domain.EntityEventType.Validated">
            <summary>
            Representa o evento acionado quando a entidade for validada.
            </summary>
        </member>
        <member name="F:Colosoft.Domain.EntityEventType.Saving">
            <summary>
            Representa o evento acionado quando a entidade estiver sendo salva.
            </summary>
        </member>
        <member name="F:Colosoft.Domain.EntityEventType.Saved">
            <summary>
            Representa o evento acionado quando a entidade for salva.
            </summary>
        </member>
        <member name="F:Colosoft.Domain.EntityEventType.Deleting">
            <summary>
            Representa o evento acionado quando a entidade estiver sendo apagada.
            </summary>
        </member>
        <member name="F:Colosoft.Domain.EntityEventType.Deleted">
            <summary>
            Representa o evento acionado quando a entidade for salva.
            </summary>
        </member>
        <member name="T:Colosoft.Domain.IExecuteSubscription`1">
            <summary>
            Assinatura de uma assinatura de execução.
            </summary>
        </member>
        <member name="M:Colosoft.Domain.IExecuteSubscription`1.Execute(`0)">
            <summary>
            Método acionado pelo a publiação do evento.
            </summary>
            <param name="args">Argumentos do evento.</param>
        </member>
        <member name="T:Colosoft.Domain.SubscriptionToken">
            <summary>
            Representa um token com os dados da inscrição de um evento no domínio.
            </summary>
        </member>
        <member name="M:Colosoft.Domain.SubscriptionToken.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Domain.SubscriptionToken.Equals(Colosoft.Domain.SubscriptionToken)">
            <summary>
            Verifica se o atual objeto é igual a instancia informado.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Domain.SubscriptionToken.Equals(System.Object)">
            <summary>
             Determina se a instancia informado é igual a atual instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Domain.SubscriptionToken.GetHashCode">
            <summary>
            Recupera o hashcode da instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Drawing.GraphicsHelper">
            <summary>
            Classe com métodos que auxiliam os calculos gráficos.
            </summary>
        </member>
        <member name="M:Colosoft.Drawing.GraphicsHelper.ConvertToRadians(System.Double)">
            <summary>
            Converte angulo para radianos.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Drawing.GraphicsHelper.Raytrace(System.Double,System.Double,System.Double,System.Double,System.Action{System.Int32,System.Int32})">
            <summary>
            Raytracing 
            </summary>
            <param name="x0"></param>
            <param name="y0"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="visit"></param>
            <remarks>http://playtechs.blogspot.com.br/2007/03/raytracing-on-grid.html</remarks>
        </member>
        <member name="T:Colosoft.Drawing.Line">
            <summary>
            Representa uma linha.
            </summary>
        </member>
        <member name="M:Colosoft.Drawing.Line.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Drawing.Line.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Cria a instancia com os valores iniciais.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:Colosoft.Drawing.Line.Intersection(Colosoft.Drawing.Line,System.Double@,System.Double@)">
            <summary>
            Calculates intersection - if any - of two lines
            </summary>
            <param name="otherLine"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns>True for ok</returns>
            <remarks>Taken from http://tog.acm.org/resources/GraphicsGems/gemsii/xlines.c </remarks>
        </member>
        <member name="P:Colosoft.Drawing.Line.X1">
            <summary>
            X do ponto inicial.
            </summary>
        </member>
        <member name="P:Colosoft.Drawing.Line.Y1">
            <summary>
            Y do ponto inicial.
            </summary>
        </member>
        <member name="P:Colosoft.Drawing.Line.X2">
            <summary>
            X do ponto final.
            </summary>
        </member>
        <member name="P:Colosoft.Drawing.Line.Y2">
            <summary>
            Y do ponto final.
            </summary>
        </member>
        <member name="T:Colosoft.EntityDescriptor">
            <summary>
            Representa o nome e o id de uma entidade do sistema.
            </summary>
        </member>
        <member name="T:Colosoft.IEntityDescriptor">
            <summary>
            Interface de entidades simplificadas.
            </summary>
        </member>
        <member name="T:Colosoft.IStatusControl">
            <summary>
            Assinatura das classes que possuem controle de situação.
            </summary>
        </member>
        <member name="P:Colosoft.IStatusControl.IsExpired">
            <summary>
            Indica se a instância está expirada
            </summary>
        </member>
        <member name="P:Colosoft.IStatusControl.IsActive">
            <summary>
            Indica se a instância está ativa.
            </summary>
        </member>
        <member name="M:Colosoft.IEntityDescriptor.ConfigureStatusControl(System.Boolean,System.Boolean)">
            <summary>
            Configura o controle de status associado.
            </summary>
            <param name="isActive">Identifica se os dados estão ativos.</param>
            <param name="isExpired">Identifica se os dados foram expirados.</param>
        </member>
        <member name="P:Colosoft.IEntityDescriptor.Id">
            <summary>
            Identificador da entidade.
            </summary>
        </member>
        <member name="P:Colosoft.IEntityDescriptor.Name">
            <summary>
            Nome da entidade.
            </summary>
        </member>
        <member name="P:Colosoft.IEntityDescriptor.Description">
            <summary>
            Descrição da entidade.
            </summary>
        </member>
        <member name="M:Colosoft.EntityDescriptor.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.EntityDescriptor.#ctor(System.Int32,System.String)">
            <summary>
            Cria a instancia com o identificador e o nome.
            </summary>
            <param name="id"></param>
            <param name="name"></param>
        </member>
        <member name="M:Colosoft.EntityDescriptor.ConfigureStatusControl(System.Boolean,System.Boolean)">
            <summary>
            Configura o controle de status associado.
            </summary>
            <param name="isActive">Identifica se os dados estão ativos.</param>
            <param name="isExpired">Identifica se os dados foram expirados.</param>
        </member>
        <member name="M:Colosoft.EntityDescriptor.Equals(Colosoft.IEntityDescriptor)">
            <summary>
            Compara a instancia com outro descritor.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EntityDescriptor.CompareTo(Colosoft.IEntityDescriptor)">
            <summary>
            Compara a instancia com o descritor informado.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.EntityDescriptor.Id">
            <summary>
            Identificador da entidade.
            </summary>
        </member>
        <member name="P:Colosoft.EntityDescriptor.Name">
            <summary>
            Nome da entidade.
            </summary>
        </member>
        <member name="P:Colosoft.EntityDescriptor.Description">
            <summary>
            Descrição da entidade.
            </summary>
        </member>
        <member name="P:Colosoft.EntityDescriptor.IsActive">
            <summary>
            Identifica se a instancia está ativa.
            </summary>
        </member>
        <member name="P:Colosoft.EntityDescriptor.IsExpired">
            <summary>
            Identifica se a instancia está expirada.
            </summary>
        </member>
        <member name="T:Colosoft.EntityDescriptorIdComparer">
            <summary>
            Implementação do comparador que utiliza o Id do entity descriptor
            como referencia.
            </summary>
        </member>
        <member name="F:Colosoft.EntityDescriptorIdComparer.Instance">
            <summary>
            Instancia padrão.
            </summary>
        </member>
        <member name="M:Colosoft.EntityDescriptorIdComparer.Equals(Colosoft.IEntityDescriptor,Colosoft.IEntityDescriptor)">
            <summary>
            Verifica se a instancias informadas são iguais.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EntityDescriptorIdComparer.GetHashCode(Colosoft.IEntityDescriptor)">
            <summary>
            Recupera o código hash da instancia informada.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EntityDescriptorIdComparer.Compare(Colosoft.IEntityDescriptor,Colosoft.IEntityDescriptor)">
            <summary>
            Compara as instancias informadas.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EntityDescriptorIdComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
            <summary>
            Compara as instancia informadas.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EntityDescriptorIdComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
            <summary>
            Recupera o hash code da instancia informada.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EntityDescriptorIdComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compara as instancia informadas.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.EnumerableExtentions">
            <summary>
            Classe que contém os método de extensão para a coleção do sistema.
            </summary>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.ToObservableCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Transforma a enumeração em uma coleção observada.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.CastObservableCollection``1(Colosoft.Collections.IObservableCollection)">
            <summary>
            Faz o cast da coleção informada para a coleção do tipo TDestination.
            </summary>
            <typeparam name="TDestination"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Verifica se a sequência é nula ou está vazia.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            Verifica se a sequência é nula ou está vazia.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.HasItems``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Indica se a sequência é não nula e possui itens.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.HasItems(System.Collections.IEnumerable)">
            <summary>
            Indica se a sequência é não nula e possui itens.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.OrderByObservableCollection``1(Colosoft.Collections.IObservableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Cria uma coleção ordena.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">Coleção de origem dos dados.</param>
            <param name="properties">Propriedade que serão utilizadas na ordenação.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.OrderByObservableCollection(Colosoft.Collections.IObservableCollection,System.String[])">
            <summary>
            Cria uma coleção ordena.
            </summary>
            <param name="source">Coleção de origem dos dados.</param>
            <param name="properties">Propriedade que serão utilizadas na ordenação.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Realiza uma pesquisa binária.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.BinarySearch``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Realiza uma pesquisa binária.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.BinarySearch``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Realiza uma pesquisa binária
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Itens onde será feita a pesquisa.</param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.InternalBinarySearch``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Realiza uma pesquisa binaria na lista informada.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="index">Index inicial.</param>
            <param name="length">Tamanho.</param>
            <param name="value">Valor que será pesquisado.</param>
            <param name="comparer">Instancia do comparador.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.IsSameSequence``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determina se os objetos sequência são iguais.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.CreateHashIndex``2(Colosoft.Collections.IObservableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Cria um indice do tipo hash para a coleção.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="PropertyType"></typeparam>
            <param name="collection"></param>
            <param name="property"></param>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.ApplyFilter``1(Colosoft.Collections.IObservableCollection{``0},System.Predicate{``0})">
            <summary>
            Aplica o filtro sobre a coleção.
            </summary>
            <typeparam name="T">Tipo que é armazenado na coleção.</typeparam>
            <param name="collection">Coleção que será filtrada.</param>
            <param name="filter">Predicato que será utilizado.</param>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.GetSearchParameterDescriptions``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Recupera a descrições dos parametros de pesquisa associados com o
            enumerador informado.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.Join(System.Collections.Generic.IEnumerable{Colosoft.Collections.SearchParamerterDescription},System.String)">
            <summary>
            Junta as descrições dos parametros.
            </summary>
            <param name="descriptions"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.ApplyDiff``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Aplica as diferenças da coleção da direita na coleção da esquerda.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">Coleção onde serão aplicadas as diferenças.</param>
            <param name="right">Coleção com as diferenças</param>
            <param name="predicate">Predicado usado para comparar os itens das coleções.</param>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.ApplyDiff``1(System.Collections.IList,System.Collections.IList,System.Func{``0,``0,System.Boolean})">
            <summary>
            Aplica as diferenças da coleção da direita na coleção da esquerda.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left">Coleção onde serão aplicadas as diferenças.</param>
            <param name="right">Coleção com as diferenças</param>
            <param name="predicate">Predicado usado para comparar os itens das coleções.</param>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.Append``2(``0,``1[])">
            <summary>
            Anexa mais itens para a coleção informada.
            </summary>
            <typeparam name="T1">Tipo da coleção</typeparam>
            <typeparam name="T2">Tipo do item da coleção.</typeparam>
            <param name="collection"></param>
            <param name="items">Itens que serão adicionados a coleção.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.Break``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Segmenta os itens informados em grupos com a quantidade máxima por grupo.
            </summary>
            <typeparam name="T">Tipo dos itens.</typeparam>
            <param name="items">Itens que serão segmentados.</param>
            <param name="count">Quantidade que será segmentadas por grupo.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.JoinSegments``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Junta os segmentos informados.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="segment1"></param>
            <param name="segment2"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.EnumerableExtentions.ToVirtualList``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Transforma a coleção informado e uma lista virtual.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.ActivationStatus">
            <summary>
            Situação de ativação padrão do sistema.
            </summary>
        </member>
        <member name="F:Colosoft.ActivationStatus.Active">
            <summary>
            Ativo.
            </summary>
        </member>
        <member name="F:Colosoft.ActivationStatus.Canceled">
            <summary>
            Cancelado.
            </summary>
        </member>
        <member name="T:Colosoft.BillStatus">
            <summary>
            Enumerador com o status de faturamento dos itens
            </summary>
        </member>
        <member name="F:Colosoft.BillStatus.Taked">
            <summary>
            Captado ou Disponível
            </summary>
        </member>
        <member name="F:Colosoft.BillStatus.Integrated">
            <summary>
            Integrada
            </summary>
        </member>
        <member name="F:Colosoft.BillStatus.Billed">
            <summary>
            Faturada
            </summary>
        </member>
        <member name="F:Colosoft.BillStatus.Cancelled">
            <summary>
            Cancelada.
            </summary>
        </member>
        <member name="F:Colosoft.BillStatus.Paid">
            <summary>
            Recebido
            </summary>
        </member>
        <member name="F:Colosoft.BillStatus.DeductibleLoss">
            <summary>
            Perda Dedutível.
            </summary>
        </member>
        <member name="T:Colosoft.CardTransType">
            <summary>
            Tipos de transação de cartão.
            </summary>
        </member>
        <member name="F:Colosoft.CardTransType.Credit">
            <summary>
            Crédito
            </summary>
        </member>
        <member name="F:Colosoft.CardTransType.Debt">
            <summary>
            Débito
            </summary>
        </member>
        <member name="T:Colosoft.ControlAlignment">
            <summary>
            Possíveis alinhamentos para controles
            </summary>
        </member>
        <member name="F:Colosoft.ControlAlignment.Vertical">
            <summary>
            Alinhamento vertical (Controle abaixo do label)
            </summary>
        </member>
        <member name="F:Colosoft.ControlAlignment.Horizontal">
            <summary>
            Alinhamento horizontal (Controle ao lado direito do label)
            </summary>
        </member>
        <member name="T:Colosoft.ExternalSystemType">
            <summary>
            Possíveis tipos de sistemas externos
            </summary>
        </member>
        <member name="F:Colosoft.ExternalSystemType.Signature">
            <summary>
            Assinatura
            </summary>
        </member>
        <member name="F:Colosoft.ExternalSystemType.ERP">
            <summary>
            ERP
            </summary>
        </member>
        <member name="F:Colosoft.ExternalSystemType.OnLineBilling">
            <summary>
            Cobrança Online
            </summary>
        </member>
        <member name="F:Colosoft.ExternalSystemType.CreditCheck">
            <summary>
            Checagem de Crédito
            </summary>
        </member>
        <member name="F:Colosoft.ExternalSystemType.FinancialSystem">
            <summary>
            Sistema financeiro
            </summary>
        </member>
        <member name="T:Colosoft.InstallmentStatus">
            <summary>
            Possíveis status.
            </summary>
        </member>
        <member name="F:Colosoft.InstallmentStatus.Active">
            <summary>
            Aguradando
            </summary>
        </member>
        <member name="F:Colosoft.InstallmentStatus.Canceled">
            <summary>
            Desconto.
            </summary>
        </member>
        <member name="T:Colosoft.ItemStatus">
            <summary>
            Enumerador com o status do item
            </summary>
        </member>
        <member name="F:Colosoft.ItemStatus.Taked">
            <summary>
            Captado
            </summary>
        </member>
        <member name="F:Colosoft.ItemStatus.Diagrammed">
            <summary>
            Diagramada
            </summary>
        </member>
        <member name="F:Colosoft.ItemStatus.Produced">
            <summary>
            Produzido
            </summary>
        </member>
        <member name="F:Colosoft.ItemStatus.NoDiagrammed">
            <summary>
            Não diagramada.
            </summary>
        </member>
        <member name="F:Colosoft.ItemStatus.NoProduced">
            <summary>
            Não produzida.
            </summary>
        </member>
        <member name="F:Colosoft.ItemStatus.Blocked">
            <summary>
            Bloqueada.
            </summary>
        </member>
        <member name="F:Colosoft.ItemStatus.Cancelled">
            <summary>
            Cancelada.
            </summary>
        </member>
        <member name="T:Colosoft.ItemStatusExtended">
            <summary>
            Status do item (<see cref="T:Colosoft.ItemStatus"/>) + ativo (!= 6) e livre (&lt; 5).
            </summary>
        </member>
        <member name="F:Colosoft.ItemStatusExtended.Active">
            <summary>
            Ativo (ItemStatus != 6).
            </summary>
            
        </member>
        <member name="F:Colosoft.ItemStatusExtended.Free">
            <summary>
            Livre (ItemStatus &lt; 5).
            </summary>
        </member>
        <member name="F:Colosoft.ItemStatusExtended.Taked">
            <summary>
            Captado.
            </summary>
        </member>
        <member name="F:Colosoft.ItemStatusExtended.Diagrammed">
            <summary>
            Diagramado.
            </summary>
        </member>
        <member name="F:Colosoft.ItemStatusExtended.Produced">
            <summary>
            Produzido.
            </summary>
        </member>
        <member name="F:Colosoft.ItemStatusExtended.NotDiagrammed">
            <summary>
            Não diagramado.
            </summary>
        </member>
        <member name="F:Colosoft.ItemStatusExtended.NotProduced">
            <summary>
            Não produzido.
            </summary>
        </member>
        <member name="F:Colosoft.ItemStatusExtended.Blocked">
            <summary>
            Bloqueado.
            </summary>
        </member>
        <member name="F:Colosoft.ItemStatusExtended.Cancelled">
            <summary>
            Cancelado.
            </summary>
        </member>
        <member name="T:Colosoft.ItemStatusExtensions">
            <summary>
            Extensões para ItemStatus.
            </summary>
        </member>
        <member name="M:Colosoft.ItemStatusExtensions.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Colosoft.ItemStatusExtensions.IsStandard(Colosoft.ItemStatusExtended)">
            <summary>
            Indica se o status possui um <see cref="T:Colosoft.ItemStatus"/> correspondente.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ItemStatusExtensions.IsActive(Colosoft.ItemStatusExtended)">
            <summary>
            Indica se o status corresponde ao status extendido "ativo".
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ItemStatusExtensions.IsFree(Colosoft.ItemStatusExtended)">
            <summary>
            Indica se o status corresponde ao status extendido "livre".
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ItemStatusExtensions.Convert(Colosoft.ItemStatusExtended)">
            <summary>
            Converte o status para o tipo <see cref="T:Colosoft.ItemStatus"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.ItemStatusExtensions.ValuesList">
            <summary>
            Sequence (ordered by value) of values of the <see cref="T:Colosoft.ItemStatus"/> type.
            </summary>
        </member>
        <member name="P:Colosoft.ItemStatusExtensions.ExtendedValuesList">
            <summary>
            Sequence (ordered by value) of values of the <see cref="T:Colosoft.ItemStatusExtended"/> type.
            </summary>
        </member>
        <member name="T:Colosoft.Enums.LockTransactionType">
            <summary>
            Tipo de transação de bloqueio.
            </summary>
        </member>
        <member name="F:Colosoft.Enums.LockTransactionType.Lock">
            <summary>
            Transação de bloqueio.
            </summary>
        </member>
        <member name="F:Colosoft.Enums.LockTransactionType.Unlock">
            <summary>
            Transação de desbloqueio.
            </summary>
        </member>
        <member name="T:Colosoft.PaymentStatus">
            <summary>
            Status do pagamento.
            </summary>
        </member>
        <member name="F:Colosoft.PaymentStatus.Empty">
            <summary>
            Vazio.
            </summary>
        </member>
        <member name="F:Colosoft.PaymentStatus.Active">
            <summary>
            Aguradando
            </summary>
        </member>
        <member name="F:Colosoft.PaymentStatus.Canceled">
            <summary>
            Desconto.
            </summary>
        </member>
        <member name="T:Colosoft.RateIncreaseOrder">
            <summary>
            Ordem em que o incremento será aplicado
            </summary>
        </member>
        <member name="F:Colosoft.RateIncreaseOrder.BeforeUnits">
            <summary>
            Antes de se posicionar as unidades(só aceita incrementos que afetam as unidades)
            </summary>
        </member>
        <member name="F:Colosoft.RateIncreaseOrder.BeforeRate">
            <summary>
            Antes de fazer o cálculo do preço
            </summary>
        </member>
        <member name="F:Colosoft.RateIncreaseOrder.AfterRate">
            <summary>
            No final do cálculo(só aceita incrementos que afetem valor)
            </summary>
        </member>
        <member name="T:Colosoft.RateIncreaseType">
            <summary>
            Enumerador com os tipos de incremento possíveis
            </summary>
        </member>
        <member name="F:Colosoft.RateIncreaseType.Unit">
            <summary>
            Acréscimo de unidade
            </summary>
        </member>
        <member name="F:Colosoft.RateIncreaseType.Value">
            <summary>
            Acréscimo de valor
            </summary>
        </member>
        <member name="F:Colosoft.RateIncreaseType.UnitPercentage">
            <summary>
            Acréscimo de unidade por percentual
            </summary>
        </member>
        <member name="F:Colosoft.RateIncreaseType.ValuePercentage">
            <summary>
            Acrécimo de valor por percentual
            </summary>
        </member>
        <member name="F:Colosoft.RateIncreaseType.UnitReplace">
            <summary>
            Sustituição do número de unidades
            </summary>
        </member>
        <member name="F:Colosoft.RateIncreaseType.ValueReplace">
            <summary>
            Substituição do valor
            </summary>
        </member>
        <member name="T:Colosoft.Sex">
            <summary>
            Possíveis sexo.
            </summary>
        </member>
        <member name="F:Colosoft.Sex.None">
            <summary>
            Nenhum.
            </summary>
        </member>
        <member name="F:Colosoft.Sex.Famale">
            <summary>
            Feminino.
            </summary>
        </member>
        <member name="F:Colosoft.Sex.Male">
            <summary>
            Masculino.
            </summary>
        </member>
        <member name="T:Colosoft.WeekDayTranslateProvider">
            <summary>
            Representa o provedor de tradução do dias da semana.
            </summary>
        </member>
        <member name="T:Colosoft.Globalization.ITranslateProvider">
            <summary>
            Assinatura de um provedor de tradução.
            </summary>
        </member>
        <member name="M:Colosoft.Globalization.ITranslateProvider.GetTranslates">
            <summary>
            Recupera as traduções.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.WeekDayTranslateProvider.GetTranslates">
            <summary>
            Recupera as traduções.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Colosoft.WeekDay">
            <summary>
            Enumerador de dias da semana.
            </summary>
        </member>
        <member name="F:Colosoft.WeekDay.Sunday">
            <summary>
            Domingo.
            </summary>
        </member>
        <member name="F:Colosoft.WeekDay.Monday">
            <summary>
            Segunda.
            </summary>
        </member>
        <member name="F:Colosoft.WeekDay.Tuesday">
            <summary>
            Terça.
            </summary>
        </member>
        <member name="F:Colosoft.WeekDay.Wednesday">
            <summary>
            Quarta.
            </summary>
        </member>
        <member name="F:Colosoft.WeekDay.Thursday">
            <summary>
            Quinta.
            </summary>
        </member>
        <member name="F:Colosoft.WeekDay.Friday">
            <summary>
            Sexta.
            </summary>
        </member>
        <member name="F:Colosoft.WeekDay.Saturday">
            <summary>
            Sábado.
            </summary>
        </member>
        <member name="F:Colosoft.WeekDay.AllDays">
            <summary>
            Todos os dias.
            </summary>
        </member>
        <member name="T:Colosoft.ExceptionPropertyCollection">
            <summary>
            Implementação da coleção de propriedades de uma exception.
            </summary>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Copy(Colosoft.ExceptionPropertyCollection)">
            <summary>
            Copia os dados da coleção informada.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Copy(Colosoft.ExceptionPropertyCollection,System.Boolean)">
            <summary>
            Copia os dados da cõleção de informada.
            </summary>
            <param name="properties"></param>
            <param name="replace">True identifica se é para substituir se a propriedade já existir.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.FromXml(System.Xml.XmlReader)">
            <summary>
            Recupera os dados contidos no leitor de XML informado.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Remove(System.String)">
            <summary>
            Remove a propriedade com base no nome informado.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.Byte)">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.DateTime)">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.Byte[])">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.DateTime[])">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.Decimal[])">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.Char)">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.Decimal)">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.Guid)">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.Boolean[])">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.Double)">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.Int16)">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.Int32)">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.Double[])">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.Int64)">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.Guid[])">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.Boolean)">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.Single)">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.String)">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.Int16[])">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.Int32[])">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.Int64[])">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.Single[])">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.Set(System.String,System.String[])">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="value">Valor da propriedade.</param>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#GetEnumerator">
            <summary>
            Recupera o enumerador das propriedades.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador das propriedades.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ExceptionPropertyCollection.ToXml(System.Xml.XmlWriter,System.String)">
            <summary>
            Salva os dados para o XMLWriter informado.
            </summary>
            <param name="writer"></param>
            <param name="elementName"></param>
        </member>
        <member name="P:Colosoft.ExceptionPropertyCollection.Count">
            <summary>
            Quantidade de propriedades na coleção.
            </summary>
        </member>
        <member name="T:Colosoft.Extensions.ExportAttribute">
            <summary>
            Atributo para definição de parâmetros nas classes de customização.
            </summary>
        </member>
        <member name="M:Colosoft.Extensions.ExportAttribute.#ctor(System.String)">
            <summary>
            Construtor com inicialização do nome.
            </summary>
            <param name="exportName"></param>
        </member>
        <member name="P:Colosoft.Extensions.ExportAttribute.ExportName">
            <summary>
            Nome gerado para a exportação.
            </summary>
        </member>
        <member name="T:Colosoft.Extensions.ExportMetadataAttribute">
            <summary>
            Atributo usado para define
            </summary>
        </member>
        <member name="T:Colosoft.Extensions.IExportMetadataAttribute">
            <summary>
            Assinatura da classe que armazena os metadados do export.
            </summary>
        </member>
        <member name="M:Colosoft.Extensions.IExportMetadataAttribute.GetMetadata(System.Type)">
            <summary>
            Recupera os metadados
            </summary>
            <param name="exportType">Tipo da exportação.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Extensions.ExportMetadataAttribute.#ctor(System.String,System.String)">
            <summary>
            Cria a instancia com os valores iniciais.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Extensions.ExportMetadataAttribute.GetMetadata(System.Type)">
            <summary>
            Recupera os metadados
            </summary>
            <param name="exportType">Tipo da exportação.</param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Extensions.ExportMetadataAttribute.Name">
            <summary>
            Nome do metadado.
            </summary>
        </member>
        <member name="P:Colosoft.Extensions.ExportMetadataAttribute.Value">
            <summary>
            Valor do metadado.
            </summary>
        </member>
        <member name="T:Colosoft.Extensions.ExtensionServiceLocator">
            <summary>
            Localizador dos serviços de extensão.
            </summary>
        </member>
        <member name="M:Colosoft.Extensions.ExtensionServiceLocator.GetInstance``1(System.Int32)">
            <summary>
            Recupera a instancia da extensão.
            </summary>
            <typeparam name="TExtension"></typeparam>
            <param name="exportId">Identificador do exporta da extensão.</param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Extensions.ExtensionServiceLocator.ServiceLocator">
            <summary>
            Instancia do localizador de serviço.
            </summary>
        </member>
        <member name="P:Colosoft.Extensions.ExtensionServiceLocator.Current">
            <summary>
            Instancia corrente.
            </summary>
        </member>
        <member name="T:Colosoft.FileSystemUtil">
            <summary>
            Classe que auxilia na manipulacao dos arquivos do sistema.
            </summary>
        </member>
        <member name="M:Colosoft.FileSystemUtil.IsValidFilePath(System.String)">
            <summary>
            Verifica se o arquivo existe na localização passada
            </summary>
        </member>
        <member name="M:Colosoft.FileSystemUtil.IsFileName(System.String)">
            <summary>
            Verifica se o argumento passado representa o nome de um arquivo, entendendo que 
            ele possua informação com por exemplo de diretorio.
            </summary>
        </member>
        <member name="M:Colosoft.FileSystemUtil.IsFolder(System.String)">
            <summary>
            Verifica se o argumento passado representa um diretorio contendo informações sobre arquivos.
            </summary>
        </member>
        <member name="M:Colosoft.FileSystemUtil.IsRelativePath(System.String)">
            <summary>
            Verifica se o caminho informado é relativo ou absoluto
            </summary>
        </member>
        <member name="M:Colosoft.FileSystemUtil.CombinePathAndFileName(System.String,System.String)">
            <summary>
            Combina o nome do diretorio e do arquivo em um caminho absoluto.
            </summary>
        </member>
        <member name="M:Colosoft.FileSystemUtil.DetermineFileLocation(System.String,System.String[])">
            <summary>
            Procura por um especificado arquivo dentro das localizações passadas e retorno o primeiro arquivo encontrado.
            </summary>
        </member>
        <member name="T:Colosoft.FunctionalComparer`1">
            <summary>
            Implementação do comparador funcional.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Colosoft.FunctionalComparer`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Colosoft.FunctionalComparer`1.Create(System.Func{`0,`0,System.Int32})">
            <summary>
            Cria uma instancia do comparador.
            </summary>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.FunctionalComparer`1.Compare(`0,`0)">
            <summary>
            Compara os valor informados.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Globalization.Culture">
            <summary>
            Armazena as configurações de cultura do sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Globalization.Culture.#cctor">
            <summary>
            Construtor estático.
            </summary>
        </member>
        <member name="P:Colosoft.Globalization.Culture.InvariantEnglishUS">
            <summary>
            Cultura invariante para inglês dos Estados Unidos.
            </summary>
        </member>
        <member name="P:Colosoft.Globalization.Culture.SystemCulture">
            <summary>
            Cultura padrão do sistema.
            </summary>
        </member>
        <member name="P:Colosoft.Globalization.Culture.StringComparer">
            <summary>
            Instancia do comparador de string do sistema.
            </summary>
        </member>
        <member name="T:Colosoft.Globalization.IMultipleTranslateProvider">
            <summary>
            Assinatura de um provedor de traduções multiplas.
            </summary>
        </member>
        <member name="M:Colosoft.Globalization.IMultipleTranslateProvider.GetTranslates(System.Object)">
            <summary>
            Recupera as traduções.
            </summary>
            <param name="groupKey">Chave do grupo de tradução.</param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Globalization.TranslateInfo">
            <summary>
            Assinatura da estrutura que armazena as informação da tradução.
            </summary>
        </member>
        <member name="M:Colosoft.Globalization.TranslateInfo.#ctor(System.Object,Colosoft.IMessageFormattable)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="key"></param>
            <param name="text"></param>
        </member>
        <member name="P:Colosoft.Globalization.TranslateInfo.Value">
            <summary>
            Valor que presenta a chave.
            </summary>
        </member>
        <member name="P:Colosoft.Globalization.TranslateInfo.Key">
            <summary>
            Chave associada com a tradução.
            </summary>
        </member>
        <member name="P:Colosoft.Globalization.TranslateInfo.Text">
            <summary>
            Texto da tradução.
            </summary>
        </member>
        <member name="P:Colosoft.Globalization.TranslateInfo.Translation">
            <summary>
            Tradução do texto.
            </summary>
        </member>
        <member name="T:Colosoft.Globalization.SystemComparer">
            <summary>
            Implementação do comparador padrão do sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Globalization.SystemComparer.Compare(System.Object,System.Object)">
            <summary>
            Compara a instancia informadas.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Globalization.SystemComparer.Default">
            <summary>
            Instancia do comparador padrão.
            </summary>
        </member>
        <member name="T:Colosoft.Globalization.SystemStringComparer">
            <summary>
            Representa o comparador d string padrão do sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Globalization.SystemStringComparer.GlobalCompare(System.Object,System.Object)">
            <summary>
            Compara as instancia informadas.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Globalization.SystemStringComparer.Compare(System.String,System.String)">
            <summary>
            Compara a duas strings informadas.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Globalization.SystemStringComparer.Equals(System.String,System.String)">
            <summary>
            Verifica se as duas string informadas são iguais.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Globalization.SystemStringComparer.GetHashCode(System.String)">
            <summary>
            Recupera o hashcode da string informada.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Globalization.SystemStringComparer.Default">
            <summary>
            Instancia padrão do comparador.
            </summary>
        </member>
        <member name="T:Colosoft.IClipboard">
            <summary>
            Assinatura da classe que faz acesso a área de transferencia do sistema.
            </summary>
        </member>
        <member name="M:Colosoft.IClipboard.SetImage(Colosoft.Media.Drawing.IImage)">
            <summary>
            Define uma imagem para a área de transferência.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:Colosoft.IClipboard.SetText(System.String)">
            <summary>
            Armazena um texto Unicode na área de transferencia.
            </summary>
            <param name="text">Texto que será armazenado.</param>
        </member>
        <member name="M:Colosoft.IClipboard.SetText(System.String,Colosoft.Text.TextDataFormat)">
            <summary>
            Armazena um texto na área de transferencia.
            </summary>
            <param name="text">Texto que será armazenado.</param>
            <param name="format">Formato do texto.</param>
        </member>
        <member name="T:Colosoft.BaseClipboard">
            <summary>
            Implementação fake da área de transferencia.
            </summary>
        </member>
        <member name="M:Colosoft.BaseClipboard.SetImage(Colosoft.Media.Drawing.IImage)">
            <summary>
            Define uma imagem para a área de transferência.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:Colosoft.BaseClipboard.SetText(System.String)">
            <summary>
            Armazena um texto Unicode na área de transferencia.
            </summary>
            <param name="text">Texto que será armazenado.</param>
        </member>
        <member name="M:Colosoft.BaseClipboard.SetText(System.String,Colosoft.Text.TextDataFormat)">
            <summary>
            Armazena um texto na área de transferencia.
            </summary>
            <param name="text">Texto que será armazenado.</param>
            <param name="format">Formato do texto.</param>
        </member>
        <member name="T:Colosoft.Clipboard">
            <summary>
            Fornece acesso a área de transferencia do sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Clipboard.#cctor">
            <summary>
            Construtor estático.
            </summary>
        </member>
        <member name="P:Colosoft.Clipboard.Instance">
            <summary>
            Instancia padrão.
            </summary>
        </member>
        <member name="T:Colosoft.IEntityDescriptorStateble">
            <summary>
            Assintura da classe de EntityDescriptor que armazena o estado
            os valores atribuídos a suas propriedades.
            </summary>
        </member>
        <member name="M:Colosoft.IEntityDescriptorStateble.Contains(System.String)">
            <summary>
            Verifica se a instancia possui o campo com o nome  informado.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IEntityDescriptorStateble.GetFields">
            <summary>
            Recupera os nomes dos campos associados.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IEntityDescriptorStateble.Remove(System.String)">
            <summary>
            Remove o campo associado com o nome informado.
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:Colosoft.IEntityDescriptorStateble.Update(System.String,System.Object)">
            <summary>
            Atualiza o valor do campo. Caso não existe é adicionado.
            </summary>
            <param name="fieldName">Nome do campo.</param>
            <param name="value">Valor que será atualizado.</param>
        </member>
        <member name="P:Colosoft.IEntityDescriptorStateble.FieldsCount">
            <summary>
            Quantidade de campos registrados.
            </summary>
        </member>
        <member name="P:Colosoft.IEntityDescriptorStateble.Item(System.String)">
            <summary>
            Recuperar o valor do campo informado.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.IFindNameConverter">
            <summary>
            Contrato para conversores de nome dos objetos.
            </summary>
        </member>
        <member name="M:Colosoft.IFindNameConverter.Convert(System.Object[])">
            <summary>
            Converte as informações recebidas num nome único para a instância.
            </summary>
            <param name="baseInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.ILoadable">
            <summary>
            Contrato de objeto para carga de objeto
            </summary>
        </member>
        <member name="M:Colosoft.ILoadable.CreateLoadHandle">
            <summary>
            Cria o objeto de controle de loader
            </summary>
            <returns></returns>
        </member>
        <member name="T:Colosoft.INamedType">
            <summary>
            Assinatura das classe que possui um tipo nomeado.
            </summary>
        </member>
        <member name="P:Colosoft.INamedType.TypeName">
            <summary>
            Nome do tipo.
            </summary>
        </member>
        <member name="P:Colosoft.INamedType.InstanceDescriptor">
            <summary>
            Descritor da instância.
            </summary>
        </member>
        <member name="T:Colosoft.IO.Compression.ByteBuffer">
            <summary>
            byte[] array plus current offset.
            useful for reading/writing headers, ensuring the offset is updated correctly
            </summary>
        </member>
        <member name="T:Colosoft.IO.Compression.CompressionUtil">
            <summary>
            Classe que auxilia na compressão de dados.
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.CompressionUtil.Compress(System.Byte[],Colosoft.BitSet@)">
            <summary>
            Compacta os dados informados.
            </summary>
            <param name="value">Buffer dos dados que serão compactados.</param>
            <param name="flag">Flag que será preenchido durante a compactação.</param>
            <returns>Dados compactados.</returns>
        </member>
        <member name="M:Colosoft.IO.Compression.CompressionUtil.Compress(System.Byte[],Colosoft.BitSet@,System.Int64)">
            <summary>
            Compacta os dados informados.
            </summary>
            <param name="value">Buffer com os dados que serão compactados.</param>
            <param name="flag"></param>
            <param name="threshold">Limite dodo tamanho dos dados que serão compactados.</param>
            <returns>Dados compactados.</returns>
        </member>
        <member name="M:Colosoft.IO.Compression.CompressionUtil.Compress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compacta os dados informados.
            </summary>
            <param name="value">Buffer dos dados que serão compactados.</param>
            <param name="offset">Offset do buffer informado.</param>
            <param name="count">Quantidade de dados quer serão lidos do buffer.</param>
            <returns>Dados compactados.</returns>
        </member>
        <member name="M:Colosoft.IO.Compression.CompressionUtil.Decompress(System.Byte[])">
            <summary>
            Descompacta os dados informados.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.Compression.CompressionUtil.Decompress(System.Byte[],Colosoft.BitSet)">
            <summary>
            Descompacta os dados informados.
            </summary>
            <param name="value">Buffer onde os dados estão registrados.</param>
            <param name="flag">Flags que foram usados na compactação.</param>
            <returns>Dados descompactados.</returns>
        </member>
        <member name="M:Colosoft.IO.Compression.CompressionUtil.Decompress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Descompacta os dados informados.
            </summary>
            <param name="value"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.Compression.Crc32.Calculate(System.Byte[])">
            <summary>
            Caclulate the CRC (Cyclic Reduncancy Check) for a buffer of bytes 
            See RFC1952 for details.
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.Crc32.Calculate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Caclulate the CRC (Cyclic Reduncancy Check) for a range of bytes.
            See RFC1952 for details.
            </summary>
            <param name="buffer">The buffer of bytes where the range of bytes to checksum exist</param>
            <param name="offset">The start index of the range of bytes to checksum</param>
            <param name="length">The length of the range of bytes to checksum</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.Compression.Crc32.Calculate(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Caclulate the CRC (Cyclic Reduncancy Check) for a range of bytes 
            See RFC1952 for details.
            
            CRCs can be computed in chunks, where you take the CRC of the preceeding block of data and use
            this as the 'crc32' to compute the next chunk.  
            </summary>  
        </member>
        <member name="T:Colosoft.IO.Compression.RepairedMemoryStream">
            <summary>
            MemoryStream does not let you look at the length after it has been closed.
            so we override it here, storing the size when it is closed
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.RepairedMemoryStream.#ctor(System.Int32)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Colosoft.IO.Compression.RepairedMemoryStream.Close">
            <summary>
            Fecha a instancia.
            </summary>
        </member>
        <member name="P:Colosoft.IO.Compression.RepairedMemoryStream.Length">
            <summary>
            Tamanho.
            </summary>
        </member>
        <member name="T:Colosoft.IO.Compression.ZipArchive">
            <summary>
            ZipArchive represents a Zip Archive.  It uses the System.IO.File structure as its guide 
            
            The largest structual difference between a ZipArchive and the textStream system is that the archive has no
            independent notion of a 'directory'.  Instead files know their complete path name.  For the most
            part this difference is hard to notice, but does have some ramifications.  For example there is no
            concept of the modification time for a directory.    
            
            TODO: Opening a textStream for Read/Write without truncation. 
            TODO: Allowing different text encodings
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.#ctor(System.String)">
            <summary>
            Openes an existing ZIP archive 'archivePath' for reading.  
            </summary>
            <param name="archivePath"></param>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.#ctor(System.String,System.IO.FileAccess)">
            <summary>
            Opens a ZIP archive, 'archivePath'  If 'access' is ReadWrite or Write then the target 
            does not need to exist, but will be created with the ZipArchive is closed.  
            
            If 'access' is ReadWrite the target can exist, and that data is used to initially
            populate the archive.  Any modifications that were made will be updated when the
            Close() method is called (and not before).  
            
            If 'access' is Write then the target is either created or truncated to 0 before 
            the archive is written (thus the original data in the archiveFile is ignored).  
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.FileAccess)">
            <summary>
            Read an archive from an exiting stream or write a new archive into a stream
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.GetFilesInDirectory(System.String,System.IO.SearchOption)">
            <summary>
            Returns a subset of the files in the archive that are in the directory 'archivePath'.  If
            searchOptions is TopDirectoryOnly only files in the directory 'archivePath' are returns. 
            If searchOptions is AllDirectories then all files that are in subdiretories are also returned. 
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.OpenRead(System.String)">
            <summary>
            Open the archive textStream 'archivePath' for reading and returns the resulting Stream.
            KeyNotFoundException is thrown if 'archivePath' does not exist
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.Create(System.String)">
            <summary>
            Opens the archive textStream 'archivePath' for writing and returns the resulting Stream. If the textStream
            already exists, it is truncated to be an empty textStream.
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.Close">
            <summary>
            Closes the archive.  Until this call is made any pending modifications to the archive are NOT
            made (the archive is unchanged).  
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.Flush">
            <summary>
            Libera o conteúdo do arquivo.
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.Clear">
            <summary>
            Remove all files from the archive. 
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.Exists(System.String)">
            <summary>
            Returns true if 'archivePath' exists in the archive.  
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.Move(System.String,System.String)">
            <summary>
             Renames sourceArchivePath to destinationArchivePath.  If destinationArchivePath exists it is
             discarded.  
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.Delete(System.String)">
            <summary>
            Delete 'archivePath'.  It returns true if successful.  If archivePath does not exist, it
            simply returns false (no exception is thrown).  The delete succeeds even if streams on the
            data exists (they continue to exist, but will not be persisted on Close()
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.CopyToFile(System.String,System.String)">
            <summary>
            Copies the archive textStream 'sourceArchivePath' to the textStream system textStream 'targetFilePath'. 
            It will overwrite existing files, however a locked targetFilePath will cause an exception.  
            </summary>
            <param name="sourceArchivePath"></param>
            <param name="targetFilePath"></param>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.CopyToFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies the archive textStream 'sourceArchivePath' to the textStream system textStream 'targetFilePath'. 
            It will overwrite existing files, however a locked targetFilePath will cause an exception.  
            </summary>
            <param name="sourceArchivePath"></param>
            <param name="targetFilePath"></param>
            <param name="canOverride"></param>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.CopyFromFile(System.String,System.String)">
            <summary>
            Copyies 'sourceFilePath from the textStream system to the archive as 'targetArchivePath'
            It will overwrite any existing textStream.
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.CopyFromStream(System.IO.Stream,System.DateTime,System.String)">
            <summary>
            Copyies 'sourceFilePath from the textStream system to the archive as 'targetArchivePath'
            It will overwrite any existing textStream.
            </summary>
            <param name="stream"></param>
            <param name="lastWriteTime"></param>
            <param name="targetArchivePath"></param>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.DeleteDirectory(System.String)">
            <summary>
            Deletes all files in the directory (and subdirectories) of 'archivePath'.  
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.CopyToDirectory(System.String,System.String)">
            <summary>
            Copies (recursively the files in archive directory to a textStream system directory.
            </summary>
            <param name="sourceArchiveDirectory">The name of the source directory in the archive</param>
            <param name="targetDirectory">The target directory in the textStream system to copy to. 
            If it is empty it represents all files in the archive. </param>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.CopyToDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Copies (recursively the files in archive directory to a textStream system directory.
            </summary>
            <param name="sourceArchiveDirectory">The name of the source directory in the archive</param>
            <param name="targetDirectory">The target directory in the textStream system to copy to. 
            If it is empty it represents all files in the archive. </param>
            <param name="canOverride"></param>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.CopyFromDirectory(System.String,System.String)">
            <summary>
            Copies a directory recursively from the textStream system to the archive.  
            </summary>
            <param name="sourceDirectory">The direcotry in the textStream system to copy to the archive</param>
            <param name="targetArchiveDirectory">
            The directory in the archive to copy to.  An empty string means the top level of the archive</param>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.OpenText(System.String)">
            <summary>
            Open an existing textStream in the archive for reading as text and returns the resulting StreamReader.  
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.CreateText(System.String)">
            <summary>
            Opens a textStream in the archive for writing as a text textStream.  Returns the resulting TextWriter.  
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.ReadAllText(System.String)">
            <summary>
            Reads all the data in 'archivePath' as a text string and returns it. 
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.WriteAllText(System.String,System.String)">
            <summary>
            Overwrites the archive textStream 'archivePath' with the text in 'data'
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.ToString">
            <summary>
            Returns a string reprentation of the archive (its name if known, and count of files)
            Mostly useful in the debugger.  
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.Finalize">
            <summary>
            Destrutor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchive.Dispose">
            <summary>
            Dispose instance.
            </summary>
        </member>
        <member name="P:Colosoft.IO.Compression.ZipArchive.Files">
            <summary>
            Enumerate the files in the archive (directories don't have an independent existance).
            </summary>
        </member>
        <member name="P:Colosoft.IO.Compression.ZipArchive.Item(System.String)">
            <summary>
            Fetch a archiveFile by name.  'archivePath' is the full path name of the archiveFile in the archive.  
            It returns null if the name does not exist (and e
            </summary>
        </member>
        <member name="P:Colosoft.IO.Compression.ZipArchive.IsReadOnly">
            <summary>
            Returns true if the archive can not be written to (it was opend with FileAccess.Read). 
            </summary>
        </member>
        <member name="P:Colosoft.IO.Compression.ZipArchive.Count">
            <summary>
            Count of total number of files (does not include directories) in the archive. 
            </summary>
        </member>
        <member name="T:Colosoft.IO.Compression.ZipArchiveFile">
            <summary>
            ZipArchiveFile represents one archiveFile in the ZipArchive.   It is analogous to the System.IO.DiffFile
            object for normal files.  
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchiveFile.Create">
            <summary>
            Truncates the archiveFile represented by the ZipArchiveFile to be empty and returns a Stream that can be used
            to write (binary) data into it.
            </summary>
            <returns>A Stream that can be written on. </returns>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchiveFile.OpenRead">
            <summary>
            Opens the archiveFile represented by the ZipArchiveFile and returns a stream that can use to read (binary) data.
            </summary>
            <returns>A Stream that can be read from.</returns>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchiveFile.MoveTo(System.String)">
            <summary>
            Truncates the archiveFile represented by the ZipArchiveFile to be empty and returns a TextWriter that text
            can be written to (using the default encoding). 
            </summary>
            <returns>The TextWriter that text can be written to. </returns>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchiveFile.Delete">
            <summary>
            Delete the archiveFile represented by the ZipArchiveFile.   The textStream can be in use without conflict.
            Deleting a textStream simply means it will not be persisted when ZipArchive.Close() is called.  
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchiveFile.ToString">
            <summary>
             A text summary of the archive textStream (its name and length).  
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchiveFile.CreateText">
            <summary>
            Truncate the archive textStream and return a StreamWrite sutable for writing text to the textStream. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchiveFile.OpenText">
            <summary>
            Opens the archiveFile represented by the ZipArchiveFile and returns a stream that can use to read text.
            </summary>
            <returns>A TextReader text can be read from.</returns>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchiveFile.ReadAllText">
            <summary>
            Read all the text from the archiveFile represented by the ZipArchiveFile and return it as a string. 
            </summary>
            <returns>The string contained in the archiveFile</returns>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchiveFile.WriteAllText(System.String)">
            <summary>
            Replaces the data in the archiveFile represented by the ZipArchiveFile with the text in 'data'
            </summary>
            <param name="data">The data to replace the archiveFile data with.</param>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchiveFile.CopyToFile(System.String,System.Boolean)">
            <summary>
            Copy the data in from the 'this' ZipArchiveFile to the archive textStream named 'outputFilePath' in
            to the file system at 'outputFilePath' 
            </summary>
            <param name="outputFilePath"></param>
            <param name="canOverride">Identifica se o arquivo pode se sobrescrito.</param>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchiveFile.CopyTo(System.String)">
            <summary>
            Copy the data in archive textStream named 'inputFilePath' into the 'this' archive textStream.  (discarding
            what was there before). 
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchiveFile.WriteToStream(System.IO.Stream)">
            <summary>
            Used by ZipArchive to write the entry to the archive. 
            </summary>
            <param name="writer">The stream representing the archive to write the entry to.</param>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchiveFile.#ctor(Colosoft.IO.Compression.ZipArchive,System.String)">
            <summary>
            Create a new archive archiveFile with no data (empty).  It is expected that only ZipArchive methods will
            use this routine.  
            </summary>
        </member>
        <member name="M:Colosoft.IO.Compression.ZipArchiveFile.Read(Colosoft.IO.Compression.ZipArchive)">
            <summary>
            Reads a single archiveFile from a Zip Archive.  Should only be used by ZipArchive.  
            </summary>
            <returns>A ZipArchiveFile representing the archiveFile read from the archive.</returns>
        </member>
        <member name="P:Colosoft.IO.Compression.ZipArchiveFile.LastWriteTime">
            <summary>
            The last time the archive was updated (Create() was called).   The copy operations transfer the
            LastWriteTime from the source to the target.  
            </summary>
        </member>
        <member name="P:Colosoft.IO.Compression.ZipArchiveFile.Length">
            <summary>
            The length of the archive textStream in bytes. 
            </summary>
        </member>
        <member name="P:Colosoft.IO.Compression.ZipArchiveFile.Name">
            <summary>
            The name in the archive. 
            </summary>
        </member>
        <member name="P:Colosoft.IO.Compression.ZipArchiveFile.CheckSum">
            <summary>
            The CRC32 checksum associated with the data.  Useful for quickly determining if the data has
            changed.  
            </summary>
        </member>
        <member name="P:Colosoft.IO.Compression.ZipArchiveFile.Archive">
            <summary>
            The archive assoated with the ZipArchiveFile. 
            </summary>
        </member>
        <member name="P:Colosoft.IO.Compression.ZipArchiveFile.IsReadOnly">
            <summary>
            Returns true if the textStream can's be written (the archive is read-only.  
            </summary>
        </member>
        <member name="P:Colosoft.IO.Compression.ZipArchiveFile.DataAsText">
            <summary>
            Recupera os dados com texto.
            </summary>
        </member>
        <member name="T:Colosoft.IO.FileChecker">
            <summary>
            Classe usadao para realizar as verificações dos arquivos.
            </summary>
        </member>
        <member name="M:Colosoft.IO.FileChecker.CheckSignature(System.String,System.Int32,System.String)">
            <summary>
            Verifica a assinatura do arquivo.
            </summary>
            <param name="filePath"></param>
            <param name="signatureSize"></param>
            <param name="expectedSignature"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.FileChecker.IsPKZip(System.String)">
            <summary>
            Verifica se o arquivo informado é um zip.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.FileChecker.IsGZip(System.String)">
            <summary>
            Verifica se o arquivo informado é um GZip.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.IO.FileRepository.IFileRepository">
            <summary>
            Assinatura da classe que representa um repositório de arquivos.
            </summary>
        </member>
        <member name="M:Colosoft.IO.FileRepository.IFileRepository.QueryItems(System.String,System.String,Colosoft.IO.FileRepository.ItemType,Colosoft.IO.FileRepository.SearchOption)">
            <summary>
            Consulta os itens no repositório.
            </summary>
            <param name="path">Caminho que será pesquisa.</param>
            <param name="searchPattern">Padrão que será usada na comparação da pesquisa.</param>
            <param name="itemType">Tipo do item.</param>
            <param name="searchOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.FileRepository.IFileRepository.GetItem(System.String,Colosoft.IO.FileRepository.ItemType)">
            <summary>
            Recupera o item associado com o caminho informado.
            </summary>
            <param name="path">Caminho do item.</param>
            <param name="itemType">Tipo do item.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.FileRepository.IFileRepository.CreateFolder(System.String)">
            <summary>
            Cria um diretório.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Colosoft.IO.FileRepository.IFileRepository.Exists(System.String,Colosoft.IO.FileRepository.ItemType)">
            <summary>
            Verifica se o caminho informado existe no repositório.
            </summary>
            <param name="path">Caminho do item que será verificado.</param>
            <param name="itemType">Tipo do item que será verificado.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.FileRepository.IFileRepository.Delete(Colosoft.IO.FileRepository.IItem,System.Boolean)">
            <summary>
            Remove o item do repositório.
            </summary>
            <param name="item">Item que será removido.</param>
            <param name="recursive">Identifiac se para remove os itens filhos recursivamente.</param>
        </member>
        <member name="M:Colosoft.IO.FileRepository.IFileRepository.Move(Colosoft.IO.FileRepository.IItem,System.String)">
            <summary>
            Move o item para o caminho de destino informado.
            </summary>
            <param name="sourceItem"></param>
            <param name="destPath"></param>
        </member>
        <member name="M:Colosoft.IO.FileRepository.IFileRepository.Refresh">
            <summary>
            Atualiza os dados do repositório.
            </summary>
        </member>
        <member name="E:Colosoft.IO.FileRepository.IFileRepository.Updated">
            <summary>
            Evento acionado quando o repositório é atualizado.
            </summary>
        </member>
        <member name="T:Colosoft.IO.FileRepository.IItem">
            <summary>
            Assinatura de um item do repositório.
            </summary>
        </member>
        <member name="M:Colosoft.IO.FileRepository.IItem.OpenRead">
            <summary>
            Abre o item para leitura.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.IO.FileRepository.IItem.Name">
            <summary>
            Nome do item.
            </summary>
        </member>
        <member name="P:Colosoft.IO.FileRepository.IItem.FullName">
            <summary>
            Nome completo.
            </summary>
        </member>
        <member name="P:Colosoft.IO.FileRepository.IItem.ContentLength">
            <summary>
            Tamanho do item.
            </summary>
        </member>
        <member name="P:Colosoft.IO.FileRepository.IItem.Type">
            <summary>
            Tipo do item.
            </summary>
        </member>
        <member name="P:Colosoft.IO.FileRepository.IItem.CreationTime">
            <summary>
            Quanto o item foi criado.
            </summary>
        </member>
        <member name="P:Colosoft.IO.FileRepository.IItem.LastWriteTime">
            <summary>
            Última vez que o item foi alterado.
            </summary>
        </member>
        <member name="P:Colosoft.IO.FileRepository.IItem.CanRead">
            <summary>
            Identifica se o item tem suporte para leitura.
            </summary>
        </member>
        <member name="T:Colosoft.IO.FileRepository.ItemType">
            <summary>
            Tipo do item.
            </summary>
        </member>
        <member name="F:Colosoft.IO.FileRepository.ItemType.Any">
            <summary>
            Qualquer tipo.
            </summary>
        </member>
        <member name="F:Colosoft.IO.FileRepository.ItemType.Folder">
            <summary>
            Pasta.
            </summary>
        </member>
        <member name="F:Colosoft.IO.FileRepository.ItemType.File">
            <summary>
            Arquivo.
            </summary>
        </member>
        <member name="T:Colosoft.IO.FileRepository.Local.LocalItem">
            <summary>
            Representa um arquivo local.
            </summary>
        </member>
        <member name="M:Colosoft.IO.FileRepository.Local.LocalItem.#ctor(System.IO.FileSystemInfo)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="info">Informações do arquivo associado.</param>
        </member>
        <member name="M:Colosoft.IO.FileRepository.Local.LocalItem.OpenRead">
            <summary>
            Abre o item para leitura.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.FileRepository.Local.LocalItem.ToString">
            <summary>
            Recupera o texto que presenta a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.IO.FileRepository.Local.LocalItem.Name">
            <summary>
            Nome do item.
            </summary>
        </member>
        <member name="P:Colosoft.IO.FileRepository.Local.LocalItem.FullName">
            <summary>
            Nome completo.
            </summary>
        </member>
        <member name="P:Colosoft.IO.FileRepository.Local.LocalItem.ContentLength">
            <summary>
            Tamanho do item.
            </summary>
        </member>
        <member name="P:Colosoft.IO.FileRepository.Local.LocalItem.Type">
            <summary>
            Tipo do item.
            </summary>
        </member>
        <member name="P:Colosoft.IO.FileRepository.Local.LocalItem.CreationTime">
            <summary>
            Quanto o item foi criado.
            </summary>
        </member>
        <member name="P:Colosoft.IO.FileRepository.Local.LocalItem.LastWriteTime">
            <summary>
            Última vez que o item foi alterado.
            </summary>
        </member>
        <member name="P:Colosoft.IO.FileRepository.Local.LocalItem.CanRead">
            <summary>
            Identifica se o item tem suporte para leitura.
            </summary>
        </member>
        <member name="T:Colosoft.IO.FileRepository.Local.LocalRepository">
            <summary>
            Implementação de um repositório local.
            </summary>
        </member>
        <member name="M:Colosoft.IO.FileRepository.Local.LocalRepository.#ctor(System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="root">Diretório principal do repositório.</param>
        </member>
        <member name="M:Colosoft.IO.FileRepository.Local.LocalRepository.#ctor">
            <summary>
            Construtor para ser usado para classe filhas.
            </summary>
        </member>
        <member name="M:Colosoft.IO.FileRepository.Local.LocalRepository.OnUpdated">
            <summary>
            Método acionado quando o repositório for atualizado.
            </summary>
        </member>
        <member name="M:Colosoft.IO.FileRepository.Local.LocalRepository.GetLocalPath(System.String)">
            <summary>
            Recupera o caminho local.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.FileRepository.Local.LocalRepository.QueryItems(System.String,System.String,Colosoft.IO.FileRepository.ItemType,Colosoft.IO.FileRepository.SearchOption)">
            <summary>
            Consulta os itens no repositório.
            </summary>
            <param name="path">Caminho que será pesquisa.</param>
            <param name="searchPattern">Padrão que será usada na comparação da pesquisa.</param>
            <param name="itemType">Tipo do item.</param>
            <param name="searchOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.FileRepository.Local.LocalRepository.GetItem(System.String,Colosoft.IO.FileRepository.ItemType)">
            <summary>
            Recupera o item associado com o caminho informado.
            </summary>
            <param name="path">Caminho do item.</param>
            <param name="itemType">Tipo do item.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.FileRepository.Local.LocalRepository.CreateFolder(System.String)">
            <summary>
            Cria um diretório.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Colosoft.IO.FileRepository.Local.LocalRepository.Exists(System.String,Colosoft.IO.FileRepository.ItemType)">
            <summary>
            Verifica se o caminho informado existe no repositório.
            </summary>
            <param name="path">Caminho do item que será verificado.</param>
            <param name="itemType">Tipo do item que será verificado.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.FileRepository.Local.LocalRepository.Delete(Colosoft.IO.FileRepository.IItem,System.Boolean)">
            <summary>
            Remove o item do repositório.
            </summary>
            <param name="item">Item que será removido.</param>
            <param name="recursive">Identifiac se para remove os itens filhos recursivamente.</param>
        </member>
        <member name="M:Colosoft.IO.FileRepository.Local.LocalRepository.Move(Colosoft.IO.FileRepository.IItem,System.String)">
            <summary>
            Move o item para o caminho de destino informado.
            </summary>
            <param name="sourceItem"></param>
            <param name="destPath"></param>
        </member>
        <member name="M:Colosoft.IO.FileRepository.Local.LocalRepository.Refresh">
            <summary>
            Atualiza os dados do repositório.
            </summary>
        </member>
        <member name="E:Colosoft.IO.FileRepository.Local.LocalRepository.Updated">
            <summary>
            Evento acionado quando o repositório é atualizado.
            </summary>
        </member>
        <member name="P:Colosoft.IO.FileRepository.Local.LocalRepository.Root">
            <summary>
            Diretório raiz do repositório.
            </summary>
        </member>
        <member name="T:Colosoft.IO.FileRepository.SearchOption">
            <summary>
            Possíveis opções de pesquisa.
            </summary>
        </member>
        <member name="F:Colosoft.IO.FileRepository.SearchOption.TopDirectoryOnly">
            <summary>
            Somente o diretório do topo.
            </summary>
        </member>
        <member name="F:Colosoft.IO.FileRepository.SearchOption.AllDirectories">
            <summary>
            Todos diretórios.
            </summary>
        </member>
        <member name="T:Colosoft.IO.IItemDownloader">
            <summary>
            Assinatura da classe responsável por fazer o download de um arquivo.
            </summary>
        </member>
        <member name="M:Colosoft.IO.IItemDownloader.DownloadFile">
            <summary>
            Realiza o download do arquivo.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.IItemDownloader.DownloadFile(System.String)">
            <summary>
            Realiza o download do arquivo informado.
            </summary>
            <param name="localFileName"></param>
        </member>
        <member name="T:Colosoft.IO.InvalidPathException">
            <summary>
            Implementação de uma Exception de caminho inválido.
            </summary>
        </member>
        <member name="M:Colosoft.IO.InvalidPathException.#ctor(System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Colosoft.IO.InvalidPathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor usado na serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.IO.InvalidPathException.#ctor(System.String,System.Exception)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="T:Colosoft.IO.IsolatedStorage.IsolatedStorage">
            <summary>
            Armazena as informações do armazenamento isolado.
            </summary>
        </member>
        <member name="P:Colosoft.IO.IsolatedStorage.IsolatedStorage.ApplicationName">
            <summary>
            Nome da aplicação representada pelo IsolatedStorage.
            </summary>
        </member>
        <member name="P:Colosoft.IO.IsolatedStorage.IsolatedStorage.AuthenticationContextDirectory">
            <summary>
            Diretório isolado do o contexto da autentidação.
            </summary>
        </member>
        <member name="P:Colosoft.IO.IsolatedStorage.IsolatedStorage.SystemDirectory">
            <summary>
            Diretório do sistema.
            </summary>
        </member>
        <member name="P:Colosoft.IO.IsolatedStorage.IsolatedStorage.UserProfileDirectory">
            <summary>
            Diretório do perfil do usuário.
            </summary>
        </member>
        <member name="T:Colosoft.IO.CopyStreamCallback">
            <summary>
            Representa o callback para a escrite dos bytes.
            </summary>
            <param name="bytesWritten"></param>
        </member>
        <member name="T:Colosoft.IO.StreamUtil">
            <summary>
            Classe com métodos auxiliares para stream.
            </summary>
        </member>
        <member name="M:Colosoft.IO.StreamUtil.CopyStream(System.IO.Stream,System.IO.Stream,System.Byte[],Colosoft.IO.CopyStreamCallback)">
            <summary>
            Copia a stream da origem para o destino usando o buffer informado.
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <param name="buffer"></param>
            <param name="progressCallback"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.IO.StreamWrapper">
            <summary>
            A <see cref="T:System.IO.Stream"/> that wraps another stream. The major feature of <see cref="T:Colosoft.IO.StreamWrapper"/> is that it does not dispose the
            underlying stream when it is disposed; this is useful when using classes such as <see cref="T:System.IO.BinaryReader"/> and
            <see cref="T:System.Security.Cryptography.CryptoStream"/> that take ownership of the stream passed to their constructors.
            </summary>
        </member>
        <member name="M:Colosoft.IO.StreamWrapper.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Colosoft.IO.StreamWrapper"/> class.
            </summary>
            <param name="streamBase">The wrapped stream.</param>
        </member>
        <member name="M:Colosoft.IO.StreamWrapper.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation.
            </summary>
        </member>
        <member name="M:Colosoft.IO.StreamWrapper.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation.
            </summary>
        </member>
        <member name="M:Colosoft.IO.StreamWrapper.EndRead(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous read to complete.
            </summary>
        </member>
        <member name="M:Colosoft.IO.StreamWrapper.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation.
            </summary>
        </member>
        <member name="M:Colosoft.IO.StreamWrapper.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Colosoft.IO.StreamWrapper.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position
            within the stream by the number of bytes read.
            </summary>
        </member>
        <member name="M:Colosoft.IO.StreamWrapper.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
            </summary>
        </member>
        <member name="M:Colosoft.IO.StreamWrapper.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:Colosoft.IO.StreamWrapper.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:Colosoft.IO.StreamWrapper.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position
            within this stream by the number of bytes written.
            </summary>
        </member>
        <member name="M:Colosoft.IO.StreamWrapper.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
        </member>
        <member name="M:Colosoft.IO.StreamWrapper.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Colosoft.IO.StreamWrapper"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="E:Colosoft.IO.StreamWrapper.Disposed">
            <summary>
            Evento acionado quando a instancia for liberada.
            </summary>
        </member>
        <member name="P:Colosoft.IO.StreamWrapper.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <returns><c>true</c> if the stream supports reading; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Colosoft.IO.StreamWrapper.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns><c>true</c> if the stream supports seeking; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Colosoft.IO.StreamWrapper.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <returns><c>true</c> if the stream supports writing; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Colosoft.IO.StreamWrapper.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:Colosoft.IO.StreamWrapper.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="P:Colosoft.IO.StreamWrapper.WrappedStream">
            <summary>
            Gets the wrapped stream.
            </summary>
            <value>The wrapped stream.</value>
        </member>
        <member name="T:Colosoft.IO.BytesWrittenEventArgs">
            <summary>
            Armazena os argumentos do evento acionado quando bytes são escritos.
            </summary>
        </member>
        <member name="M:Colosoft.IO.BytesWrittenEventArgs.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="P:Colosoft.IO.BytesWrittenEventArgs.Buffer">
            <summary>
            Buffer com os dados.
            </summary>
        </member>
        <member name="P:Colosoft.IO.BytesWrittenEventArgs.Offset">
            <summary>
            Offset dos dados no buffer.
            </summary>
        </member>
        <member name="P:Colosoft.IO.BytesWrittenEventArgs.Count">
            <summary>
            Quantidade dos dados que foram escritos do buffer.
            </summary>
        </member>
        <member name="T:Colosoft.IO.BytesReadEventArgs">
            <summary>
            Armazena os argumentos do evento acionado quando bytes são lidos.
            </summary>
        </member>
        <member name="M:Colosoft.IO.BytesReadEventArgs.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="read"></param>
        </member>
        <member name="P:Colosoft.IO.BytesReadEventArgs.Buffer">
            <summary>
            Buffer com os dados.
            </summary>
        </member>
        <member name="P:Colosoft.IO.BytesReadEventArgs.Offset">
            <summary>
            Offset dos dados no buffer.
            </summary>
        </member>
        <member name="P:Colosoft.IO.BytesReadEventArgs.Read">
            <summary>
            Quantidade dos dados lidos
            </summary>
        </member>
        <member name="T:Colosoft.IO.BytesWrittenEventHandler">
            <summary>
            Assinatura do evento acionado quando bytes forem escritos.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Colosoft.IO.BytesReadEventHandler">
            <summary>
            Assinatura do evento acionado quando bytes são lidos.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Colosoft.IO.TracingStream">
            <summary>
            Implementação do Stream com rastreamento.
            </summary>
        </member>
        <member name="M:Colosoft.IO.TracingStream.#ctor(System.IO.Stream)">
            <summary>
            Cria a instancia com a stream que será adaptada.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Colosoft.IO.TracingStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Cria a instancia com a stream que será adaptada.
            </summary>
            <param name="stream"></param>
            <param name="traceContent"></param>
        </member>
        <member name="M:Colosoft.IO.TracingStream.#ctor(System.Net.HttpWebResponse,System.Boolean)">
            <summary>
            Cria a instancia para rastrear a resposta da web.
            </summary>
            <param name="response"></param>
            <param name="traceContent"></param>
        </member>
        <member name="M:Colosoft.IO.TracingStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Inicia a leitura assincrona.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.TracingStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Inicia a escrita assincrona.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.TracingStream.EndRead(System.IAsyncResult)">
            <summary>
            Finaliza a leitura da assincrona.
            </summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.TracingStream.EndWrite(System.IAsyncResult)">
            <summary>
            Finaliza a escrita assincrona.
            </summary>
            <param name="asyncResult"></param>
        </member>
        <member name="M:Colosoft.IO.TracingStream.Close">
            <summary>
            Fecha a stream.
            </summary>
        </member>
        <member name="M:Colosoft.IO.TracingStream.Flush">
            <summary>
            Flash.
            </summary>
        </member>
        <member name="M:Colosoft.IO.TracingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Lê os dados da stream.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.TracingStream.ReadByte">
            <summary>
            Lê um byte.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.TracingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Salta para a posição informada.
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.TracingStream.SetLength(System.Int64)">
            <summary>
            Define o tamanho da stream.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.IO.TracingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Escreve na stream.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Colosoft.IO.TracingStream.WriteByte(System.Byte)">
            <summary>
            Escreve um byte na stream.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.IO.TracingStream.OnBytesWritten(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Método acionado quando bytes forem escritos.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Colosoft.IO.TracingStream.OnBytesRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Método acionado quando bytes são lidos.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="read"></param>
        </member>
        <member name="M:Colosoft.IO.TracingStream.OnNumBytesWrittenUpdate">
            <summary>
            Método acionado quando a quantidade de bytes escritos for atualizada.
            </summary>
        </member>
        <member name="M:Colosoft.IO.TracingStream.OnNumBytesRead">
            <summary>
            Método acionado quando a quantidade de bytes lidos for atualizada.
            </summary>
        </member>
        <member name="E:Colosoft.IO.TracingStream.BytesWritten">
            <summary>
            Evento acionado quando bytes forem escritos.
            </summary>
        </member>
        <member name="E:Colosoft.IO.TracingStream.BytesRead">
            <summary>
            Evento acionado quando bytes são lidos.
            </summary>
        </member>
        <member name="P:Colosoft.IO.TracingStream.CanRead">
            <summary>
            Identifica se tem suporte para leitura.
            </summary>
        </member>
        <member name="P:Colosoft.IO.TracingStream.CanSeek">
            <summary>
            Identifica se tem suporte para Seek.
            </summary>
        </member>
        <member name="P:Colosoft.IO.TracingStream.CanWrite">
            <summary>
            Identifica se tem suporte para escrita.
            </summary>
        </member>
        <member name="P:Colosoft.IO.TracingStream.Length">
            <summary>
            Tamanho.
            </summary>
        </member>
        <member name="P:Colosoft.IO.TracingStream.NumBytesRead">
            <summary>
            Número de bytes já lidos.
            </summary>
        </member>
        <member name="P:Colosoft.IO.TracingStream.NumBytesWritten">
            <summary>
            Número de bytes escritos.
            </summary>
        </member>
        <member name="P:Colosoft.IO.TracingStream.Position">
            <summary>
            Posição.
            </summary>
        </member>
        <member name="T:Colosoft.IO.VirtualStorage.IStorageSync">
            <summary>
            Assinatura da classe responsável pela sincronização do
            armazenamento virtual.
            </summary>
        </member>
        <member name="M:Colosoft.IO.VirtualStorage.IStorageSync.BeginSync(System.AsyncCallback,System.Object)">
            <summary>
            Inicializa o processo de sincronização de forma assincrona.
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.VirtualStorage.IStorageSync.EndSync(System.IAsyncResult)">
            <summary>
            Finaliza o processo de sincronização de forma assincrona.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:Colosoft.IO.VirtualStorage.IStorageSync.Sync">
            <summary>
            Sincroniza dos arquivos do diretório virtual.
            </summary>
        </member>
        <member name="T:Colosoft.IO.VirtualStorage.VirtualStorageSyncFailure">
            <summary>
            Armazena os dados de uma falha do processo de sincronização.
            </summary>
        </member>
        <member name="P:Colosoft.IO.VirtualStorage.VirtualStorageSyncFailure.Message">
            <summary>
            Mensagem da falha ocorrida.
            </summary>
        </member>
        <member name="T:Colosoft.IO.VirtualStorage.VirtualStorageSyncResult">
            <summary>
            Armazena o resultado do processo de sincronização.
            </summary>
        </member>
        <member name="P:Colosoft.IO.VirtualStorage.VirtualStorageSyncResult.Success">
            <summary>
            Identifica se a sincronização foi realizada com sucesso.
            </summary>
        </member>
        <member name="P:Colosoft.IO.VirtualStorage.VirtualStorageSyncResult.Failures">
            <summary>
            Relação das falhas do resultado.
            </summary>
        </member>
        <member name="T:Colosoft.IO.VirtualStorage.LocalStorage">
            <summary>
            Gerencia os arquivos do armazenamento virtual de forma local.
            </summary>
        </member>
        <member name="M:Colosoft.IO.VirtualStorage.LocalStorage.NavigateItems(System.String)">
            <summary>
            Navega pelos itens dos diretório pai informado.
            </summary>
            <param name="parentDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.VirtualStorage.LocalStorage.GetLocalItemPath(System.String)">
            <summary>
            Recupera o caminho do item local.
            </summary>
            <param name="itemPath">Caminho do item.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.VirtualStorage.LocalStorage.GetItems">
            <summary>
            Recupera o cam
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.IO.VirtualStorage.LocalStorage.Directory">
            <summary>
            Diretório base do armazenamento local.
            </summary>
        </member>
        <member name="T:Colosoft.IO.VirtualStorage.LocalStorage.Item">
            <summary>
            Representa um item do armazenamento local.
            </summary>
        </member>
        <member name="M:Colosoft.IO.VirtualStorage.LocalStorage.Item.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="parent"></param>
            <param name="name"></param>
            <param name="isFile"></param>
        </member>
        <member name="M:Colosoft.IO.VirtualStorage.LocalStorage.Item.GetFileSystemInfo">
            <summary>
            Recupera as informações do arquivo do sistema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.VirtualStorage.LocalStorage.Item.CalculateHash">
            <summary>
            Calcula o hash do item.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.IO.VirtualStorage.LocalStorage.Item.Name">
            <summary>
            Nome do item.
            </summary>
        </member>
        <member name="P:Colosoft.IO.VirtualStorage.LocalStorage.Item.Parent">
            <summary>
            Caminho do pai do item.
            </summary>
        </member>
        <member name="P:Colosoft.IO.VirtualStorage.LocalStorage.Item.IsFile">
            <summary>
            Identifica se o item é um arquivo.
            </summary>
        </member>
        <member name="P:Colosoft.IO.VirtualStorage.LocalStorage.Item.FullName">
            <summary>
            Caminho completo do item.
            </summary>
        </member>
        <member name="T:Colosoft.IO.VirtualStorage.Storage">
            <summary>
            Implementação do armazenamento virtual.
            </summary>
        </member>
        <member name="M:Colosoft.IO.VirtualStorage.Storage.GetFilePath(System.Uri)">
            <summary>
            Recupera o caminho do arquivo com base na Uri informada.
            </summary>
            <param name="uri">URI do caminho do arquivo.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.VirtualStorage.Storage.OpenFile(System.String)">
            <summary>
            Abre o arquivo com o nome informado.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.VirtualStorage.Storage.GetFiles(System.String)">
            <summary>
            Recupera os caminhos dos arquivos contidos no armazenamento.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.VirtualStorage.Storage.GetFiles(System.String,System.String)">
            <summary>
            Recupera os caminhos dos arquivos contidos no armazenamento.
            </summary>
            <param name="path">Caminho a partir do qual serão recuperados do arquivos.</param>
            <param name="searchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.VirtualStorage.Storage.GetDirectories(System.String)">
            <summary>
            Recupera os caminhos dos diretórios contidos no armazenamento.
            </summary>
            <param name="path">Caminho a partir do qual serão recuperados os direttórios.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.VirtualStorage.Storage.GetDirectories(System.String,System.String)">
            <summary>
            Recupera os caminhos dos diretórios contidos no armazenamento.
            </summary>
            <param name="path">Caminho a partir do qual serão recuperados os direttórios.</param>
            <param name="searchPattern"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.IO.Xap.AppManifestTemplate">
            <summary>
            Gera um AppManifest.xaml.
            </summary>
        </member>
        <member name="T:Colosoft.IO.Xap.IAppManifestTemplate">
            <summary>
            Assinatura de um modle para o manifest da aplicação.
            </summary>
        </member>
        <member name="M:Colosoft.IO.Xap.IAppManifestTemplate.Generate(System.Collections.Generic.IEnumerable{System.Uri})">
            <summary>
            Gerar o documento.
            </summary>
            <param name="assemblySources"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.Xap.AppManifestTemplate.Generate(System.Collections.Generic.IEnumerable{System.Uri})">
            <summary>
            Gera o manifest para o assembly informados.
            </summary>
            <param name="assemblySources"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.IO.Xap.ConfigAppManifestTemplate">
            <summary>
            Gera um AppManifest.xaml.
            </summary>
        </member>
        <member name="M:Colosoft.IO.Xap.ConfigAppManifestTemplate.#ctor(System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="templateFileName"></param>
        </member>
        <member name="M:Colosoft.IO.Xap.ConfigAppManifestTemplate.Generate(System.Collections.Generic.IEnumerable{System.Uri})">
            <summary>
            Gera o manifest para o assembly informados.
            </summary>
            <param name="assemblySources"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.IO.Xap.AppManifestSection">
            <summary>
            Seção de configuração.
            </summary>
        </member>
        <member name="M:Colosoft.IO.Xap.AppManifestSection.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Cria uma seção.
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.IO.Xap.IXapConfiguration">
            <summary>
            Configuração do Xap.
            </summary>
        </member>
        <member name="P:Colosoft.IO.Xap.IXapConfiguration.ManifestTemplate">
            <summary>
            Recupera o modelo para o arquivo do Manifest.
            </summary>
        </member>
        <member name="P:Colosoft.IO.Xap.IXapConfiguration.Languages">
            <summary>
            Linguagens usadas na configuração.
            </summary>
        </member>
        <member name="P:Colosoft.IO.Xap.IXapConfiguration.UrlPrefix">
            <summary>
            Préfixo da url.
            </summary>
        </member>
        <member name="T:Colosoft.IO.Xap.LanguageInfo">
            <summary>
            Informações da linguagem.
            </summary>
        </member>
        <member name="M:Colosoft.IO.Xap.LanguageInfo.#ctor(System.String[],System.String[],System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="extensions"></param>
            <param name="assemblies"></param>
            <param name="languageContext"></param>
        </member>
        <member name="M:Colosoft.IO.Xap.LanguageInfo.GetContextAssemblyName">
            <summary>
            Recupera o nome do assembly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.Xap.LanguageInfo.GetExtensionsString">
            <summary>
            Recupera a string com as extensões da linguagem.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.IO.Xap.LanguageInfo.Extensions">
            <summary>
            Extensões da linguagem.
            </summary>
        </member>
        <member name="P:Colosoft.IO.Xap.LanguageInfo.Assemblies">
            <summary>
            Assemblies da linguagem.
            </summary>
        </member>
        <member name="P:Colosoft.IO.Xap.LanguageInfo.LanguageContext">
            <summary>
            Contexto da linguagem.
            </summary>
        </member>
        <member name="T:Colosoft.IO.Xap.LanguageSection">
            <summary>
            Seção de configuração para a linguagem.
            </summary>
        </member>
        <member name="M:Colosoft.IO.Xap.LanguageSection.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Cria a seção de configuração.
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.IO.Xap.LoadXapPackageAssembliesException">
            <summary>
            Reprensenta o erro ocorrido quando for carregados dos assemblies do pacote XAP.
            </summary>
        </member>
        <member name="T:Colosoft.IO.Xap.XapPackageException">
            <summary>
            Representa um erro do pacote Xap.
            </summary>
        </member>
        <member name="M:Colosoft.IO.Xap.XapPackageException.#ctor">
            <summary>
            Construtor vazio.
            </summary>
        </member>
        <member name="M:Colosoft.IO.Xap.XapPackageException.#ctor(System.String)">
            <summary>
            Cria a instancia com a mensagem.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Colosoft.IO.Xap.XapPackageException.#ctor(System.String,System.Exception)">
            <summary>
            Cria a instancia com a mensagem e o erro interno.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Colosoft.IO.Xap.LoadXapPackageAssembliesException.#ctor(System.String,Colosoft.IO.Xap.LoadXapPackageAssembliesException.AssemblyLoadError[])">
            <summary>
            Cria a instancia com a mensagem.
            </summary>
            <param name="message"></param>
            <param name="errors"></param>
        </member>
        <member name="P:Colosoft.IO.Xap.LoadXapPackageAssembliesException.Errors">
            <summary>
            Errors ocorridos.
            </summary>
        </member>
        <member name="T:Colosoft.IO.Xap.LoadXapPackageAssembliesException.AssemblyLoadError">
            <summary>
            Armazena os dados do erro ocorrido no load do assembly.
            </summary>
        </member>
        <member name="M:Colosoft.IO.Xap.LoadXapPackageAssembliesException.AssemblyLoadError.#ctor(Colosoft.Reflection.AssemblyPart,System.Exception)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="assemblyPart"></param>
            <param name="error"></param>
        </member>
        <member name="P:Colosoft.IO.Xap.LoadXapPackageAssembliesException.AssemblyLoadError.AssemblyPart">
            <summary>
            AssemblyPart.
            </summary>
        </member>
        <member name="P:Colosoft.IO.Xap.LoadXapPackageAssembliesException.AssemblyLoadError.Error">
            <summary>
            Erro ocorrido.
            </summary>
        </member>
        <member name="T:Colosoft.IO.Xap.StreamResourceInfo">
            <summary>
            Armazena as informações do recurso da stream.
            </summary>
        </member>
        <member name="M:Colosoft.IO.Xap.StreamResourceInfo.#ctor(System.IO.Stream,System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="stream"></param>
            <param name="contentType"></param>
        </member>
        <member name="P:Colosoft.IO.Xap.StreamResourceInfo.ContentType">
            <summary>
            Tipo do conteúdo.
            </summary>
        </member>
        <member name="P:Colosoft.IO.Xap.StreamResourceInfo.Stream">
            <summary>
            Stream com o conteúdo.
            </summary>
        </member>
        <member name="T:Colosoft.IO.Xap.XapBuilder">
            <summary>
            XAP file builder.
            </summary>
        </member>
        <member name="M:Colosoft.IO.Xap.XapBuilder.XapToMemory(Colosoft.IO.Xap.IXapConfiguration,System.String)">
            <summary>
            Gera o Xap para memória.
            </summary>
            <param name="configuration"></param>
            <param name="directoryName"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.Xap.XapBuilder.XapToMemory(Colosoft.IO.Xap.IXapConfiguration,Colosoft.IO.Xap.XapBuilder.XapEntry[])">
            <summary>
            Gera o Xap para memória.
            </summary>
            <param name="configuration"></param>
            <param name="entries"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.Xap.XapBuilder.XapToDisk(Colosoft.IO.Xap.IXapConfiguration,System.String,System.String)">
            <summary>
            Gera o Xap para um arquivo para disco.
            </summary>
            <param name="configuration"></param>
            <param name="directoryName"></param>
            <param name="xapfile"></param>
        </member>
        <member name="M:Colosoft.IO.Xap.XapBuilder.XapToDisk(Colosoft.IO.Xap.IXapConfiguration,Colosoft.IO.Xap.XapBuilder.XapEntry[],System.String)">
            <summary>
            Gera o Xap para um arquivo para disco.
            </summary>
            <param name="configuration"></param>
            <param name="entries"></param>
            <param name="xapfile"></param>
        </member>
        <member name="M:Colosoft.IO.Xap.XapBuilder.XapFiles(Colosoft.IO.Xap.IXapConfiguration,Colosoft.IO.Compression.ZipArchive,System.String)">
            <summary>
            Adiciona os arquivos do diretório para o zip usando o padrão Xap.
            </summary>
            <param name="configuration"></param>
            <param name="zip"></param>
            <param name="directoryName"></param>
        </member>
        <member name="M:Colosoft.IO.Xap.XapBuilder.XapFiles(Colosoft.IO.Xap.IXapConfiguration,Colosoft.IO.Compression.ZipArchive,Colosoft.IO.Xap.XapBuilder.XapEntry[])">
            <summary>
            Adiciona os arquivos do diretório para o zip usando o padrão Xap.
            </summary>
            <param name="configuration"></param>
            <param name="zip"></param>
            <param name="entries"></param>
        </member>
        <member name="M:Colosoft.IO.Xap.XapBuilder.GetManifestAssemblies(System.String)">
            <summary>
            Recupera as uris dos assemblies do arquivo AppManifest.xaml.
            </summary>
            <param name="manifestPath"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.Xap.XapBuilder.GenerateManifest(Colosoft.IO.Xap.IXapConfiguration,System.String)">
            <summary>
            Gera o AppManifest.xaml.
            </summary>
            <param name="configuration"></param>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.Xap.XapBuilder.GetLanguageAssemblies(Colosoft.IO.Xap.IXapConfiguration,System.Collections.Generic.IEnumerable{Colosoft.IO.Xap.LanguageInfo})">
            <summary>
            Recupera a lista de linguagens de assemblies que serão automaticamente adicionadas para o XAP.
            </summary>
            <param name="configuration"></param>
            <param name="langs"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.Xap.XapBuilder.GetUri(Colosoft.IO.Xap.IXapConfiguration,System.String)">
            <summary>
            Anexa o uriPrefix da configuração, a menos que o caminho seja absoluto. 
            </summary>
            <param name="configuration"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.Xap.XapBuilder.IsPathRooted(System.Uri)">
            <summary>
            Verifica se a uri é absoluta ou inicia com '/'
            (i.e. absolute uri or absolute path)
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.Xap.XapBuilder.AddAssemblies(Colosoft.IO.Compression.ZipArchive,System.String,System.Collections.Generic.IList{System.Uri})">
            <summary>
            Adiciona os assemblies com o caminho relativo para deintro do arquivo XAP.
            </summary>
            <param name="zip"></param>
            <param name="directoryName"></param>
            <param name="assemblyLocations"></param>
        </member>
        <member name="M:Colosoft.IO.Xap.XapBuilder.GenerateLanguagesConfig(Colosoft.IO.Compression.ZipArchive,System.Collections.Generic.ICollection{Colosoft.IO.Xap.LanguageInfo})">
            <summary>
            Gera o arquivo languages.config
            </summary>
            <param name="zip"></param>
            <param name="langs"></param>
        </member>
        <member name="M:Colosoft.IO.Xap.XapBuilder.FindSourceLanguages(Colosoft.IO.Xap.IXapConfiguration,System.String)">
            <summary>
            Pesquisa o diretório das aplicações para encontrar todos os arquivo compatíveis com as linguagens configuradas.
            </summary>
            <param name="configuration"></param>
            <param name="directoryName"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.Xap.XapBuilder.FindSourceLanguages(Colosoft.IO.Xap.IXapConfiguration,Colosoft.IO.Xap.XapBuilder.XapEntry[])">
            <summary>
            Pesquisa o diretório das aplicações para encontrar todos os arquivo compatíveis com as linguagens configuradas.
            </summary>
            <param name="configuration"></param>
            <param name="entries"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.IO.Xap.XapBuilder.XapEntry">
            <summary>
            Representa uma entrada do Xap.
            </summary>
        </member>
        <member name="M:Colosoft.IO.Xap.XapBuilder.XapEntry.#ctor(System.String,System.Lazy{System.IO.Stream},System.DateTime)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="name"></param>
            <param name="stream"></param>
            <param name="lastWriteTime"></param>
        </member>
        <member name="M:Colosoft.IO.Xap.XapBuilder.XapEntry.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="P:Colosoft.IO.Xap.XapBuilder.XapEntry.Name">
            <summary>
            Nome da entrada.
            </summary>
        </member>
        <member name="P:Colosoft.IO.Xap.XapBuilder.XapEntry.Stream">
            <summary>
            Stream da entrada.
            </summary>
        </member>
        <member name="P:Colosoft.IO.Xap.XapBuilder.XapEntry.LastWriteTime">
            <summary>
            Ultimo horário de escrita.
            </summary>
        </member>
        <member name="T:Colosoft.IO.Xap.XapConfiguration">
            <summary>
            Configuração do Xap.
            </summary>
        </member>
        <member name="M:Colosoft.IO.Xap.XapConfiguration.#ctor(Colosoft.IO.Xap.IAppManifestTemplate,System.Collections.Generic.IEnumerable{Colosoft.IO.Xap.LanguageInfo},System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="manifestTemplate"></param>
            <param name="languages"></param>
            <param name="urlPrefix"></param>
        </member>
        <member name="P:Colosoft.IO.Xap.XapConfiguration.ManifestTemplate">
            <summary>
            Recupera o modelo para o arquivo do Manifest.
            </summary>
        </member>
        <member name="P:Colosoft.IO.Xap.XapConfiguration.Languages">
            <summary>
            Linguagens usadas na configuração.
            </summary>
        </member>
        <member name="P:Colosoft.IO.Xap.XapConfiguration.UrlPrefix">
            <summary>
            Préfixo da url.
            </summary>
        </member>
        <member name="T:Colosoft.IO.Xap.XapPackage">
            <summary>
            Implementação de um pacote Xap.
            </summary>
        </member>
        <member name="M:Colosoft.IO.Xap.XapPackage.GetDeploymentParts(Colosoft.IO.Compression.ZipArchive)">
            <summary>
            Recupera as partes de implementação.
            </summary>
            <param name="zipArchive"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.Xap.XapPackage.GetDeploymentParts(System.IO.Stream)">
            <summary>
            Recupera as partes de implementação contidas na stream do pacote informado.
            </summary>
            <param name="packageStream"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.Xap.XapPackage.LoadPackagedAssemblies(Colosoft.Reflection.AssemblyResolverManager,System.String,System.Guid,System.IO.Stream,System.Boolean,System.AggregateException@)">
            <summary>
            Recupera os assemblies contidos na stream informada.
            </summary>
            <param name="resolverManager"></param>
            <param name="assemblyRepositoryDirectory"></param>
            <param name="packageUid">Identificador do pacote.</param>
            <param name="packageStream"></param>
            <param name="canOverride">Identifica se é para sobreescreve os arquivos.</param>
            <param name="aggregateException"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IO.Xap.XapPackage.ExtractPackageAssemblies(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Extraí dos assemblies do pacote.
            </summary>
            <param name="packageStream">Stream do pacote.</param>
            <param name="outputDirectory">Diretório de saída dos arquivos do pacote.</param>
            <param name="canOverride">Identifica se pode sobreescreve os arquivos existentes.</param>
        </member>
        <member name="M:Colosoft.IO.Xap.XapPackage.GetAssembly(System.IO.Stream,System.IO.Stream,Colosoft.Reflection.AssemblyPart)">
            <summary>
            Recupera a stream do assembly.
            </summary>
            <param name="packageStream">Stream do pacote.</param>
            <param name="assemblyStream">Stream onde será salvos os dados do assembly.</param>
            <param name="part">Part com as informações do assembly.</param>
            <return>True caso o assembly tenha sido carregado.</return>
        </member>
        <member name="T:Colosoft.Reflection.IAssemblyResolver">
            <summary>
            Assinatura da classe responsável para resolver os assemblies.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyResolver.Resolve(System.ResolveEventArgs,System.Reflection.Assembly@,System.Exception@)">
            <summary>
            Resolve as informações do assembly informado.
            </summary>
            <param name="args"></param>
            <param name="assembly">Instancia do assembly que foi resolvido.</param>
            <param name="error">Erro caso tenha ocorrido.</param>
            <returns>True para identificar que o assembly foi resolvido.</returns>
        </member>
        <member name="P:Colosoft.Reflection.IAssemblyResolver.IsValid">
            <summary>
            Identifica se a instancia está em um estado válido.
            </summary>
        </member>
        <member name="F:Colosoft.IO.Xap.XapPackage.LoadPackageAssemblyResolver._deploymentParts">
            <summary>
            Relação das partes de assemblies que pode ser carregadas.
            </summary>
        </member>
        <member name="F:Colosoft.IO.Xap.XapPackage.LoadPackageAssemblyResolver._assemblies">
            <summary>
            Dicionário dos assemblies já carregados.
            </summary>
        </member>
        <member name="M:Colosoft.IO.Xap.XapPackage.LoadPackageAssemblyResolver.#ctor(System.AppDomain,System.Collections.Generic.Dictionary{System.String,System.Reflection.Assembly},System.Collections.Generic.IEnumerable{Colosoft.Reflection.AssemblyPart},Colosoft.IO.Compression.ZipArchive,System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="appDomain"></param>
            <param name="assemblies"></param>
            <param name="deploymentParts"></param>
            <param name="zipArchive"></param>
            <param name="packageDirectory"></param>
        </member>
        <member name="M:Colosoft.IO.Xap.XapPackage.LoadPackageAssemblyResolver.Resolve(System.ResolveEventArgs,System.Reflection.Assembly@,System.Exception@)">
            <summary>
            Resolve o assembly informado.
            </summary>
            <param name="args"></param>
            <param name="assembly"></param>
            <param name="error">Erro ocorrido</param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.IO.Xap.XapPackage.LoadPackageAssemblyResolver.IsValid">
            <summary>
            Identifica se a instancia está em um estado válido.
            </summary>
        </member>
        <member name="T:Colosoft.IPropertiesContainer">
            <summary>
            Assinatura do container com a relação dos nomes das propriedade alteradas.
            </summary>
        </member>
        <member name="M:Colosoft.IPropertiesContainer.ContainsProperty(System.String)">
            <summary>
            Verifica se o container possui a propriedade com o nome informado.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.IPropertiesContainer.PropertyNames">
            <summary>
            Nome das propriedades associadas.
            </summary>
        </member>
        <member name="T:Colosoft.IRegisterPropertyChanged">
            <summary>
            Assinatura das classe que possuiem suporte para registro de alteração
            do valor da propriedade.
            </summary>
        </member>
        <member name="M:Colosoft.IRegisterPropertyChanged.RegistrerPropertyChanged(System.String)">
            <summary>
            Registra que a propriedade foi alterada.
            </summary>
            <param name="propertyName">Nome da propriedade.</param>
        </member>
        <member name="T:Colosoft.IServerData">
            <summary>
            Interface responsável por assinatura de métodos que buscam informações no servidor
            </summary>
        </member>
        <member name="M:Colosoft.IServerData.GetDateTime">
            <summary>
            Recupera a data e hora local do servidor
            </summary>
            <returns>Data e hora</returns>
        </member>
        <member name="M:Colosoft.IServerData.GateDateTimeOffSet">
            <summary>
            Recupera a data e hora local do servidor com o offset
            </summary>
            <returns></returns>
        </member>
        <member name="T:Colosoft.ITypeDefinition">
            <summary>
            Assinatura de classe que contém definição de tipo.
            </summary>
        </member>
        <member name="P:Colosoft.ITypeDefinition.TypeName">
            <summary>
            Nome do tipo.
            </summary>
        </member>
        <member name="P:Colosoft.ITypeDefinition.TypeNamespace">
            <summary>
            Espaço de novo do tipo.
            </summary>
        </member>
        <member name="P:Colosoft.ITypeDefinition.TypeAssembly">
            <summary>
            Nome do assembly do tipo.
            </summary>
        </member>
        <member name="T:Colosoft.TypeDefinitionComparer">
            <summary>
            Implementação do comparador da definição de tipo.
            </summary>
        </member>
        <member name="M:Colosoft.TypeDefinitionComparer.GetTypeDefinitionString(Colosoft.ITypeDefinition)">
            <summary>
            Recupera a string que representa a definição do tipo.
            </summary>
            <param name="typeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.TypeDefinitionComparer.Compare(Colosoft.ITypeDefinition,Colosoft.ITypeDefinition)">
            <summary>
            Compara duas instancia da definição do tipo.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.TypeDefinitionComparer.Equals(Colosoft.ITypeDefinition,Colosoft.ITypeDefinition)">
            <summary>
            Verifica se os valores informados são iguais.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.TypeDefinitionComparer.GetHashCode(Colosoft.ITypeDefinition)">
            <summary>
            HashCode.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.IUriManager">
            <summary>
            Assinatura da classe responsável por realizar o gerenciamento das Uris.
            </summary>
        </member>
        <member name="M:Colosoft.IUriManager.GetApplicationStream(System.Uri)">
            <summary>
            Obtém uma Stream do recurso a partir da sua URI.
            </summary>
            <param name="uri">URI do recurso.</param>
            <returns>Stream do recurso.</returns>
            <example>
            Absolute Pack - Resource File: "pack://application:,,,/Folder/File.bin"
            Absolute Pack - Content File: "pack://application:,,,/Folder/File.bin"
            Relative - (Resource -> Pack Content -> Pack Resource) Resource: "/Folder/Resource.bin"
            </example>
        </member>
        <member name="M:Colosoft.IUriManager.GetRemoteStream(System.Uri)">
            <summary>
            Obtém uma Stream do recurso a partir da sua URI.
            </summary>
            <param name="uri">URI do recurso.</param>
            <returns>Stream do recurso.</returns>
            <example>
            Absolute Pack - Site of Origin File: "pack://siteoforigin:,,,/Folder/File.bin"
            Relative Pack - Site of Origin File: "/Folder/Resource.bin"
            </example>
        </member>
        <member name="M:Colosoft.IUriManager.GetPackZipStream(System.Uri,System.Reflection.Assembly)">
            <summary>
            Obtém uma Stream do recurso a partir da sua URI.
            </summary>
            <param name="uri">URI do recurso.</param>
            <param name="assembly">Assembly padrão.</param>
            <returns>Stream do recurso.</returns>
            <example>
            Absolute Pack - Zip File: "pack://zip:,,,C:\\Folder\\Package.package/Folder/File.bin"
            Relative - (Resource -> Pack Content -> Pack Resource -> Pack Site of Origin) Zip File: "pack://zip:,,,Folder\\Resource.package/Folder/File.bin"
            </example>
        </member>
        <member name="M:Colosoft.IUriManager.GetStream(System.Uri)">
            <summary>
            Obtém um Stream do recurso a partir da sua URI.
            </summary>
            <param name="uri">URI do recurso.</param>
            <returns>Stream do recurso.</returns>
        </member>
        <member name="T:Colosoft.UriManager">
            <summary>
            Classe de acesso ao UriManager.
            </summary>
        </member>
        <member name="P:Colosoft.UriManager.Current">
            <summary>
            Instancia do gerenciador de Uri do sistema.
            </summary>
        </member>
        <member name="T:Colosoft.IWarningNotification">
            <summary>
            Assinatura de classe que contém notificação de aviso.
            </summary>
        </member>
        <member name="M:Colosoft.IWarningNotification.GetWarnings">
            <summary>
            Recupera os avisos.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Colosoft.LambdaComparer`1">
            <summary>
            Implementação do comparador que usa expressões lambda para comparação.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Colosoft.LambdaComparer`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
            Cria a instancia tendo uma expressão de compraração e ignorando o cálculo de hash.
            </summary>
            <param name="lambdaComparer"></param>
        </member>
        <member name="M:Colosoft.LambdaComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Cria a instancia tendo um expressão de compraração e de calculo da hash.
            </summary>
            <param name="lambdaComparer"></param>
            <param name="lambdaHash"></param>
        </member>
        <member name="M:Colosoft.LambdaComparer`1.Equals(`0,`0)">
            <summary>
            Verifica se as duas instancias informadas são iguais.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.LambdaComparer`1.GetHashCode(`0)">
            <summary>
            Calcula o hash do tipo informado.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Lock.ILockable">
            <summary>
            Contrato para objetos que serão locados pelo sistema.
            </summary>
        </member>
        <member name="P:Colosoft.Lock.ILockable.Uid">
            <summary>
            Identificador único do objeto.
            </summary>
        </member>
        <member name="P:Colosoft.Lock.ILockable.RowVersion">
            <summary>
            Versão do objeto a locar.
            </summary>
        </member>
        <member name="P:Colosoft.Lock.ILockable.ModelType">
            <summary>
            Tipo do modelo de dados.
            </summary>
        </member>
        <member name="P:Colosoft.Lock.ILockable.IsLockedToEdit">
            <summary>
            Indica que a instância está locada para edição.
            </summary>
        </member>
        <member name="T:Colosoft.Lock.LockType">
            <summary>
            Enumerador com os tipos de lock possíveis.
            </summary>
        </member>
        <member name="F:Colosoft.Lock.LockType.ToUse">
            <summary>
            Loca um objeto para usá-lo.
            </summary>
        </member>
        <member name="F:Colosoft.Lock.LockType.ToEdit">
            <summary>
            Loca um objeto para editá-lo.
            </summary>
        </member>
        <member name="T:Colosoft.Lock.ILockProcess">
            <summary>
            Contrato para classes que controlarão o processo de lock.
            </summary>
        </member>
        <member name="M:Colosoft.Lock.ILockProcess.Lock(Colosoft.Lock.LockSession,System.String,System.String,Colosoft.Lock.Lockable,System.Int32,System.String)">
            <summary>
            Bloqueia a inatância.
            </summary>
            <param name="session">Sessão do lock</param>
            <param name="token">token que irá bloquear</param>
            <param name="hostName">Nome do host</param>
            <param name="lockableObject"></param>
            <param name="lockType">tipo do bloqueio</param>
            <param name="lockGroup">Grupo do lock</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Lock.ILockProcess.UnLock(System.String,System.String,Colosoft.Lock.Lockable,System.Int32)">
            <summary>
            Desbloqueia a inatância.
            </summary>
            <param name="token">token que irá desbloquear</param>
            <param name="hostName">Nome do host</param>
            <param name="lockableObject"></param>
            <param name="lockType">tipo do bloqueio</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Lock.ILockProcess.IsLocked(Colosoft.Lock.Lockable)">
            <summary>
            Verifica se uma instância está bloqueada.
            </summary>
            <param name="lockableObject"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Lock.ILockProcess.KillLockSession(Colosoft.Lock.LockSession)">
            <summary>
            Mata os locksde uma sessão.
            </summary>
            <param name="session">Sessão do lock</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Lock.ILockProcess.IsLockedToMe(Colosoft.Lock.Lockable,System.String)">
            <summary>
            Indica se a instância está locada para o usuáqui.
            </summary>
            <param name="lockableObject"></param>
            <param name="tokenId"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Lock.ILockProcess.CreateTransaction(Colosoft.Enums.LockTransactionType,System.String)">
            <summary>
            Cria uma transação de lock.
            </summary>
            <param name="type">Tipo da transação de lock</param>
            <param name="token">Token que inicia a transação.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Lock.ILockProcess.RegisterLock(System.String,Colosoft.Lock.LockSession,System.String,Colosoft.Lock.Lockable,System.Int32,System.String)">
            <summary>
            Registra a solicitação de bloqueio da inatância.
            </summary>
            <param name="session">Sessão do lock</param>
            <param name="hostName">Nome do host</param>
            <param name="lockableObject"></param>
            <param name="lockType">tipo do bloqueio</param>
            <param name="transaction">Identificador únido da transação</param>
            <param name="lockGroup">Grupo do lock</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Lock.ILockProcess.RegisterUnlock(System.String,System.String,Colosoft.Lock.Lockable,System.Int32)">
            <summary>
            Registra a solicitação de desbloqueio da inatância.
            </summary>
            <param name="hostName">Nome do host</param>
            <param name="lockableObject"></param>
            <param name="lockType">tipo do bloqueio</param>
            <param name="transaction">Identificador únido da transação</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Lock.ILockProcess.ProcessTransaction(System.String)">
            <summary>
            Processa uma transação do bloqueio/desbloqueio.
            </summary>
            <param name="transaction">Identificador únido da transação</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Lock.ILockProcess.KillLockGroup(System.String)">
            <summary>
            Mata um grupo do locks.
            </summary>
            <param name="lockGroup"></param>
        </member>
        <member name="T:Colosoft.Lock.IRegisterLockProcess">
            <summary>
            Assinatura da classe que controla os registros de lock.
            </summary>
        </member>
        <member name="M:Colosoft.Lock.IRegisterLockProcess.RegisterLock(System.String)">
            <summary>
            Registra lock para a sessão informada.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:Colosoft.Lock.IRegisterLockProcess.UnRegisterLock(System.String)">
            <summary>
            Desregistra lock para a sessão informada.
            </summary>
            <param name="session"></param>
        </member>
        <member name="T:Colosoft.Lock.KillLockProcessResult">
            <summary>
            Armazena os dados do resultado da operação de 
            </summary>
        </member>
        <member name="M:Colosoft.Lock.KillLockProcessResult.#ctor">
            <summary>
            Construtor vazio.
            </summary>
        </member>
        <member name="M:Colosoft.Lock.KillLockProcessResult.#ctor(System.Boolean,System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="success">Identifica se a operação foi realizada com suceso.</param>
            <param name="message">Mensagem gerada na operação.</param>
        </member>
        <member name="P:Colosoft.Lock.KillLockProcessResult.Success">
            <summary>
            Identifica se a operação foi realizada com sucesso.
            </summary>
        </member>
        <member name="P:Colosoft.Lock.KillLockProcessResult.Message">
            <summary>
            Mensagem associada com o resultado a operação.
            </summary>
        </member>
        <member name="T:Colosoft.Lock.Lock">
            <summary>
            Classe para o tratamento do lock.
            </summary>
        </member>
        <member name="P:Colosoft.Lock.Lock.Instance">
            <summary>
            Instância da implementação padrão de ILockProcess
            </summary>
        </member>
        <member name="T:Colosoft.Lock.Lockable">
            <summary>
            Classe do objeto locado.
            </summary>
        </member>
        <member name="M:Colosoft.Lock.Lockable.#ctor(System.Boolean,System.String,System.Int64,System.Int32)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="isLockedToEdit"></param>
            <param name="modelType"></param>
            <param name="rowVersion"></param>
            <param name="uid"></param>
        </member>
        <member name="P:Colosoft.Lock.Lockable.IsLockedToEdit">
            <summary>
            Verifica se pode ser locado ou não o objecto.
            </summary>
        </member>
        <member name="P:Colosoft.Lock.Lockable.ModelType">
            <summary>
            Tipo de dado.
            </summary>
        </member>
        <member name="P:Colosoft.Lock.Lockable.RowVersion">
            <summary>
            Versão.
            </summary>
        </member>
        <member name="P:Colosoft.Lock.Lockable.Uid">
            <summary>
            Identificador.
            </summary>
        </member>
        <member name="P:Colosoft.Lock.Lockable.RealObject">
            <summary>
            Objeto real a ser locado.
            </summary>
        </member>
        <member name="T:Colosoft.Lock.LockProcessManager">
            <summary>
            Classe responsável por gerencia o processo de lock.
            </summary>
        </member>
        <member name="P:Colosoft.Lock.LockProcessManager.LockProcess">
            <summary>
            Recupera a instancia geral do processo de lock.
            </summary>
        </member>
        <member name="P:Colosoft.Lock.LockProcessManager.RegisterLockProcess">
            <summary>
            Instancia do registrador de processos de lock.
            </summary>
        </member>
        <member name="T:Colosoft.Lock.LockProcessResultType">
            <summary>
            Tipos de retorno de um processo de locar ou desalocar um objeto.
            </summary>
        </member>
        <member name="F:Colosoft.Lock.LockProcessResultType.Success">
            <summary>
            Sucesso.
            </summary>
        </member>
        <member name="F:Colosoft.Lock.LockProcessResultType.InvalidVersion">
            <summary>
            Objeto com versão inválida.
            </summary>
        </member>
        <member name="F:Colosoft.Lock.LockProcessResultType.LackingLock">
            <summary>
            Loque inexistente.
            </summary>
        </member>
        <member name="F:Colosoft.Lock.LockProcessResultType.InvalidToken">
            <summary>
            Token inválido.
            </summary>
        </member>
        <member name="F:Colosoft.Lock.LockProcessResultType.InstanceLocked">
            <summary>
            Instância já bloqueada.
            </summary>
        </member>
        <member name="F:Colosoft.Lock.LockProcessResultType.Error">
            <summary>
            Erro.
            </summary>
        </member>
        <member name="T:Colosoft.Lock.LockProcessResult">
            <summary>
            Representa o resultado de um processo de bloqueio.
            </summary>
        </member>
        <member name="P:Colosoft.Lock.LockProcessResult.ProcessResult">
            <summary>
            Tipo do retorno.
            </summary>
        </member>
        <member name="P:Colosoft.Lock.LockProcessResult.Message">
            <summary>
            Mensagem retornada.
            </summary>
        </member>
        <member name="P:Colosoft.Lock.LockProcessResult.Session">
            <summary>
            Lista de identificadores de lock afetadas pelo comando.
            </summary>
        </member>
        <member name="T:Colosoft.Lock.LockSession">
            <summary>
            Representa uma sessão de lock.
            </summary>
        </member>
        <member name="M:Colosoft.Lock.LockSession.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Lock.LockSession.#ctor(System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="sessionUid"></param>
        </member>
        <member name="P:Colosoft.Lock.LockSession.SessionUid">
            <summary>
            Identificador único da sessão.
            </summary>
        </member>
        <member name="P:Colosoft.Lock.LockSession.IsEmpty">
            <summary>
            Indica se a sessão está vazia.
            </summary>
        </member>
        <member name="T:Colosoft.Logging.AggregateLogger">
            <summary>
            Implementação de um logger agregado.
            </summary>
        </member>
        <member name="T:Colosoft.Logging.ILogger">
            <summary>
            Interface das classes responsáveis por registrar o log.
            </summary>
        </member>
        <member name="M:Colosoft.Logging.ILogger.Error(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma messagem de erro.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.ILogger.Error(Colosoft.IMessageFormattable,Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de erro.
            </summary>
            <param name="module">Modulo da mensagem que será registrada.</param>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.ILogger.Error(Colosoft.IMessageFormattable,System.Exception)">
            <summary>
            Registra uma mensagem de erro.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
            <param name="exception">Erro corrido.</param>
        </member>
        <member name="M:Colosoft.Logging.ILogger.Fatal(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem e erro fatal.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.ILogger.Fatal(Colosoft.IMessageFormattable,System.Exception)">
            <summary>
            Registra uma mensagem e erro fatal.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
            <param name="exception">Erro corrido.</param>
        </member>
        <member name="M:Colosoft.Logging.ILogger.Debug(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de debug.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.ILogger.Warn(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de alerta.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.ILogger.Info(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de informação.
            </summary>
            <param name="message">Mensagem que será regitrada.</param>
        </member>
        <member name="M:Colosoft.Logging.ILogger.CriticalInfo(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de informação crítica.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.ILogger.CriticalInfo(Colosoft.IMessageFormattable,Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de informação crítica.
            </summary>
            <param name="module">Modulo da mensagem que será registrada.</param>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.ILogger.Write(Colosoft.IMessageFormattable,Colosoft.Logging.Category,Colosoft.Logging.Priority)">
            <summary>
            Escreve uma nova entrada de log com uma categoria e prioridade especificada.
            </summary>
            <param name="message">Mensagem do corpo do log.</param>
            <param name="category">Categoria da entrada.</param>
            <param name="priority">Prioridade da entrada.</param>
            <returns>True se o log foi salvo com sucesso.</returns>
        </member>
        <member name="M:Colosoft.Logging.ILogger.Write(Colosoft.IMessageFormattable,System.Exception,Colosoft.Logging.Priority)">
            <summary>
            Escreve uma nava entrada de log do tipo de Exception.
            </summary>
            <param name="message">Mensagem do corpo do log.</param>
            <param name="exception">Instancia da exception ocorrida.</param>
            <param name="priority">Prioridade do log.</param>
            <returns>True se o log foi salvo com sucesso.</returns>
        </member>
        <member name="M:Colosoft.Logging.ILogger.SetLevel(System.String)">
            <summary>
            Define o nível do log.
            </summary>
            <param name="level">Descritivo do nível.</param>
        </member>
        <member name="P:Colosoft.Logging.ILogger.IsDebugEnabled">
            <summary>
            Identifica se o debug está abilitado.
            </summary>
        </member>
        <member name="P:Colosoft.Logging.ILogger.IsErrorEnabled">
            <summary>
            Identifica se o error está abilitado.
            </summary>
        </member>
        <member name="P:Colosoft.Logging.ILogger.IsFatalEnabled">
            <summary>
            Identifica se o erro fatal está abilitado
            </summary>
        </member>
        <member name="P:Colosoft.Logging.ILogger.IsInfoEnabled">
            <summary>
            Identifica se informações estão abilitadas
            </summary>
        </member>
        <member name="P:Colosoft.Logging.ILogger.IsWarnEnabled">
            <summary>
            Identifica se o Warning está abilitado.
            </summary>
        </member>
        <member name="M:Colosoft.Logging.AggregateLogger.Error(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma messagem de erro.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.AggregateLogger.Error(Colosoft.IMessageFormattable,Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de erro.
            </summary>
            <param name="module">Modulo da mensagem que será registrada.</param>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.AggregateLogger.Error(Colosoft.IMessageFormattable,System.Exception)">
            <summary>
            Registra uma mensagem de erro.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
            <param name="exception">Erro corrido.</param>
        </member>
        <member name="M:Colosoft.Logging.AggregateLogger.Fatal(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem e erro fatal.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.AggregateLogger.Fatal(Colosoft.IMessageFormattable,System.Exception)">
            <summary>
            Registra uma mensagem e erro fatal.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
            <param name="exception">Erro corrido.</param>
        </member>
        <member name="M:Colosoft.Logging.AggregateLogger.Debug(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de debug.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.AggregateLogger.Warn(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de alerta.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.AggregateLogger.Info(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de informação.
            </summary>
            <param name="message">Mensagem que será regitrada.</param>
        </member>
        <member name="M:Colosoft.Logging.AggregateLogger.CriticalInfo(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de informação crítica.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.AggregateLogger.CriticalInfo(Colosoft.IMessageFormattable,Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de informação crítica.
            </summary>
            <param name="module">Modulo da mensagem que será registrada.</param>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.AggregateLogger.Write(Colosoft.IMessageFormattable,Colosoft.Logging.Category,Colosoft.Logging.Priority)">
            <summary>
            Escreve uma nova entrada de log com uma categoria e prioridade especificada.
            </summary>
            <param name="message">Mensagem do corpo do log.</param>
            <param name="category">Categoria da entrada.</param>
            <param name="priority">Prioridade da entrada.</param>
            <returns>True se o log foi salvo com sucesso.</returns>
        </member>
        <member name="M:Colosoft.Logging.AggregateLogger.Write(Colosoft.IMessageFormattable,System.Exception,Colosoft.Logging.Priority)">
            <summary>
            Escreve uma nava entrada de log do tipo de Exception.
            </summary>
            <param name="message">Mensagem do corpo do log.</param>
            <param name="exception">Instancia da exception ocorrida.</param>
            <param name="priority">Prioridade do log.</param>
            <returns>True se o log foi salvo com sucesso.</returns>
        </member>
        <member name="M:Colosoft.Logging.AggregateLogger.SetLevel(System.String)">
            <summary>
            Define o nível do log.
            </summary>
            <param name="level">Descritivo do nível.</param>
        </member>
        <member name="P:Colosoft.Logging.AggregateLogger.Loggers">
            <summary>
            Loggers agregados.
            </summary>
        </member>
        <member name="P:Colosoft.Logging.AggregateLogger.IsDebugEnabled">
            <summary>
            Identifica se o debug está abilitado.
            </summary>
        </member>
        <member name="P:Colosoft.Logging.AggregateLogger.IsErrorEnabled">
            <summary>
            Identifica se o error está abilitado.
            </summary>
        </member>
        <member name="P:Colosoft.Logging.AggregateLogger.IsFatalEnabled">
            <summary>
            Identifica se o erro fatal está abilitado
            </summary>
        </member>
        <member name="P:Colosoft.Logging.AggregateLogger.IsInfoEnabled">
            <summary>
            Identifica se informações estão abilitadas
            </summary>
        </member>
        <member name="P:Colosoft.Logging.AggregateLogger.IsWarnEnabled">
            <summary>
            Identifica se o Warning está abilitado.
            </summary>
        </member>
        <member name="T:Colosoft.Logging.ConsoleLogger">
            <summary>
            Classe que implementa o logger para o console de Debug.
            </summary>
        </member>
        <member name="T:Colosoft.Logging.LoggerBase">
            <summary>
            Implementação básico do logger.
            </summary>
        </member>
        <member name="M:Colosoft.Logging.LoggerBase.Error(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma message de erro.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.LoggerBase.Error(Colosoft.IMessageFormattable,Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de erro.
            </summary>
            <param name="module">Modulo da mensagem que será registrada.</param>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.LoggerBase.Error(Colosoft.IMessageFormattable,System.Exception)">
            <summary>
            Registra uma mensagem de erro.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
            <param name="exception">Erro corrido.</param>
        </member>
        <member name="M:Colosoft.Logging.LoggerBase.Fatal(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem e erro fatal.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.LoggerBase.Fatal(Colosoft.IMessageFormattable,System.Exception)">
            <summary>
            Registra uma mensagem e erro fatal.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
            <param name="exception">Erro corrido.</param>
        </member>
        <member name="M:Colosoft.Logging.LoggerBase.Debug(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de debug.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.LoggerBase.Warn(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de alerta.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.LoggerBase.Info(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de informação.
            </summary>
            <param name="message">Messagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.LoggerBase.CriticalInfo(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de informação crítica.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.LoggerBase.CriticalInfo(Colosoft.IMessageFormattable,Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de informação crítica.
            </summary>
            <param name="module">Modulo da mensagem que será registrada.</param>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.LoggerBase.SetLevel(System.String)">
            <summary>
            Define o nível do log.
            </summary>
            <param name="level">Descritivo do nível.</param>
        </member>
        <member name="M:Colosoft.Logging.LoggerBase.Write(Colosoft.IMessageFormattable,Colosoft.Logging.Category,Colosoft.Logging.Priority)">
            <summary>
            Escreve uma nova entrada de log com uma categoria e prioridade especificada.
            </summary>
            <param name="message">Mensagem do corpo do log.</param>
            <param name="category">Categoria da entrada.</param>
            <param name="priority">Prioridade da entrada.</param>
            <returns>True se o log foi salvo com sucesso.</returns>
        </member>
        <member name="M:Colosoft.Logging.LoggerBase.Write(Colosoft.IMessageFormattable,System.Exception,Colosoft.Logging.Priority)">
            <summary>
            Escreve uma nava entrada de log do tipo de Exception.
            </summary>
            <param name="message">Mensagem do corpo do log.</param>
            <param name="exception">Instancia da exception ocorrida.</param>
            <param name="priority">Prioridade do log.</param>
            <returns>True se o log foi salvo com sucesso.</returns>
        </member>
        <member name="P:Colosoft.Logging.LoggerBase.IsDebugEnabled">
            <summary>
            Identifica se o debug está abilitado.
            </summary>
        </member>
        <member name="P:Colosoft.Logging.LoggerBase.IsErrorEnabled">
            <summary>
            Identifica se o error está abilitado.
            </summary>
        </member>
        <member name="P:Colosoft.Logging.LoggerBase.IsFatalEnabled">
            <summary>
            Identifica se o erro fatal está abilitado
            </summary>
        </member>
        <member name="P:Colosoft.Logging.LoggerBase.IsInfoEnabled">
            <summary>
            Identifica se informações estão abilitadas
            </summary>
        </member>
        <member name="P:Colosoft.Logging.LoggerBase.IsWarnEnabled">
            <summary>
            Identifica se o Warning está abilitado.
            </summary>
        </member>
        <member name="M:Colosoft.Logging.ConsoleLogger.Write(Colosoft.IMessageFormattable,Colosoft.Logging.Category,Colosoft.Logging.Priority)">
            <summary>
            Escreve uma nova entrada de log com uma categoria e prioridade especificada.
            </summary>
            <param name="message">Mensagem do corpo do log.</param>
            <param name="category">Categoria da entrada.</param>
            <param name="priority">Prioridade da entrada.</param>
            <returns>True se o log foi salvo com sucesso.</returns>
        </member>
        <member name="M:Colosoft.Logging.ConsoleLogger.Write(Colosoft.IMessageFormattable,System.Exception,Colosoft.Logging.Priority)">
            <summary>
            Escreve uma nava entrada de log do tipo de Exception.
            </summary>
            <param name="message">Mensagem do corpo do log.</param>
            <param name="exception">Instancia da exception ocorrida.</param>
            <param name="priority">Prioridade do log.</param>
            <returns>True se o log foi salvo com sucesso.</returns>
        </member>
        <member name="T:Colosoft.MaskFormat">
            <summary>
            Formatos EasyComm
            </summary>
        </member>
        <member name="F:Colosoft.MaskFormat.Separator">
            <summary>
            Caractere fixo
            </summary>
        </member>
        <member name="F:Colosoft.MaskFormat.Escape">
            <summary>
            Caractere de escape
            </summary>
        </member>
        <member name="F:Colosoft.MaskFormat.Digit">
            <summary>
            [0-9].
            </summary>
        </member>
        <member name="F:Colosoft.MaskFormat.DigitOption">
            <summary>
            [0-9] ou espaço.
            </summary>
        </member>
        <member name="F:Colosoft.MaskFormat.Ascii">
            <summary>
            [A-Za-z].
            </summary>
        </member>
        <member name="F:Colosoft.MaskFormat.AsciiOption">
            <summary>
            [A-Za-z] ou espaço.
            </summary>
        </member>
        <member name="F:Colosoft.MaskFormat.Unicode">
            <summary>
            Qualquer caractere exceto espaço.
            </summary>
        </member>
        <member name="F:Colosoft.MaskFormat.UnicodeOption">
            <summary>
            Qualquer caractere.
            </summary>
        </member>
        <member name="F:Colosoft.MaskFormat.AlphaNumeric">
            <summary>
            [A-Za-z0-9].
            </summary>
        </member>
        <member name="F:Colosoft.MaskFormat.AlphaNumericOption">
            <summary>
            [A-Za-z0-9] ou espaço.
            </summary>
        </member>
        <member name="F:Colosoft.MaskFormat.Fractional">
            <summary>
            Separador de fracionários.
            </summary>
        </member>
        <member name="F:Colosoft.MaskFormat.Thousands">
            <summary>
            Separador de milhares.
            </summary>
        </member>
        <member name="F:Colosoft.MaskFormat.Lowercase">
            <summary>
            Os caracteres seguintes serão convertidos para minúsculos.
            </summary>
        </member>
        <member name="F:Colosoft.MaskFormat.Uppercase">
            <summary>
            Os caracteres seguintes serão convertdos para maiúsculas.
            </summary>
        </member>
        <member name="T:Colosoft.MaskCase">
            <summary>
            Valores para definições de maiúsculas/minúsculas.
            </summary>
        </member>
        <member name="F:Colosoft.MaskCase.Normal">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:Colosoft.MaskCase.Lower">
            <summary>
            Minúsculas.
            </summary>
        </member>
        <member name="F:Colosoft.MaskCase.Upper">
            <summary>
            Maiúsculas.
            </summary>
        </member>
        <member name="T:Colosoft.GroupFormat">
            <summary>
            Formato associado a uma máscara completa.
            </summary>
        </member>
        <member name="F:Colosoft.GroupFormat.Empty">
            <summary>
            Sem formato definido.
            </summary>
        </member>
        <member name="F:Colosoft.GroupFormat.Free">
            <summary>
            Caracteres diversos.
            </summary>
        </member>
        <member name="F:Colosoft.GroupFormat.Numeric">
            <summary>
            Somente dígitos.
            </summary>
        </member>
        <member name="F:Colosoft.GroupFormat.Alphabetic">
            <summary>
            Somente letras do alfabeto.
            </summary>
        </member>
        <member name="F:Colosoft.GroupFormat.AlphaNumeric">
            <summary>
            Somente letras ou dígitos.
            </summary>
        </member>
        <member name="T:Colosoft.FormatToken">
            <summary>
            Item de definição de formato.
            </summary>
        </member>
        <member name="M:Colosoft.FormatToken.IsValid(System.Char,System.Char)">
            <summary>
            Indica se o caractere é válido na posição do token.
            </summary>
            <param name="value"></param>
            <param name="whitespace"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.FormatToken.#ctor(System.Char,Colosoft.MaskCase)">
            <summary>
            Construtor parametrizado.
            </summary>
            <param name="value"></param>
            <param name="itemCase"></param>
        </member>
        <member name="M:Colosoft.FormatToken.#ctor(System.Char,Colosoft.MaskFormat,Colosoft.MaskCase)">
            <summary>
            Construtor parametrizado.
            </summary>
            <param name="value"></param>
            <param name="format"></param>
            <param name="itemCase"></param>
        </member>
        <member name="M:Colosoft.FormatToken.ToString">
            <summary>
            Exibição da instância como texto.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.FormatToken.GetHashCode">
            <summary>
            Obtém o código hash associado com a instância.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.FormatToken.Equals(System.Object)">
            <summary>
            Determina se os objetos são iguais.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.FormatToken.Format">
            <summary>
            O formato associado.
            </summary>
        </member>
        <member name="P:Colosoft.FormatToken.ItemCase">
            <summary>
            O formato maiúsculas/minúsculas associado.
            </summary>
        </member>
        <member name="P:Colosoft.FormatToken.Value">
            <summary>
            O valor do caractere na posição.
            </summary>
        </member>
        <member name="P:Colosoft.FormatToken.IsRequired">
            <summary>
            Indica se o item representa uma posição de preenchimento obrigatório.
            </summary>
        </member>
        <member name="P:Colosoft.FormatToken.IsOptional">
            <summary>
            Indica se o item representa uma posição de preenchimento opcional.
            </summary>
        </member>
        <member name="P:Colosoft.FormatToken.IsFillable">
            <summary>
            Indica se o item representa uma posição que é possível preencher.
            </summary>
        </member>
        <member name="P:Colosoft.FormatToken.IsSeparator">
            <summary>
            Indica se o item representa um caractere fixo no formato.
            </summary>
        </member>
        <member name="P:Colosoft.FormatToken.IsAlphaNumeric">
            <summary>
            Indica se o item representa um caractere alfanumérico.
            </summary>
        </member>
        <member name="P:Colosoft.FormatToken.IsUpperCase">
            <summary>
            Indica se o item está com formato de maiúsculas selecionado.
            </summary>
        </member>
        <member name="P:Colosoft.FormatToken.IsLowerCase">
            <summary>
            Indica se o item está com formato de minúsculas selecionado.
            </summary>
        </member>
        <member name="P:Colosoft.FormatToken.IsNormalCase">
            <summary>
            Indica se o item não tem formato maiúsculas/minúsculas selecionado.
            </summary>
        </member>
        <member name="T:Colosoft.FormatMask">
            <summary>
            Especificação completa de máscara.
            </summary>
        </member>
        <member name="M:Colosoft.FormatMask.CountToFill(System.Int32)">
            <summary>
            Conta o número de posições passíveis de preenchimento a partir do índice fornecido.
            </summary>
            <param name="fromIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.FormatMask.IsAppliedTo(System.String,System.Char)">
            <summary>
            Indica se o valor está corretamente formatado.
            </summary>
            <param name="value"></param>
            <param name="whitespace"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.FormatMask.FormatValue(System.String,System.Char)">
            <summary>
            Formata o valor.
            </summary>
            <param name="input"></param>
            <param name="padding"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.FormatMask.FormatWithOptional(System.String,System.Char)">
            <summary>
            Formata um valor que pode conter espaços nas posições não requeridas.
            </summary>
            <param name="input"></param>
            <param name="padding"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.FormatMask.IsIncompleteValue(System.String)">
            <summary>
            Detecta se o valor não é capaz de preencher todas as posições requeridas
            do formato. Valores vazios são considerados válidos.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.FormatMask.ClearValue(System.String,System.Char)">
            <summary>
            Remove a formatação do valor.
            </summary>
            <param name="input"></param>
            <param name="whitespace"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.FormatMask.ClearWithOptional(System.String,System.Char)">
            <summary>
            Limpa o formato do valor mantendo espaços nas posições opcionais não preenchidas.
            </summary>
            <param name="input"></param>
            <param name="padding"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.FormatMask.#ctor(System.String)">
            <summary>
            Construtor parametrizado.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Colosoft.FormatMask.ToString">
            <summary>
            Exibição da instância como texto.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.FormatMask.GetHashCode">
            <summary>
            Obtém o código hash associado com a instância.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.FormatMask.Equals(System.Object)">
            <summary>
            Determina se os objetos são iguais.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.FormatMask.Content">
            <summary>
            O valor original da máscara;
            </summary>
        </member>
        <member name="P:Colosoft.FormatMask.Tokens">
            <summary>
            Os componentes da máscara.
            </summary>
        </member>
        <member name="P:Colosoft.FormatMask.Format">
            <summary>
            O formato associado ao grupo de tokens.
            </summary>
        </member>
        <member name="P:Colosoft.FormatMask.Required">
            <summary>
            Tokens com preenchimento obrigatório com suas respectivas posições.
            </summary>
        </member>
        <member name="P:Colosoft.FormatMask.Fillable">
            <summary>
            Tokens passíveis de preenchimento com suas respectivas posições.
            </summary>
        </member>
        <member name="P:Colosoft.FormatMask.Separators">
            <summary>
            Retorna uma sequência dos caracteres fixos com suas respectivas posições.
            </summary>
        </member>
        <member name="P:Colosoft.FormatMask.FillableCount">
            <summary>
            Número de posições passíveis de preenchimento.
            </summary>
        </member>
        <member name="P:Colosoft.FormatMask.InitialValue">
            <summary>
            O valor inicial da máscara.
            </summary>
        </member>
        <member name="P:Colosoft.FormatMask.IsEmpty">
            <summary>
            Indica se a máscara não possui formato.
            </summary>
        </member>
        <member name="P:Colosoft.FormatMask.Empty">
            <summary>
            Máscara vazia.
            </summary>
        </member>
        <member name="T:Colosoft.MaskedValue">
            <summary>
            Classe que encapsula a formatação de um valor com máscara.
            </summary>
        </member>
        <member name="M:Colosoft.MaskedValue.#ctor(System.String,System.Char)">
            <summary>
            Construtor especificando a máscara e o caractere de preenchimento.
            </summary>
            <param name="mask"></param>
            <param name="padding"></param>
        </member>
        <member name="P:Colosoft.MaskedValue.Mask">
            <summary>
            A máscara a ser aplicada ao valor.
            </summary>
        </member>
        <member name="P:Colosoft.MaskedValue.Content">
            <summary>
            O valor contendo apenas os caracteres que não sejam formatadores
            e os possíveis espaços em branco para posições opcionais.
            </summary>
        </member>
        <member name="P:Colosoft.MaskedValue.Padding">
            <summary>
            O caractere a ser utilizado como indicador de posição não preenchida.
            </summary>
        </member>
        <member name="P:Colosoft.MaskedValue.ClearContent">
            <summary>
            Caso não seja uma máscara de formato liver, retorna o valor sem os espaços para campos opcionais.
            Em caso contrário, retorna o valor do conteúdo sem alteração.
            </summary>
        </member>
        <member name="P:Colosoft.MaskedValue.FormattedContent">
            <summary>
            O valor formatado pela máscara.
            </summary>
        </member>
        <member name="T:Colosoft.MaskFormatExtensions">
            <summary>
            Extensões para formatos.
            </summary>
        </member>
        <member name="M:Colosoft.MaskFormatExtensions.IsRequired(Colosoft.MaskFormat)">
            <summary>
            Identifica se a posição tem preenchimento obrigatório.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.MaskFormatExtensions.IsOptional(Colosoft.MaskFormat)">
            <summary>
            Indica se o formato é de preenchimento opcional.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.MaskFormatExtensions.IsPositionToFill(Colosoft.MaskFormat)">
            <summary>
            Indica a possibilidade da posição ser preenchida.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.MaskFormatExtensions.IsSeparator(Colosoft.MaskFormat)">
            <summary>
            Indica se o formato é um caractere fixo.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.MaskFormatExtensions.GetFormatChar(Colosoft.MaskFormat)">
            <summary>
            Recupera o caractere indicador de formato para exibição.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.MaskFormatExtensions.IsAlphaNumeric(Colosoft.MaskFormat)">
            <summary>
            Indicador de formato alfanumérico.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.MaskFormatExtensions.GetGroupFormat(Colosoft.MaskFormat)">
            <summary>
            Recupera o formato de grupo definido pelo item de formato.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.CharMaskExtensions">
            <summary>
            Extensões para caracteres.
            </summary>
        </member>
        <member name="M:Colosoft.CharMaskExtensions.GetMaskFormat(System.Char)">
            <summary>
            Recupera a definição de formato associada ao caractere.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CharMaskExtensions.IsNumeric(System.Char)">
            <summary>
            Indica se se trata de um dígito.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CharMaskExtensions.IsAlphabetic(System.Char,Colosoft.MaskCase)">
            <summary>
            Indica se se trata de um caractere no intervalo A a Z.
            </summary>
            <param name="instance"></param>
            <param name="itemCase"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CharMaskExtensions.IsAlphaNumeric(System.Char,Colosoft.MaskCase)">
            <summary>
            Indica se se trata de um caractere do alfabeto ou de dígito.
            </summary>
            <param name="instance"></param>
            <param name="itemCase"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.CharMaskExtensions.IsCaseMatch(System.Char,Colosoft.MaskCase)">
            <summary>
            Determina se o item atende a especificação de maiísculas/minúsculas fornecida.
            </summary>
            <param name="instance"></param>
            <param name="itemCase"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.GroupFormatExtensions">
            <summary>
            Extensões para formato de grupo.
            </summary>
        </member>
        <member name="M:Colosoft.GroupFormatExtensions.IsFreeFormat(Colosoft.GroupFormat)">
            <summary>
            Indica se o formato é livre.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.GroupFormatExtensions.IsNumericFormat(Colosoft.GroupFormat)">
            <summary>
            Indica se o formato é numérico.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.GroupFormatExtensions.IsAlphabeticFormat(Colosoft.GroupFormat)">
            <summary>
            Indica se o formato de letras do alfabeto.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.GroupFormatExtensions.IsAlphaNumericFormat(Colosoft.GroupFormat)">
            <summary>
            Indica se o formato de caracteres alfanuméricos.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.StringMaskExtensions">
            <summary>
            Extensões para strings.
            </summary>
        </member>
        <member name="M:Colosoft.StringMaskExtensions.Exchange(System.String,System.Char,System.Char)">
            <summary>
            Troca as ocorrências do primeiro caractere pelo segundo e vice-versa.
            </summary>
            <param name="instance"></param>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.StringMaskExtensions.MultiReplace(System.String,System.String,System.Char)">
            <summary>
            Substitui todas as ocrrências de caracteres da string de valores pelo caractere de substituição.
            </summary>
            <param name="instance"></param>
            <param name="values"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.StringMaskExtensions.MultiRemove(System.String,System.String)">
            <summary>
            Remove as ocorrências dos caracteres o valor parâmetro da instância.
            </summary>
            <param name="instance"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.StringMaskExtensions.Strip(System.String,Colosoft.GroupFormat)">
            <summary>
            Retorna apenas os caracteres alfanuméricos da instância.
            </summary>
            <param name="instance"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.StringMaskExtensions.LimitTo(System.String,System.Int32)">
            <summary>
            Limita o tamanho do valor retornado a um número de caracteres inferior
            ao parâmetro fornecido.
            </summary>
            <param name="instance"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.StringMaskExtensions.GetEasyCommMask(System.String)">
            <summary>
            Transforma a string para o formato aceito pelo EasyComm.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.StringMaskExtensions.DateFormatToEasyCommMask(System.String)">
            <summary>
            Converte um formato de data personalizado do CLR por um formato do EasyComm.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.StringMaskExtensions.IndexOfNotEscaped(System.String,System.Char,System.Char)">
            <summary>
            Recupera o índice do primeiro caractere igual ao fornecido que não seja precedido
            por um caractere de escape.
            </summary>
            <param name="instance"></param>
            <param name="value"></param>
            <param name="escape"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.StringMaskExtensions.GetMaskContent(System.String)">
            <summary>
            Elimina caracteres de marcação e escape para deixar a máscara apenas com definições
            que permitam identificar se um valor tem o formato correto.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.StringMaskExtensions.GetMaskIntialValue(System.String)">
            <summary>
            Recupera o valor inicial definido em uma máscara (se existir).
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.StringMaskExtensions.GetTokens(System.String,System.Char,System.Char)">
            <summary>
            Decomposição da máscara em elementos.
            </summary>
            <param name="instance"></param>
            <param name="fractional"></param>
            <param name="thousands"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.StringMaskExtensions.GetMask(System.String)">
            <summary>
            Recupera a definição de máscara a partir de seu valor textual.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Media.Drawing.IImage">
            <summary>
            Assinatura de uma classe de imagem.
            </summary>
        </member>
        <member name="M:Colosoft.Media.Drawing.IImage.Save(System.IO.Stream,Colosoft.Media.Drawing.Imaging.ImageFormat)">
            <summary>
            Salva a imagem na <see cref="T:System.IO.Stream"/> usando o formato informado.
            </summary>
            <param name="stream">Stream onde a imagem será salva.</param>
            <param name="imageFormat">Formato da imagens que será salva.</param>
        </member>
        <member name="P:Colosoft.Media.Drawing.IImage.Width">
            <summary>
            Obtém a largura do bitmap.
            </summary>
        </member>
        <member name="P:Colosoft.Media.Drawing.IImage.Height">
            <summary>
            Obtém a altura do bitmap.
            </summary>
        </member>
        <member name="T:Colosoft.Media.Drawing.IImageConverter">
            <summary>
            Assinatura da classe responsável por converter um valor de um <see cref="T:Colosoft.Media.Drawing.IImage"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Media.Drawing.IImageConverter.IsCompatible(System.Object)">
            <summary>
            Verifica se o valor informado é valido para ser convertido em um <see cref="T:Colosoft.Media.Drawing.IImage"/>.
            </summary>
            <param name="value">Valor que será verificado.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Media.Drawing.IImageConverter.Convert(System.Object)">
            <summary>
            Converter o valor informado em um <see cref="T:Colosoft.Media.Drawing.IImage"/>.
            </summary>
            <param name="value">Valor que será convertido.</param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Media.Drawing.ImageHeader">
            <summary>
            Taken from http://stackoverflow.com/questions/111345/getting-image-dimensions-without-reading-the-entire-file/111349
            Minor improvements including supporting unsigned 16-bit integers when decoding Jfif and added logic
            to load the image using new Bitmap if reading the headers fails
            </summary>
        </member>
        <member name="M:Colosoft.Media.Drawing.ImageHeader.GetDimensions(System.String)">
            <summary>        
            Gets the dimensions of an image.        
            </summary>        
            <param name="path">The path of the image to get the dimensions of.</param>        
            <returns>The dimensions of the specified image.</returns>        
            <exception cref="T:System.ArgumentException">The image was of an unrecognised format.</exception>        
        </member>
        <member name="M:Colosoft.Media.Drawing.ImageHeader.GetDimensions(System.IO.BinaryReader)">
            <summary>        
            Gets the dimensions of an image.        
            </summary>
            <param name="binaryReader"></param>
            <returns>The dimensions of the specified image.</returns>        
            <exception cref="T:System.ArgumentException">The image was of an unrecognised format.</exception>            
        </member>
        <member name="M:Colosoft.Media.Drawing.ImageHeader.StartsWith(System.Byte[],System.Byte[])">
            <summary>
            Verifica se os bytes começam com o informado.
            </summary>
            <param name="thisBytes"></param>
            <param name="thatBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Media.Drawing.ImageHeader.ReadLittleEndianInt16(System.IO.BinaryReader)">
            <summary>
            Lê o valor Int16 usndo LittleEndian.
            </summary>
            <param name="binaryReader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Media.Drawing.ImageHeader.ReadLittleEndianUInt16(System.IO.BinaryReader)">
            <summary>
            Lê o valor UInt16 usndo LittleEndian.
            </summary>
            <param name="binaryReader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Media.Drawing.ImageHeader.ReadLittleEndianInt32(System.IO.BinaryReader)">
            <summary>
            Lê o valor Int32 usndo LittleEndian.
            </summary>
            <param name="binaryReader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Media.Drawing.ImageHeader.DecodeBitmap(System.IO.BinaryReader)">
            <summary>
            Decodifica o tamanho do Bitmap.
            </summary>
            <param name="binaryReader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Media.Drawing.ImageHeader.DecodeGif(System.IO.BinaryReader)">
            <summary>
            Decodifica o tamanho do Gif.
            </summary>
            <param name="binaryReader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Media.Drawing.ImageHeader.DecodePng(System.IO.BinaryReader)">
            <summary>
            Decofica o tamanho do Png.
            </summary>
            <param name="binaryReader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Media.Drawing.ImageHeader.DecodeJfif(System.IO.BinaryReader)">
            <summary>
            Decodifica o tamanho do Jpeg.
            </summary>
            <param name="binaryReader"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Media.Drawing.ImageProvider">
            <summary>
            Classe que prover acesso a elementos de image.
            </summary>
        </member>
        <member name="M:Colosoft.Media.Drawing.ImageProvider.#ctor">
            <summary>
            Construtor privado.
            </summary>
        </member>
        <member name="M:Colosoft.Media.Drawing.ImageProvider.GetImageFormat(System.String)">
            <summary>
            Recupera o formato de imagem com base na extensão do arquivo informada.
            </summary>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Media.Drawing.ImageProvider.Add(Colosoft.Media.Drawing.IImageConverter)">
            <summary>
            Adiciona um conversor para a instancia.
            </summary>
            <param name="converter"></param>
        </member>
        <member name="M:Colosoft.Media.Drawing.ImageProvider.Remove(Colosoft.Media.Drawing.IImageConverter)">
            <summary>
            Remove o converter.
            </summary>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Media.Drawing.ImageProvider.Convert(System.Object)">
            <summary>
            Converte o valor informado em uma <see cref="T:Colosoft.Media.Drawing.IImage"/>.
            </summary>
            <param name="value">Valor que será convertido.</param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Media.Drawing.ImageProvider.Instance">
            <summary>
            Instancia única do provider.
            </summary>
        </member>
        <member name="P:Colosoft.Media.Drawing.ImageProvider.Converters">
            <summary>
            Relação dos converters da instancia.
            </summary>
        </member>
        <member name="T:Colosoft.Media.Drawing.Imaging.ImageFormat">
            <summary>
            Formatos de imagem suportados.
            </summary>
        </member>
        <member name="F:Colosoft.Media.Drawing.Imaging.ImageFormat.Bmp">
            <summary>
            Recupera o formato Bitmap (BMP).
            </summary>
        </member>
        <member name="F:Colosoft.Media.Drawing.Imaging.ImageFormat.Gif">
            <summary>
            Recupera o formato Graphics Interchange Format (GIF).
            </summary>
        </member>
        <member name="F:Colosoft.Media.Drawing.Imaging.ImageFormat.Jpeg">
            <summary>
            Recupera o formato Joint Photographic Experts Group (JPEG). 
            </summary>
        </member>
        <member name="F:Colosoft.Media.Drawing.Imaging.ImageFormat.Png">
            <summary>
            Recupera o formato W3C Portable Network Graphics (PNG).
            </summary>
        </member>
        <member name="F:Colosoft.Media.Drawing.Imaging.ImageFormat.Tiff">
            <summary>
            Recupera o formato Tagged Image File Format (TIFF).
            </summary>
        </member>
        <member name="F:Colosoft.Media.Drawing.Imaging.ImageFormat.Wmp">
            <summary>
            Recupera o formato Microsoft Windows Media Photo.
            </summary>
        </member>
        <member name="T:Colosoft.Media.Drawing.ResizeResult">
            <summary>
            Representa o resultado do redimensionamento.
            </summary>
        </member>
        <member name="M:Colosoft.Media.Drawing.ResizeResult.#ctor(System.Double,System.Double)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="P:Colosoft.Media.Drawing.ResizeResult.IsEmpty">
            <summary>
            Identifica se o tamanho está vazio.
            </summary>
        </member>
        <member name="P:Colosoft.Media.Drawing.ResizeResult.Width">
            <summary>
            Largura.
            </summary>
        </member>
        <member name="P:Colosoft.Media.Drawing.ResizeResult.Height">
            <summary>
            Altura.
            </summary>
        </member>
        <member name="T:Colosoft.Media.Drawing.Resizer">
            <summary>
            Classe com métodos para auxiliar no redimensionamento de imagens.
            </summary>
        </member>
        <member name="M:Colosoft.Media.Drawing.Resizer.Resize(System.Double,System.Double,System.Double,System.Double,System.Single)">
            <summary>
            Recupera o tamanho da imagem.
            </summary>
            <param name="width"></param>
            <param name="maxHeight"></param>
            <param name="maxWidth"></param>
            <param name="height"></param>
            <param name="percentual"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Media.Drawing.Size">
            <summary>
            Armazena um tamanho.
            </summary>
        </member>
        <member name="M:Colosoft.Media.Drawing.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Colosoft.Media.Drawing.Size.op_Addition(Colosoft.Media.Drawing.Size,Colosoft.Media.Drawing.Size)">
            <summary>
            Soma os tamanhos.
            </summary>
            <param name="sz1"></param>
            <param name="sz2"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Media.Drawing.Size.op_Subtraction(Colosoft.Media.Drawing.Size,Colosoft.Media.Drawing.Size)">
            <summary>
            Subtraí os tamanhos.
            </summary>
            <param name="sz1"></param>
            <param name="sz2"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Media.Drawing.Size.op_Equality(Colosoft.Media.Drawing.Size,Colosoft.Media.Drawing.Size)">
            <summary>
            Compara os tamanhos.
            </summary>
            <param name="sz1"></param>
            <param name="sz2"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Media.Drawing.Size.op_Inequality(Colosoft.Media.Drawing.Size,Colosoft.Media.Drawing.Size)">
            <summary>
            Verifica se os tamanhos são diferentes.
            </summary>
            <param name="sz1"></param>
            <param name="sz2"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Media.Drawing.Size.Add(Colosoft.Media.Drawing.Size,Colosoft.Media.Drawing.Size)">
            <summary>
            Soma os tamanhos.
            </summary>
            <param name="sz1"></param>
            <param name="sz2"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Media.Drawing.Size.Subtract(Colosoft.Media.Drawing.Size,Colosoft.Media.Drawing.Size)">
            <summary>
            Subtraí os tamanhos.
            </summary>
            <param name="sz1"></param>
            <param name="sz2"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Media.Drawing.Size.Equals(System.Object)">
            <summary>
            Verifica se a instancia informada é igual atual.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Media.Drawing.Size.GetHashCode">
            <summary>
            Recupera o HashCode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Media.Drawing.Size.ToString">
            <summary>
            Recupera o texto que representa a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Media.Drawing.Size.IsEmpty">
            <summary>
            Identifica se o tamanho está vazio.
            </summary>
        </member>
        <member name="P:Colosoft.Media.Drawing.Size.Width">
            <summary>
            Largura.
            </summary>
        </member>
        <member name="P:Colosoft.Media.Drawing.Size.Height">
            <summary>
            Altura.
            </summary>
        </member>
        <member name="T:Colosoft.MessageFormattable">
            <summary>
            Implementação base da interface <see cref="T:Colosoft.IMessageFormattable"/>.
            </summary>
        </member>
        <member name="T:Colosoft.IMessageFormattable">
            <summary>
            Assinatura das classes responsáveis por formatar mensagens.
            </summary>
        </member>
        <member name="M:Colosoft.IMessageFormattable.Format">
            <summary>
            Formata a mensagem.
            </summary>
            <returns>Texto da mensagem formatada.</returns>
        </member>
        <member name="M:Colosoft.IMessageFormattable.Format(System.Globalization.CultureInfo)">
            <summary>
            Formata a mensagem na cultura informada.
            </summary>
            <param name="culture">Cultura que será usada na formatação.</param>
            <returns>Texto da mensagem formatada.</returns>
        </member>
        <member name="M:Colosoft.IMessageFormattable.Format(System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Formata a mensagem na cultura informada usando os parametros.
            </summary>
            <param name="culture">Cultura que será usada na formatação.</param>
            <param name="parameters">Parametros que serão usados na formatação.</param>
            <returns>Texto da mensagem formatada.</returns>
        </member>
        <member name="M:Colosoft.IMessageFormattable.Join(System.String,Colosoft.IMessageFormattable)">
            <summary>
            Junta a mensagem com outra.
            </summary>
            <param name="separator">Separador que será usado.</param>
            <param name="message">Mensagem que será anexada.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.IMessageFormattable.Matches(System.Globalization.CultureInfo)">
            <summary>
            Retorna um valor indicando se a linguagem da descrição 
            da suporte a cultura informada.
            </summary>
            <param name="culture">Instancia da cultura que será comparado com a linguagem da mensagem.</param>
            <returns></returns>
        </member>
        <member name="F:Colosoft.MessageFormattable.Empty">
            <summary>
            Mensagem vazia.
            </summary>
        </member>
        <member name="M:Colosoft.MessageFormattable.#ctor(Colosoft.MessageFormattable.Message[],System.Object[])">
            <summary>
            Construtor padrão.
            </summary>
            <param name="messages"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Colosoft.MessageFormattable.Join(System.String,Colosoft.IMessageFormattable)">
            <summary>
            Junta a mensagem com outra.
            </summary>
            <param name="separator">Separador que será usado.</param>
            <param name="message">Mensagem que será anexada.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.MessageFormattable.Colosoft#IMessageFormattable#Format">
            <summary>
            Formata a mensagem.
            </summary>
            <returns>Texto da mensagem formatada.</returns>
        </member>
        <member name="M:Colosoft.MessageFormattable.Colosoft#IMessageFormattable#Format(System.Globalization.CultureInfo)">
            <summary>
            Formata a mensagem na cultura informada.
            </summary>
            <param name="culture">Cultura que será usada na formatação.</param>
            <returns>Texto da mensagem formatada.</returns>
        </member>
        <member name="M:Colosoft.MessageFormattable.Format(System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Formata a mensagem na cultura informada usando os parametros.
            </summary>
            <param name="culture">Cultura que será usada na formatação.</param>
            <param name="parameters">Parametros que serão usados na formatação.</param>
            <returns>Texto da mensagem formatada.</returns>
        </member>
        <member name="M:Colosoft.MessageFormattable.Matches(System.Globalization.CultureInfo)">
            <summary>
            Retorna um valor indicando se a linguagem da descrição 
            da suporte a cultura informada.
            </summary>
            <param name="culture">Instancia da cultura que será comparado com a linguagem da mensagem.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.MessageFormattable.Equals(Colosoft.IMessageFormattable)">
            <summary>
            Verifica se as instancia são equivalentes
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.MessageFormattable.Message">
            <summary>
            Armazena os dados de uma mensagem.
            </summary>
        </member>
        <member name="M:Colosoft.MessageFormattable.Message.#ctor(System.String,System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="text"></param>
            <param name="cultureInfo"></param>
        </member>
        <member name="M:Colosoft.MessageFormattable.Message.Format(System.Object[])">
            <summary>
            Formata a mensagem.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.MessageFormattable.Message.Text">
            <summary>
            Texto da mensagem.
            </summary>
        </member>
        <member name="P:Colosoft.MessageFormattable.Message.CultureInfo">
            <summary>
            Cultura associada.
            </summary>
        </member>
        <member name="T:Colosoft.Net.AggregateDownloaderObserver">
            <summary>
            Implementação de um agregador do observador.
            </summary>
        </member>
        <member name="M:Colosoft.Net.AggregateDownloaderObserver.OnDoWork(System.Object)">
            <summary>
            Acionado quando o trabalho de atualização é iniciado.
            </summary>
        </member>
        <member name="M:Colosoft.Net.AggregateDownloaderObserver.OnDownloadProgressChanged(Colosoft.Net.DownloadProgressChangedEventArgs)">
            <summary>
            Define o progresso do download de dados.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Net.AggregateDownloaderObserver.OnDownloadCompleted(Colosoft.Net.DownloadCompletedEventArgs)">
            <summary>
            Acionado quando o download é finalizado.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Net.AggregateDownloaderObserver.OnDisposed">
            <summary>
            Acionado quando a instancia do atualizador for liberada.
            </summary>
        </member>
        <member name="T:Colosoft.Net.AggregateUploaderObserver">
            <summary>
            Agregador dos observadores do Uploader.
            </summary>
        </member>
        <member name="M:Colosoft.Net.AggregateUploaderObserver.OnDoWork(System.Object)">
            <summary>
            Acionado quando o trabalho de atualização é iniciado.
            </summary>
        </member>
        <member name="M:Colosoft.Net.AggregateUploaderObserver.OnProgressChanged(Colosoft.Net.UploadProgressChangedEventArgs)">
            <summary>
            Define o progresso do download de dados.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Net.AggregateUploaderObserver.OnCompleted(Colosoft.Net.UploadCompletedEventArgs)">
            <summary>
            Acionado quando o download é finalizado.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Colosoft.Net.CommunicationExceptionDetails">
            <summary>
            Armazena os detalhes da exception ocorrida.
            </summary>
        </member>
        <member name="M:Colosoft.Net.CommunicationExceptionDetails.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Net.CommunicationExceptionDetails.#ctor(System.Exception)">
            <summary>
            Cria uma instancia com base nos dados da Exception informada.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Colosoft.Net.CommunicationExceptionDetails.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Cria uma instancia com os dados iniciais.
            </summary>
            <param name="message"></param>
            <param name="stackTrace"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:Colosoft.Net.CommunicationExceptionDetails.Message">
            <summary>
            Mensagem.
            </summary>
        </member>
        <member name="P:Colosoft.Net.CommunicationExceptionDetails.StackTrace">
            <summary>
            Pilha da rastreamento.
            </summary>
        </member>
        <member name="P:Colosoft.Net.CommunicationExceptionDetails.InnerException">
            <summary>
            InnerException
            </summary>
        </member>
        <member name="T:Colosoft.Net.DownloadCompletedEventHandler">
            <summary>
            Representa os evento acionado quando o download dos dados for finalizado.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Colosoft.Net.DownloadCompletedEventArgs">
            <summary>
            Prover dados para o evento <see cref="T:Colosoft.Net.DownloadCompletedEventHandler"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Net.DownloadCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object,System.IO.Stream)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="error"></param>
            <param name="cancelled"></param>
            <param name="userState"></param>
            <param name="result"></param>
        </member>
        <member name="P:Colosoft.Net.DownloadCompletedEventArgs.Result">
            <summary>
            Dados do resultado do download.
            </summary>
        </member>
        <member name="T:Colosoft.Net.DownloaderException">
            <summary>
            Representa um erro do Downloader.
            </summary>
        </member>
        <member name="T:Colosoft.Net.ICommunicationException">
            <summary>
            Assinatura das classe que representam um erro de comunicação.
            </summary>
        </member>
        <member name="P:Colosoft.Net.ICommunicationException.Details">
            <summary>
            Detalhes do erro.
            </summary>
        </member>
        <member name="M:Colosoft.Net.DownloaderException.#ctor">
            <summary>
            Construtor vazio.
            </summary>
        </member>
        <member name="M:Colosoft.Net.DownloaderException.#ctor(Colosoft.Net.CommunicationExceptionDetails)">
            <summary>
            Cria a instancia com os dados do detalhe.
            </summary>
            <param name="details"></param>
        </member>
        <member name="M:Colosoft.Net.DownloaderException.#ctor(System.String)">
            <summary>
            Cria uma instancia com a mensagem informada.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Colosoft.Net.DownloaderException.#ctor(System.String,System.Exception)">
            <summary>
            Cria uma instancia com a mensagem e o erro interno.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Colosoft.Net.DownloaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor usado na serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Net.DownloaderException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Método usado na serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Colosoft.Net.DownloaderException.Details">
            <summary>
            Detalhes do erro.
            </summary>
        </member>
        <member name="T:Colosoft.Net.DownloadProgressEventHandler">
            <summary>
            Representa os eventos acioandos quando o progresso do download for alterado.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Colosoft.Net.DownloadProgressChangedEventArgs">
            <summary>
            Prover dados para o evento <see cref="T:Colosoft.Net.DownloadProgressEventHandler"/>
            </summary>
        </member>
        <member name="M:Colosoft.Net.DownloadProgressChangedEventArgs.#ctor(System.Int64,System.Int64)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="bytesReceived"></param>
            <param name="totalBytesToReceive"></param>
        </member>
        <member name="P:Colosoft.Net.DownloadProgressChangedEventArgs.BytesReceived">
            <summary>
            Quantidade de bytes recebidos.
            </summary>
        </member>
        <member name="P:Colosoft.Net.DownloadProgressChangedEventArgs.TotalBytesToReceive">
            <summary>
            Total de bytes para serem recebidos.
            </summary>
        </member>
        <member name="T:Colosoft.Net.IDownloader">
            <summary>
            Assinatura das classes de downloader.
            </summary>
        </member>
        <member name="M:Colosoft.Net.IDownloader.RunAsync(System.Object)">
            <summary>
            Executa o download em background.
            </summary>
            <param name="userState">Estado.</param>
        </member>
        <member name="M:Colosoft.Net.IDownloader.CancelAsync">
            <summary>
            Cancela a execução assincrona do donwnload.
            </summary>
        </member>
        <member name="E:Colosoft.Net.IDownloader.ProgressChanged">
            <summary>
            Evento disparado quando o progresso do download se altera.
            </summary>
        </member>
        <member name="E:Colosoft.Net.IDownloader.DownloadCompleted">
            <summary>
            Evento disparado quando o download for finalizado.
            </summary>
        </member>
        <member name="P:Colosoft.Net.IDownloader.IsBusy">
            <summary>
            Identifica se a instancia está ocupada.
            </summary>
        </member>
        <member name="T:Colosoft.Net.IDownloaderObserver">
            <summary>
            Assinatura das classe que observam o <see cref="T:Colosoft.Net.IDownloader"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Net.IDownloaderObserver.OnDoWork(System.Object)">
            <summary>
            Acionado quando o trabalho de atualização é iniciado.
            </summary>
        </member>
        <member name="M:Colosoft.Net.IDownloaderObserver.OnDownloadProgressChanged(Colosoft.Net.DownloadProgressChangedEventArgs)">
            <summary>
            Define o progresso do download de dados.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Net.IDownloaderObserver.OnDownloadCompleted(Colosoft.Net.DownloadCompletedEventArgs)">
            <summary>
            Acionado quando o download é finalizado.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Net.IDownloaderObserver.OnDisposed">
            <summary>
            Acionado quando a instancia do atualizador for liberada.
            </summary>
        </member>
        <member name="T:Colosoft.Net.ImpersonationLevel">
            <summary>
            Possíveis níveis de impersonation.
            </summary>
        </member>
        <member name="F:Colosoft.Net.ImpersonationLevel.SecurityAnonymous">
            <summary>
            Segurança anônima.
            </summary>
        </member>
        <member name="F:Colosoft.Net.ImpersonationLevel.SecurityIdentification">
            <summary>
            Segurança por identificação.
            </summary>
        </member>
        <member name="F:Colosoft.Net.ImpersonationLevel.SecurityImpersonation">
            <summary>
            Seguraça por impersonation.
            </summary>
        </member>
        <member name="F:Colosoft.Net.ImpersonationLevel.SecurityDelegation">
            <summary>
            Segurança por delegação.
            </summary>
        </member>
        <member name="T:Colosoft.Net.Impersonator">
             <summary>
             Allows code to be executed under the security context of a specified user account.
             </summary>
             <remarks> 
             Implements IDispose, so can be used via a using-directive or method calls;
              ...
            
              var imp = new Impersonator( "myUsername", "myDomainname", "myPassword" );
              imp.UndoImpersonation();
            
              ...
            
               var imp = new Impersonator();
              imp.Impersonate("myUsername", "myDomainname", "myPassword");
              imp.UndoImpersonation();
            
              ...
            
              using ( new Impersonator( "myUsername", "myDomainname", "myPassword" ) )
              {
               ...
               1
               ...
              }
            
              ...
             </remarks>
        </member>
        <member name="M:Colosoft.Net.Impersonator.#ctor(System.String,System.String,System.String,Colosoft.Net.LogonType,Colosoft.Net.LogonProvider)">
            <summary>
            Begins impersonation with the given credentials, Logon type and Logon provider.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="domainName">Name of the domain.</param>
            <param name="password">The password. <see cref="T:System.String"/></param>
            <param name="logonType">Type of the logon.</param>
            <param name="logonProvider">The logon provider.</param>
        </member>
        <member name="M:Colosoft.Net.Impersonator.#ctor(System.String,System.String,System.String)">
            <summary>
            Begins impersonation with the given credentials.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="domainName">Name of the domain.</param>
            <param name="password">The password. <see cref="T:System.String"/></param>
        </member>
        <member name="M:Colosoft.Net.Impersonator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Colosoft.Net.Impersonator"/> class.
            </summary>
        </member>
        <member name="M:Colosoft.Net.Impersonator.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Net.Impersonator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Colosoft.Net.Impersonator.Impersonate(System.String,System.String,System.String)">
            <summary>
            Impersonates the specified user account.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="domainName">Name of the domain.</param>
            <param name="password">The password. <see cref="T:System.String"/></param>
        </member>
        <member name="M:Colosoft.Net.Impersonator.Impersonate(System.String,System.String,System.String,Colosoft.Net.LogonType,Colosoft.Net.LogonProvider)">
            <summary>
            Impersonates the specified user account.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="domainName">Name of the domain.</param>
            <param name="password">The password. <see cref="T:System.String"/></param>
            <param name="logonType">Type of the logon.</param>
            <param name="logonProvider">The logon provider.</param>
        </member>
        <member name="M:Colosoft.Net.Impersonator.UndoImpersonation">
            <summary>
            Stops impersonation.
            </summary>
        </member>
        <member name="T:Colosoft.Net.UploaderOperationResult">
            <summary>
            Resultado a operação de upload.
            </summary>
        </member>
        <member name="M:Colosoft.Net.UploaderOperationResult.#ctor(System.Exception,System.Boolean)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="error">Erro ocorrido.</param>
            <param name="canceled">Identifica se a operação de upload foi cancelada.</param>
        </member>
        <member name="P:Colosoft.Net.UploaderOperationResult.Error">
            <summary>
            Erro ocorrido na operação.
            </summary>
        </member>
        <member name="P:Colosoft.Net.UploaderOperationResult.Canceled">
            <summary>
            Identifica se a operação foi cancelada.
            </summary>
        </member>
        <member name="T:Colosoft.Net.IUploader">
            <summary>
            Assinatura da classe responsável for fazer upload de dados
            para o servidor.
            </summary>
        </member>
        <member name="M:Colosoft.Net.IUploader.Cancel">
            <summary>
            Cancela o atual upload.
            </summary>
        </member>
        <member name="M:Colosoft.Net.IUploader.BeginUpload(System.AsyncCallback,System.Object)">
            <summary>
            Inicializa o processo de upload.
            </summary>
            <param name="callback">Método de retorno.</param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Net.IUploader.EndUpload(System.IAsyncResult)">
            <summary>
            Recupera o resultado a operação assincrona do upload.
            </summary>
            <param name="ar"></param>
            <returns></returns>
        </member>
        <member name="E:Colosoft.Net.IUploader.ProgressChanged">
            <summary>
            Evento disparado quando o progresso do upload se altera.
            </summary>
        </member>
        <member name="E:Colosoft.Net.IUploader.Completed">
            <summary>
            Evento disparado quando o upload for finalizado.
            </summary>
        </member>
        <member name="P:Colosoft.Net.IUploader.Observers">
            <summary>
            Observadores da instancia.
            </summary>
        </member>
        <member name="P:Colosoft.Net.IUploader.Items">
            <summary>
            Relação dos itens do Uploader.
            </summary>
        </member>
        <member name="P:Colosoft.Net.IUploader.IsBusy">
            <summary>
            Identifica se a instancia está ocupada.
            </summary>
        </member>
        <member name="T:Colosoft.Net.IUploaderItem">
            <summary>
            Assinatura de um item que será enviador pelo Uploader.
            </summary>
        </member>
        <member name="M:Colosoft.Net.IUploaderItem.GetContent">
            <summary>
            Recupera o conteúdo que será enviado.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Net.IUploaderItem.Attributes">
            <summary>
            Atributos do item.
            </summary>
        </member>
        <member name="P:Colosoft.Net.IUploaderItem.Length">
            <summary>
            Tamanho do item.
            </summary>
        </member>
        <member name="P:Colosoft.Net.IUploaderItem.NumberBytesSent">
            <summary>
            Número de bytes enviados.
            </summary>
        </member>
        <member name="T:Colosoft.Net.IUploaderObserver">
            <summary>
            Assinatura da classe que observa o uploader.
            </summary>
        </member>
        <member name="M:Colosoft.Net.IUploaderObserver.OnDoWork(System.Object)">
            <summary>
            Acionado quando o trabalho de atualização é iniciado.
            </summary>
        </member>
        <member name="M:Colosoft.Net.IUploaderObserver.OnProgressChanged(Colosoft.Net.UploadProgressChangedEventArgs)">
            <summary>
            Define o progresso do download de dados.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Net.IUploaderObserver.OnCompleted(Colosoft.Net.UploadCompletedEventArgs)">
            <summary>
            Acionado quando o download é finalizado.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Colosoft.Net.LogonProvider">
            <summary>
            Possíveis provedores de logon.
            </summary>
        </member>
        <member name="F:Colosoft.Net.LogonProvider.LOGON32_PROVIDER_DEFAULT">
            <summary>
            Logon 32 padrão.
            </summary>
        </member>
        <member name="F:Colosoft.Net.LogonProvider.LOGON32_PROVIDER_WINNT35">
            <summary>
            Logon 32 WINNT25.
            </summary>
        </member>
        <member name="F:Colosoft.Net.LogonProvider.LOGON32_PROVIDER_WINNT40">
            <summary>
            Logon 32 WINNT40.
            </summary>
        </member>
        <member name="F:Colosoft.Net.LogonProvider.LOGON32_PROVIDER_WINNT50">
            <summary>
            Logon 32 WINNT50
            </summary>
        </member>
        <member name="T:Colosoft.Net.LogonType">
            <summary>
            Possíveis tipos de logon.
            </summary>
        </member>
        <member name="F:Colosoft.Net.LogonType.LOGON32_LOGON_INTERACTIVE">
            <summary>
            Logon interativo.
            </summary>
        </member>
        <member name="F:Colosoft.Net.LogonType.LOGON32_LOGON_NETWORK">
            <summary>
            Logon de rede.
            </summary>
        </member>
        <member name="F:Colosoft.Net.LogonType.LOGON32_LOGON_BATCH">
            <summary>
            Logon de lote.
            </summary>
        </member>
        <member name="F:Colosoft.Net.LogonType.LOGON32_LOGON_SERVICE">
            <summary>
            Logon de serviço.
            </summary>
        </member>
        <member name="F:Colosoft.Net.LogonType.LOGON32_LOGON_UNLOCK">
            <summary>
            Logon de desbloqueio.
            </summary>
        </member>
        <member name="F:Colosoft.Net.LogonType.LOGON32_LOGON_NETWORK_CLEARTEXT">
            <summary>
            Logon de rede com texto limpo.
            </summary>
        </member>
        <member name="F:Colosoft.Net.LogonType.LOGON32_LOGON_NEW_CREDENTIALS">
            <summary>
            Logon com novas credenciais.
            </summary>
        </member>
        <member name="T:Colosoft.Net.NetNamespace">
            <summary>
            Classe com método que auxiliam no namespace.
            </summary>
        </member>
        <member name="F:Colosoft.Net.NetNamespace.Data">
            <summary>
            Namespace definido para o XML
            </summary>
        </member>
        <member name="F:Colosoft.Net.NetNamespace.SchemaInstance">
            <summary>
            Namespace do arquivo de schema
            </summary>
        </member>
        <member name="M:Colosoft.Net.NetNamespace.ResolveSchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Resolve o esquema da consulta.
            </summary>
            <param name="xs"></param>
        </member>
        <member name="P:Colosoft.Net.NetNamespace.NetSchema">
            <summary>
            Instancia do esquema da consulta.
            </summary>
        </member>
        <member name="T:Colosoft.Net.Share.DirectoryShare">
            <summary>
            Armazena os dados de compartilhamento de diretório.
            </summary>
        </member>
        <member name="F:Colosoft.Net.Share.DirectoryShare.DirectoryNameComparer">
            <summary>
            Instancia do comparador para o nome do diretório.
            </summary>
        </member>
        <member name="M:Colosoft.Net.Share.DirectoryShare.#ctor(System.String,Colosoft.Net.Share.NetworkShareIdentity)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="directory">Diretório do compartilhamento.</param>
            <param name="identity">Identidade usada para a autenticação.</param>
        </member>
        <member name="P:Colosoft.Net.Share.DirectoryShare.Directory">
            <summary>
            Caminho do diretório do compartilhamento.
            </summary>
        </member>
        <member name="P:Colosoft.Net.Share.DirectoryShare.Identity">
            <summary>
            Identidade usada na autenticação.
            </summary>
        </member>
        <member name="T:Colosoft.Net.Share.DirectoryShare.DirectoryComparer">
            <summary>
            Implementação do comparador para o nome do diretório.
            </summary>
        </member>
        <member name="M:Colosoft.Net.Share.DirectoryShare.DirectoryComparer.Compare(Colosoft.Net.Share.DirectoryShare,Colosoft.Net.Share.DirectoryShare)">
            <summary>
            Compara as instancias informadas.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Net.Share.NetworkShareConfiguration">
            <summary>
            Armazena as configurações do compartilhamento de rede.
            </summary>
        </member>
        <member name="M:Colosoft.Net.Share.NetworkShareConfiguration.Decrypt(System.String)">
            <summary>
            Decriptografa o texto com a chave da configuração.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Net.Share.NetworkShareConfiguration.GetDefaultPrivateKey">
            <summary>
            Recupera a chave de criptografia padrão.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Net.Share.NetworkShareConfiguration.ConfigurePrivateKey(Colosoft.Cryptography.RSACryptografyKey)">
            <summary>
            Configura a chave de criptografia privata que será usada para descriptografar os dados
            da configuração.
            </summary>
            <param name="privateKey"></param>
        </member>
        <member name="M:Colosoft.Net.Share.NetworkShareConfiguration.Open(System.IO.Stream)">
            <summary>
            Carrega os dados da configuração.
            </summary>
            <param name="inputStream"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Net.Share.NetworkShareConfiguration.Open(System.String)">
            <summary>
            Carrega o arquivo conténd as configurações.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Net.Share.NetworkShareConfiguration.GetDirectories">
            <summary>
            Recupera os diretórios de compartilhamento da configuração.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Net.Share.NetworkShareConfiguration.Directories">
            <summary>
            Diretório de compartilhamento.
            </summary>
        </member>
        <member name="P:Colosoft.Net.Share.NetworkShareConfiguration.PrivateKey">
            <summary>
            Chave usada 
            </summary>
        </member>
        <member name="T:Colosoft.Net.Share.NetworkShareConfiguration.DirectoryShareInfo">
            <summary>
            Armazena as informações do compartilhamento.
            </summary>
        </member>
        <member name="P:Colosoft.Net.Share.NetworkShareConfiguration.DirectoryShareInfo.Directory">
            <summary>
            Nome do diretório de compartilhamento.
            </summary>
        </member>
        <member name="P:Colosoft.Net.Share.NetworkShareConfiguration.DirectoryShareInfo.Domain">
            <summary>
            Domínio.
            </summary>
        </member>
        <member name="P:Colosoft.Net.Share.NetworkShareConfiguration.DirectoryShareInfo.Username">
            <summary>
            Usuário de acesso.
            </summary>
        </member>
        <member name="P:Colosoft.Net.Share.NetworkShareConfiguration.DirectoryShareInfo.UseCryptografy">
            <summary>
            Identifica se é para usar criptografia na configuração.
            </summary>
        </member>
        <member name="P:Colosoft.Net.Share.NetworkShareConfiguration.DirectoryShareInfo.Password">
            <summary>
            Senha de acesso.
            </summary>
        </member>
        <member name="T:Colosoft.Net.Share.NetworkShareIdentity">
            <summary>
            Armazena os dados da identifidade de acesso para o 
            compartilhamento.
            </summary>
        </member>
        <member name="M:Colosoft.Net.Share.NetworkShareIdentity.#ctor(System.String,System.String,System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="domain">Domínio de autenticação.</param>
            <param name="username">Nome do usuário.</param>
            <param name="password">Senha de acesso.</param>
        </member>
        <member name="P:Colosoft.Net.Share.NetworkShareIdentity.Username">
            <summary>
            Usuário de acesso.
            </summary>
        </member>
        <member name="P:Colosoft.Net.Share.NetworkShareIdentity.Password">
            <summary>
            Senha de acesso.
            </summary>
        </member>
        <member name="P:Colosoft.Net.Share.NetworkShareIdentity.Domain">
            <summary>
            Domínio de acesso.
            </summary>
        </member>
        <member name="T:Colosoft.Net.Share.NetworkShareManager">
            <summary>
            Classe que gerencia o compartilhamento de rede.
            </summary>
        </member>
        <member name="M:Colosoft.Net.Share.NetworkShareManager.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Net.Share.NetworkShareManager.LoadConfiguration(Colosoft.Net.Share.NetworkShareConfiguration)">
            <summary>
            Carrega a configuração para o gerenciador.
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Colosoft.Net.Share.NetworkShareManager.Add(Colosoft.Net.Share.DirectoryShare)">
            <summary>
            Adiciona o compartilhamento para o gerenciador.
            </summary>
            <param name="share"></param>
        </member>
        <member name="M:Colosoft.Net.Share.NetworkShareManager.Remove(Colosoft.Net.Share.DirectoryShare)">
            <summary>
            Remove o compartilhamento.
            </summary>
            <param name="share"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Net.Share.NetworkShareManager.CreateImpersonator(System.String)">
            <summary>
            Cria a impersonação para o diretório compartilhada.
            </summary>
            <param name="directoryShare">Caminho do diretório de compartilhamento.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Net.Share.NetworkShareManager.GetEnumerator">
            <summary>
            Recupera o enumerador dos compartilhamentos.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Net.Share.NetworkShareManager.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador dos compartilhamentos.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Net.Share.NetworkShareManager.Instance">
            <summary>
            Instancia única do gerenciador.
            </summary>
        </member>
        <member name="P:Colosoft.Net.Share.NetworkShareManager.Count">
            <summary>
            Quantidade de compartilhamentos registrados no gerenciador.
            </summary>
        </member>
        <member name="T:Colosoft.Net.Share.NetworkShareManager.ImpersonatorFake">
            <summary>
            Implementação fake do Impersonator.
            </summary>
        </member>
        <member name="M:Colosoft.Net.Share.NetworkShareManager.ImpersonatorFake.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="T:Colosoft.Net.DownloadStage">
            <summary>
            Estágios do download.
            </summary>
        </member>
        <member name="F:Colosoft.Net.DownloadStage.Unknown">
            <summary>
            Desconhecido.
            </summary>
        </member>
        <member name="F:Colosoft.Net.DownloadStage.RequestCreation">
            <summary>
            Criação da requisição.
            </summary>
        </member>
        <member name="F:Colosoft.Net.DownloadStage.RequestStart">
            <summary>
            Requisição iniciada.
            </summary>
        </member>
        <member name="F:Colosoft.Net.DownloadStage.DownloadStarted">
            <summary>
            Download iniciado.
            </summary>
        </member>
        <member name="F:Colosoft.Net.DownloadStage.DownloadInProgress">
            <summary>
            Download em progresso.
            </summary>
        </member>
        <member name="F:Colosoft.Net.DownloadStage.LocalIOInProgress">
            <summary>
            Gravação local em processo.
            </summary>
        </member>
        <member name="F:Colosoft.Net.DownloadStage.MoveAndAttributesReset">
            <summary>
            Move e resetando atributos
            </summary>
        </member>
        <member name="T:Colosoft.Net.UpDownAsyncResult">
            <summary>
            Implementação da resultado de uma operação assincrona de upload e download.
            </summary>
        </member>
        <member name="M:Colosoft.Net.UpDownAsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="userCallback"></param>
            <param name="stateObject"></param>
        </member>
        <member name="M:Colosoft.Net.UpDownAsyncResult.Completed(System.Exception,System.IO.Stream)">
            <summary>
            Identifica que a operação foir finalizada.
            </summary>
            <param name="asyncException"></param>
            <param name="resultStream"></param>
        </member>
        <member name="M:Colosoft.Net.UpDownAsyncResult.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Net.UpDownAsyncResult.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="P:Colosoft.Net.UpDownAsyncResult.Exception">
            <summary>
            Erro ocorrido.
            </summary>
        </member>
        <member name="P:Colosoft.Net.UpDownAsyncResult.AsyncState">
            <summary>
            Estado.
            </summary>
        </member>
        <member name="P:Colosoft.Net.UpDownAsyncResult.AsyncWaitHandle">
            <summary>
            Manipulador de espera.
            </summary>
        </member>
        <member name="P:Colosoft.Net.UpDownAsyncResult.CompletedSynchronously">
            <summary>
            Identifica se será completado de forma sincronizada.
            </summary>
        </member>
        <member name="P:Colosoft.Net.UpDownAsyncResult.IsCompleted">
            <summary>
            Identifica se foi executado
            </summary>
        </member>
        <member name="P:Colosoft.Net.UpDownAsyncResult.ResultStream">
            <summary>
            Stream do resultado.
            </summary>
        </member>
        <member name="P:Colosoft.Net.UpDownAsyncResult.Stage">
            <summary>
            Estágio do download.
            </summary>
        </member>
        <member name="T:Colosoft.Net.UploadCompletedEventHandler">
            <summary>
            Representa os evento acionado quando o upload dos dados for finalizado.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Colosoft.Net.UploadCompletedEventArgs">
            <summary>
            Representa os argumentos do evento acionado quando o upload for concluído.
            </summary>
        </member>
        <member name="M:Colosoft.Net.UploadCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="error"></param>
            <param name="cancelled"></param>
            <param name="userState"></param>
        </member>
        <member name="T:Colosoft.Net.UploaderFileItem">
            <summary>
            Representa um item de arquivo para o Uploader.
            </summary>
        </member>
        <member name="M:Colosoft.Net.UploaderFileItem.#ctor(System.String)">
            <summary>
            Cria a instancia para o arquivo informado.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Colosoft.Net.UploaderFileItem.#ctor(System.IO.FileInfo)">
            <summary>
            Cria a instancia com as informações do arquivo.
            </summary>
            <param name="fileInfo">Informações do arquivo.</param>
        </member>
        <member name="M:Colosoft.Net.UploaderFileItem.GetContent">
            <summary>
            Recupera o conteúdo do item.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Net.UploaderFileItem.FileInfo">
            <summary>
            Informações do arquivo associado.
            </summary>
        </member>
        <member name="P:Colosoft.Net.UploaderFileItem.Attributes">
            <summary>
            Atributos do item.
            </summary>
        </member>
        <member name="P:Colosoft.Net.UploaderFileItem.Length">
            <summary>
            Tamanho dos dados do item.
            </summary>
        </member>
        <member name="P:Colosoft.Net.UploaderFileItem.NumberBytesSent">
            <summary>
            Número de bytes enviados.
            </summary>
        </member>
        <member name="T:Colosoft.Net.UploaderItemAttribute">
            <summary>
            Representa o atributo de um item do uploader.
            </summary>
        </member>
        <member name="M:Colosoft.Net.UploaderItemAttribute.#ctor(System.String,System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="name">Nome do atributo.</param>
            <param name="value">Valor do atributo.</param>
        </member>
        <member name="M:Colosoft.Net.UploaderItemAttribute.#ctor">
            <summary>
            Construtor vazio.
            </summary>
        </member>
        <member name="M:Colosoft.Net.UploaderItemAttribute.ToString">
            <summary>
            Recupera o texto que representa a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Net.UploaderItemAttribute.GetMySchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Recupera o esquema XML do tipo.
            </summary>
            <param name="xs"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Net.UploaderItemAttribute.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Recupera o esquema de serialização.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Net.UploaderItemAttribute.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Lê os dados serializados.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Colosoft.Net.UploaderItemAttribute.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializa os dados.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Colosoft.Net.UploaderItemAttribute.Name">
            <summary>
            Nome do atributo.
            </summary>
        </member>
        <member name="P:Colosoft.Net.UploaderItemAttribute.Value">
            <summary>
            Valor do atributo.
            </summary>
        </member>
        <member name="T:Colosoft.Net.UploaderItemAttributeSet">
            <summary>
            Implementação do conjunto de attributos.
            </summary>
        </member>
        <member name="M:Colosoft.Net.UploaderItemAttributeSet.Add(System.String,System.String)">
            <summary>
            Adiciona o atributo para o conjunto.
            </summary>
            <param name="name">Nome do atributo.</param>
            <param name="value">Valor do atributo.</param>
        </member>
        <member name="M:Colosoft.Net.UploaderItemAttributeSet.Remove(Colosoft.Net.UploaderItemAttribute)">
            <summary>
            Remove a instancia do atributo.
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:Colosoft.Net.UploaderItemAttributeSet.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Net.UploaderItemAttributeSet.ToString">
            <summary>
            Recupera o texto que representa a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Net.UploaderItemAttributeSet.GetEnumerator">
            <summary>
            Recupera o enumerado dos atributos.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Net.UploaderItemAttributeSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerado dos atributos.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Net.UploaderItemAttributeSet.GetMySchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Recupera o esquema XML do tipo.
            </summary>
            <param name="xs"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Net.UploaderItemAttributeSet.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Recupera o esquema de serialização.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Net.UploaderItemAttributeSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Lê os dados serializados.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Colosoft.Net.UploaderItemAttributeSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializa os dados.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Colosoft.Net.UploaderItemAttributeSet.Count">
            <summary>
            Quantidade de atributos no conjunto.
            </summary>
        </member>
        <member name="P:Colosoft.Net.UploaderItemAttributeSet.Item(System.String)">
            <summary>
            Recupera e define o valor do atributo.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Net.UploaderItemAttributeSet.Item(System.Int32)">
            <summary>
            Recupera e define o atributo pelo indice informado.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Net.UploaderItemInfo">
            <summary>
            Armazena as informações do item do uploader.
            </summary>
        </member>
        <member name="M:Colosoft.Net.UploaderItemInfo.#ctor">
            <summary>
            Construtor vazio.
            </summary>
        </member>
        <member name="M:Colosoft.Net.UploaderItemInfo.#ctor(System.Int64,Colosoft.Net.UploaderItemAttribute[])">
            <summary>
            Construtor padrão.
            </summary>
            <param name="length">Tamanho do item.</param>
            <param name="attributes">Atributos associados.</param>
        </member>
        <member name="M:Colosoft.Net.UploaderItemInfo.#ctor(Colosoft.Net.IUploaderItem)">
            <summary>
            Cria a instancia com base nos dados contidos no item informado.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Net.UploaderItemInfo.GetMySchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Recupera o esquema XML do tipo.
            </summary>
            <param name="xs"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Net.UploaderItemInfo.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Recupera o esquema de serialização.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Net.UploaderItemInfo.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Lê os dados serializados.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Colosoft.Net.UploaderItemInfo.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializa os dados.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Colosoft.Net.UploaderItemInfo.Uid">
            <summary>
            Identificador unico das informações.
            </summary>
        </member>
        <member name="P:Colosoft.Net.UploaderItemInfo.Attributes">
            <summary>
            Atributos associados com o item.
            </summary>
        </member>
        <member name="P:Colosoft.Net.UploaderItemInfo.Length">
            <summary>
            Tamanho do item.
            </summary>
        </member>
        <member name="T:Colosoft.Net.UploaderStreamItem">
            <summary>
            Implemetação do item do uploader para uma Stream.
            </summary>
        </member>
        <member name="M:Colosoft.Net.UploaderStreamItem.#ctor(System.IO.Stream)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Colosoft.Net.UploaderStreamItem.Finalize">
            <summary>
            Destrutor.
            </summary>
        </member>
        <member name="M:Colosoft.Net.UploaderStreamItem.GetContent">
            <summary>
            Recupera o conteúdo do item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Net.UploaderStreamItem.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Net.UploaderStreamItem.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="P:Colosoft.Net.UploaderStreamItem.Attributes">
            <summary>
            Atributos do item.
            </summary>
        </member>
        <member name="P:Colosoft.Net.UploaderStreamItem.Length">
            <summary>
            Tamanho do item.
            </summary>
        </member>
        <member name="P:Colosoft.Net.UploaderStreamItem.NumberBytesSent">
            <summary>
            Número de bytes enviados.
            </summary>
        </member>
        <member name="T:Colosoft.Net.UploadProgressEventHandler">
            <summary>
            Representa os eventos acioandos quando o progresso do upload for alterado.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Colosoft.Net.UploadProgressChangedEventArgs">
            <summary>
            Classe que armazena os dados do progresso de upload.
            </summary>
        </member>
        <member name="M:Colosoft.Net.UploadProgressChangedEventArgs.#ctor(System.Int64,System.Int64)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="bytesSent"></param>
            <param name="totalBytesToSend"></param>
        </member>
        <member name="P:Colosoft.Net.UploadProgressChangedEventArgs.BytesSent">
            <summary>
            Quantidade de bytes enviados.
            </summary>
        </member>
        <member name="P:Colosoft.Net.UploadProgressChangedEventArgs.TotalBytesToSend">
            <summary>
            Quantidade total de bytes para serem enviados.
            </summary>
        </member>
        <member name="T:Colosoft.Net.Win32NativeMethods">
            <summary>
            Classe com métodos nativos para acesso a bibliotecas nativas do windows.
            </summary>
        </member>
        <member name="T:Colosoft.ObjectExtensions">
            <summary>
            Extensões para objetos genéricos.
            </summary>
        </member>
        <member name="M:Colosoft.ObjectExtensions.GetMemberInfo(System.Object,System.String)">
            <summary>
            Recupera as informações de acesso da propriedade ou campo (públicos) solicitados.
            </summary>
            <param name="instance"></param>
            <param name="propertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ObjectExtensions.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            Recupera o tipo da propriedade ou campo solicitados.
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ObjectExtensions.GetMemberValue(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Recupera o valor do membro (público) definido pelo parâmetro.
            </summary>
            <param name="instance"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ObjectExtensions.SetMemberValue(System.Object,System.Reflection.MemberInfo,System.Object)">
            <summary>
            Define o valor do membro (público) definido pelo parâmetro.
            </summary>
            <param name="instance"></param>
            <param name="info"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ObjectExtensions.GetMemberType(System.Object,System.String)">
            <summary>
            Recupera o tipo do membro (público) solicitado.
            </summary>
            <param name="instance"></param>
            <param name="propertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ObjectExtensions.GetMemberValue``1(System.Object,System.String)">
            <summary>
            Recupera o valor do membro (público) solicitado.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="propertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ObjectExtensions.GetMemberValue(System.Object,System.String)">
            <summary>
            Recupera o valor do membro (público) solicitado.
            </summary>
            <param name="instance"></param>
            <param name="propertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ObjectExtensions.SetMemberValue(System.Object,System.String,System.Object)">
            <summary>
            Define o valor do membro (público) solicitado.
            </summary>
            <param name="instance"></param>
            <param name="propertyPath"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ObjectExtensions.TryCastAs``1(System.Object,``0@,``0)">
            <summary>
            Tenta converter o objeto para o tipo especificado.
            Atribui o valor default fornecido em caso de falha.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="result"></param>
            <param name="stdVal"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ObjectExtensions.TryConvertAs``1(System.Object,``0@,``0)">
            <summary>
            Tenta converter o valor para o tipo especificado.
            Atribui o valor default especificado em caso de falha.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="result"></param>
            <param name="stdVal"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Progress.AggregateProgressObserver`1">
            <summary>
            Implementação o agregador de observers de progresso.
            </summary>
        </member>
        <member name="T:Colosoft.Progress.IProgressObserver">
            <summary>
            Contrato para acompanhadores de progresso.
            </summary>
        </member>
        <member name="M:Colosoft.Progress.IProgressObserver.OnStart(System.Object)">
            <summary>
            Acionado quando o trabalho de processamento é iniciado.
            </summary>
        </member>
        <member name="M:Colosoft.Progress.IProgressObserver.OnProgressChanged(Colosoft.Progress.ProgressChangedEventArgs)">
            <summary>
            Define o progresso do processamento de dados.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Progress.IProgressObserver.OnProgressCompleted(Colosoft.Progress.ProgressCompletedEventArgs)">
            <summary>
            Acionado quando o progresso é finalizado.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Progress.AggregateProgressObserver`1.OnProgressChanged(Colosoft.Progress.ProgressChangedEventArgs)">
            <summary>
            Método acionado quando o progresso for alterado
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Progress.AggregateProgressObserver`1.OnProgressCompleted(Colosoft.Progress.ProgressCompletedEventArgs)">
            <summary>
            Método acionado quando o progresso for completado.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Progress.AggregateProgressObserver`1.OnStart(System.Object)">
            <summary>
            Método acionado quando o progresso for iniciado.
            </summary>
            <param name="userState"></param>
        </member>
        <member name="T:Colosoft.Progress.AggregateProgressObserver">
            <summary>
            Implementação o agregador de observers de progresso.
            </summary>
        </member>
        <member name="T:Colosoft.Progress.AggregateProgressWithMessageObserver`1">
            <summary>
            Implementação do agregador de observers de progresso.
            </summary>
        </member>
        <member name="T:Colosoft.Progress.IProgressWithMessageObserver">
            <summary>
            Assinatura do observer de progresso com suporte a mensagem.
            </summary>
        </member>
        <member name="M:Colosoft.Progress.IProgressWithMessageObserver.OnProgressMessageChanged(Colosoft.Progress.ProgressMessageChangedEventArgs)">
            <summary>
            Método acionado quando o estado da mensagem for alterado.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Progress.AggregateProgressWithMessageObserver`1.OnProgressMessageChanged(Colosoft.Progress.ProgressMessageChangedEventArgs)">
            <summary>
            Método acionado quando o estado da mensagem for alterado.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Colosoft.Progress.AggregateProgressWithMessageObserver">
            <summary>
            Implementação do agregador de observers de progresso.
            </summary>
        </member>
        <member name="T:Colosoft.Progress.ProgressChangedEventArgs">
            <summary>
            Representa os argumentos passados a cada alteração no progresso.
            </summary>
        </member>
        <member name="M:Colosoft.Progress.ProgressChangedEventArgs.#ctor(System.Int64,System.Int64)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="total">Total de itens</param>
            <param name="processed">Itens processados</param>
        </member>
        <member name="M:Colosoft.Progress.ProgressChangedEventArgs.#ctor(System.Int64,System.Int64,System.Object)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="total">Total de itens</param>
            <param name="processed">Itens processados</param>
            <param name="userState"></param>
        </member>
        <member name="P:Colosoft.Progress.ProgressChangedEventArgs.Total">
            <summary>
            Total de itens.
            </summary>
        </member>
        <member name="P:Colosoft.Progress.ProgressChangedEventArgs.Processed">
            <summary>
            Itens processados.
            </summary>
        </member>
        <member name="T:Colosoft.Progress.ProgressCompletedEventArgs">
            <summary>
            Representa os argumentos passados ao término do progresso.
            </summary>
        </member>
        <member name="M:Colosoft.Progress.ProgressCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="error"></param>
            <param name="cancelled"></param>
            <param name="userState"></param>
        </member>
        <member name="T:Colosoft.Progress.ProgressMessageChangedEventArgs">
            <summary>
            Armazena os argumentos da alteração da mensagem do estado.
            </summary>
        </member>
        <member name="M:Colosoft.Progress.ProgressMessageChangedEventArgs.#ctor(Colosoft.IMessageFormattable,System.Object)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="message"></param>
            <param name="userState"></param>
        </member>
        <member name="P:Colosoft.Progress.ProgressMessageChangedEventArgs.Message">
            <summary>
            Mensagem.
            </summary>
        </member>
        <member name="P:Colosoft.Progress.ProgressMessageChangedEventArgs.UserState">
            <summary>
            Estado do usuário.
            </summary>
        </member>
        <member name="T:Colosoft.PropertiesComparer`1">
            <summary>
            Implementação de uma comparador para propriedade de um tipo.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Colosoft.PropertiesComparer`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Construtor padrão.
            </summary>
            <param name="properties">Propriedades do comparador.</param>
        </member>
        <member name="M:Colosoft.PropertiesComparer`1.#ctor(System.String[])">
            <summary>
            Cria o comparador com os nomes das propriedades informadas.
            </summary>
            <param name="propertyNames"></param>
        </member>
        <member name="M:Colosoft.PropertiesComparer`1.CreateGetter(System.Reflection.PropertyInfo)">
            <summary>
            Recupera um getter para a propriedade.
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.PropertiesComparer`1.Compare(`0,`0)">
            <summary>
            Compara as instancias informadas.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.PropertiesComparer`1.PropertyComparer.#ctor(System.Reflection.PropertyInfo,System.Func{`0,System.Object})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="propertyInfo"></param>
            <param name="getter"></param>
        </member>
        <member name="M:Colosoft.PropertiesComparer`1.PropertyComparer.Compare(`0,`0)">
            <summary>
            Compara as instancias informadas.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.PropertySelector`1">
            <summary>
            Classe responsável pela seleção de propriedades do tipo informado.
            </summary>
        </member>
        <member name="M:Colosoft.PropertySelector`1.GetProperties(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Recupera as propriedade da expressão informada.
            </summary>
            <param name="propertiesSelector">Expressão que seleciona as propriedades.</param>
            <returns>Informações das propriedades selecionadas.</returns>
        </member>
        <member name="M:Colosoft.PropertySelector`1.GetPropertyNames(System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Recupera os nomes das propriedades da expressão informada.
            </summary>
            <param name="propertiesSelector">Expressão que seleciona as propriedades.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.PropertySelector`1.ExtractPropertyName(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
            Recupera o nome da propriedade da expressão.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AppDomainAssemblyRepository">
            <summary>
            Implementação do repositório a partir do dominio da palicação.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.IAssemblyRepository">
            <summary>
            Assinatura de um repositório de assemblies.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyRepository.Start">
            <summary>
            Inicializa o repositório.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyRepository.Add(System.Guid,System.IO.Stream)">
            <summary>
            Adiciona um novo pacote para o repositório.
            </summary>
            <param name="uid">Identificador do pacote.</param>
            <param name="inputStream">Stream com os dados do pacote.</param>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyRepository.GetAssemblyPackages(System.Collections.Generic.IEnumerable{Colosoft.Reflection.AssemblyPart})">
            <summary>
            Recupera a stream do pacote de assembly associado com as parts de assembly informadas.
            </summary>
            <param name="assemblyParts"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyRepository.BeginGetAssemblyPackages(System.Collections.Generic.IEnumerable{Colosoft.Reflection.AssemblyPart},System.AsyncCallback,System.Object)">
            <summary>
            Inicializa o processo para recuperar a stream do pacote de 
            assembly associado com as parts de assembly informadas.
            </summary>
            <param name="assemblyParts"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyRepository.EndGetAssemblyPackages(System.IAsyncResult)">
            <summary>
            Finaliza o processa para recuperar a stream do pacote de 
            assembly associado com as parts de assembly informadas.
            </summary>
            <param name="ar"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyRepository.GetAssemblyPackageStream(Colosoft.Reflection.IAssemblyPackage)">
            <summary>
            Recupera o assembly do pacote informado.
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyRepository.GetAssemblyPackage(System.Guid)">
            <summary>
            Recupera o pacote pelo identificador informado.
            </summary>
            <param name="assemblyPackageUid">Identificador do pacote que será recuperado.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyRepository.Validate">
            <summary>
            Valida o repositório.
            </summary>
        </member>
        <member name="E:Colosoft.Reflection.IAssemblyRepository.Started">
            <summary>
            Evento acionado quando o repositório for iniciado.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.IAssemblyRepository.IsStarted">
            <summary>
            Identifica se o repositório já foi iniciado.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.IAssemblyRepository.AssemblyResolverManager">
            <summary>
            Instancia do gerencia de resolução de assemblies associado com repositório.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AppDomainAssemblyRepository.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AppDomainAssemblyRepository.#ctor(System.AppDomain)">
            <summary>
            Cria a instancia para o domínio informado.
            </summary>
            <param name="domain"></param>
        </member>
        <member name="M:Colosoft.Reflection.AppDomainAssemblyRepository.#ctor(Colosoft.Reflection.AssemblyResolverManager)">
            <summary>
            Cria a instancia do o gerenciador de resolução de assemblies.
            </summary>
            <param name="assemblyResolverManager"></param>
        </member>
        <member name="M:Colosoft.Reflection.AppDomainAssemblyRepository.OnStarted(Colosoft.Reflection.AssemblyRepositoryStartedArgs)">
            <summary>
            Método acioando quando a instancia
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Reflection.AppDomainAssemblyRepository.DoGetAssemblyPackages(System.Object)">
            <summary>
            Execute a recuperação dos pacotes de assembly.
            </summary>
            <param name="callState"></param>
        </member>
        <member name="M:Colosoft.Reflection.AppDomainAssemblyRepository.Start">
            <summary>
            Inicia a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AppDomainAssemblyRepository.Add(System.Guid,System.IO.Stream)">
            <summary>
            Adiciona um novo pacote para o repositório.
            </summary>
            <param name="uid"></param>
            <param name="inputStream"></param>
        </member>
        <member name="M:Colosoft.Reflection.AppDomainAssemblyRepository.BeginGetAssemblyPackages(System.Collections.Generic.IEnumerable{Colosoft.Reflection.AssemblyPart},System.AsyncCallback,System.Object)">
            <summary>
            Inicializa o processo para recuperar a stream do pacote de 
            assembly associado com as parts de assembly informadas.
            </summary>
            <param name="assemblyParts"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AppDomainAssemblyRepository.EndGetAssemblyPackages(System.IAsyncResult)">
            <summary>
            Finaliza o processa para recuperar a stream do pacote de 
            assembly associado com as parts de assembly informadas.
            </summary>
            <param name="ar"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AppDomainAssemblyRepository.GetAssemblyPackages(System.Collections.Generic.IEnumerable{Colosoft.Reflection.AssemblyPart})">
            <summary>
            Recupera os dados do pacote
            </summary>
            <param name="assemblyParts"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AppDomainAssemblyRepository.GetAssemblyPackageStream(Colosoft.Reflection.IAssemblyPackage)">
            <summary>
            Recupera a stream do pacote do assembly.
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AppDomainAssemblyRepository.GetAssemblyPackage(System.Guid)">
            <summary>
            Recupera o pacote do assembly.
            </summary>
            <param name="assemblyPackageUid"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AppDomainAssemblyRepository.Validate">
            <summary>
            Valida o repositório.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AppDomainAssemblyRepository.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AppDomainAssemblyRepository.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="E:Colosoft.Reflection.AppDomainAssemblyRepository.Started">
            <summary>
            Evento acioando quando a instancia for iniciada.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AppDomainAssemblyRepository.IsStarted">
            <summary>
            Identifica se a instancia já foi iniciada.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AppDomainAssemblyRepository.AssemblyResolverManager">
            <summary>
            Instancia do gerencia de resolução dos assemblies.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AsmData">
            <summary>
            Armazena os dados do assembly.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AsmData.#ctor(System.String,System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="name">Nome do assembly.</param>
            <param name="path">Caminho do assembly.</param>
        </member>
        <member name="M:Colosoft.Reflection.AsmData.ToString">
            <summary>
            Recupera o texto que representa a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.AsmData.AdditionalInfo">
            <summary>
            Informações adicionais.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AsmData.Architecture">
            <summary>
            Arquitetura.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AsmData.AssemblyFullName">
            <summary>
            Nome completo do assembly.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AsmData.AssemblyProductName">
            <summary>
            Nome do produto.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AsmData.Imports">
            <summary>
            Biblioteca importadas.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AsmData.InvalidAssemblyDetails">
            <summary>
            Detalhes do assembly inválido.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AsmData.Name">
            <summary>
            Nome do assembly.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AsmData.OriginalVersion">
            <summary>
            Versão original.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AsmData.Path">
            <summary>
            Caminho do assembly.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AsmData.References">
            <summary>
            Referencias.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AsmData.Validity">
            <summary>
            Validade do assembly.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AsmData.AsmValidity">
            <summary>
            Possíveis validades do assembly.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.AsmData.AsmValidity.Valid">
            <summary>
            Identifica que é valido.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.AsmData.AsmValidity.ReferencesOnly">
            <summary>
            Somente as referencias.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.AsmData.AsmValidity.Invalid">
            <summary>
            Inválido.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.AsmData.AsmValidity.CircularDependency">
            <summary>
            Dependencia circular
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.AsmData.AsmValidity.Redirected">
            <summary>
            Redirecionado.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyAnalyzer">
            <summary>
            Analizador de assembly.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.AssemblyAnalyzer._cache">
            <summary>
            Cache dos assemblies.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.AssemblyAnalyzer._circularDependencyWarningShown">
            <summary>
            Identifica se é para exibir um warnig quando ocorrer um dependencia circular.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyAnalyzer.AnalyzeAssembly(System.Reflection.AssemblyName,Colosoft.Reflection.AsmData,System.AppDomain,System.Boolean)">
            <summary>
            Analiza o assembly informado.
            </summary>
            <param name="asmName"></param>
            <param name="parent"></param>
            <param name="domain"></param>
            <param name="throwWhenMissing"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyAnalyzer.ApplyArchitecture(System.Reflection.ProcessorArchitecture)">
            <summary>
            Aplica a arquitetura.
            </summary>
            <param name="processorArchitecture"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyAnalyzer.CheckCircularDependency(System.String)">
            <summary>
            Verifica uma dependencia circular.
            </summary>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyAnalyzer.FindPath(Colosoft.Reflection.AsmData,System.String,System.String,System.String)">
            <summary>
            Localiza o caminho do arquivo.
            </summary>
            <param name="parent"></param>
            <param name="file"></param>
            <param name="extAdd"></param>
            <param name="currentFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyAnalyzer.GetArchitecture(System.String)">
            <summary>
            Recupera a arquitetura do caminho informado.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyAnalyzer.GetParentsString">
            <summary>
            Recupera a string dos pais.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyAnalyzer.GetRedirections(System.Reflection.AssemblyName)">
            <summary>
            Recupera o redirecionamento do assembly.
            </summary>
            <param name="asmName"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyAnalyzer.IsCompatible(System.Reflection.ProcessorArchitecture,System.Reflection.ProcessorArchitecture)">
            <summary>
            Verifica se as arquiteturas são compatíveis.
            </summary>
            <param name="parent"></param>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyAnalyzer.TryLoad(System.AppDomain,System.String@,System.Boolean@,System.Reflection.Assembly@,System.String)">
            <summary>
            Tenta carregar as informações.
            </summary>
            <param name="domain"></param>
            <param name="additionalInfo"></param>
            <param name="invalid"></param>
            <param name="asm"></param>
            <param name="tmpPath"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyAnalyzer.AnalyzeRootAssembly(System.String)">
            <summary>
            Analiza o assembly.
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyAnalyzer.AnalyzeRootAssembly(System.String,System.Boolean)">
            <summary>
            Analiza o assembly informado.
            </summary>
            <param name="assemblyName"></param>
            <param name="throwWhenMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyAnalyzer.GetAssemblies(System.String,System.Boolean,System.Func{System.Boolean},System.Action{System.Int32,System.String})">
            <summary>
            Recupera os assemblies contidos no diretório informado.
            </summary>
            <param name="directory"></param>
            <param name="recursive"></param>
            <param name="cancellationPendingCallback"></param>
            <param name="progressReportCallback"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyAnalyzer.IsValidAssembly(System.String,System.String@)">
            <summary>
            Verifica se é um assembly válido.
            </summary>
            <param name="path"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyAnalyzer.IsAssembly(System.String)">
            <summary>
            Verifica se o arquivo informado é um assembly.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyAnalyzer.BgWorker">
            <summary>
            Worker usado para processar a analize.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyAnalyzer.Gac">
            <summary>
            Dados dos assemblies do GAC.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyExtensions">
            <summary>
            Classe que fornece métodos de extensão para manipular dos assemblies.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyExtensions.GetAssemblyNameWithoutExtension(System.String)">
            <summary>
            Recupera o nome do assembly ignorando a extensão.
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyInfo">
            <summary>
            Armazena as informações do assembly.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyInfo.ToString">
            <summary>
            Recupera o texto que representa a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyInfo.GetMySchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Recupera o esquema XML do tipo.
            </summary>
            <param name="xs"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyInfo.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Recupera o esquema.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyInfo.Name">
            <summary>
            Nome do assembly.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyInfo.LastWriteTime">
            <summary>
            Data da ultima escrita do arquivo do assembly.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyInfo.References">
            <summary>
            Nome das referencias.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyInfoRepositoryAggregate">
            <summary>
            Implementação de um agregador de repositorios de informações de assemblies.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.IAssemblyInfoRepository">
            <summary>
            Assinatura de um reposiório com as informações dos assemblies.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyInfoRepository.Refresh(System.Boolean)">
            <summary>
            Atualiza o repositório.
            </summary>
            <param name="executeAnalyzer">Identifica se é para executar o analizador.</param>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyInfoRepository.TryGet(System.String,Colosoft.Reflection.AssemblyInfo@,System.Exception@)">
            <summary>
            Recupera as informações do assembly pelo nome informado.
            </summary>
            <param name="assemblyName">Nome do assembly.</param>
            <param name="assemblyInfo">Informações do assembly encontrado.</param>
            <param name="exception">Error ocorrido na operação.</param>
            <returns>True se as informações do assembly forem recuperadas com sucesso.</returns>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyInfoRepository.Contains(System.String)">
            <summary>
            Verifica se no repositório existe as informações do assembly informado.
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="E:Colosoft.Reflection.IAssemblyInfoRepository.Loaded">
            <summary>
            Evento acionado quando o repositório for carregado.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.IAssemblyInfoRepository.IsLoaded">
            <summary>
            Identifica se o repositório foi carregado.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.IAssemblyInfoRepository.Count">
            <summary>
            Quantidade de assemblies carregados no repositório.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.IAssemblyInfoRepository.IsChanged">
            <summary>
            Identifica se o repositório sofreu alguma alteração.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyInfoRepositoryAggregate.#ctor(System.Collections.Generic.IEnumerable{Colosoft.Reflection.IAssemblyInfoRepository})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="assemblyInfoRepositories">Enumerador de informação de assemblies.</param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyInfoRepositoryAggregate.EntryLoaded(System.Object,System.EventArgs)">
            <summary>
            Método acionado quando uma entrada for carregada.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyInfoRepositoryAggregate.OnLoaded">
            <summary>
            Método acionado quando a instancia for carregada.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyInfoRepositoryAggregate.Refresh(System.Boolean)">
            <summary>
            Atualiza o repositório.
            </summary>
            <param name="executeAnalyzer">Identifica se é para executar o analizador.</param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyInfoRepositoryAggregate.TryGet(System.String,Colosoft.Reflection.AssemblyInfo@,System.Exception@)">
            <summary>
            Recupera as informações do assembly pelo nome informado.
            </summary>
            <param name="assemblyName"></param>
            <param name="assemblyInfo"></param>
            <param name="exception">Error ocorrido.</param>
            <returns>True se as informações do assembly forem recuperadas com sucesso.</returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyInfoRepositoryAggregate.Contains(System.String)">
            <summary>
            Verifica se no repositório existe as informações do assembly informado.
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyInfoRepositoryAggregate.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador da instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyInfoRepositoryAggregate.GetEnumerator">
            <summary>
            Recupera o enumerador da instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Colosoft.Reflection.AssemblyInfoRepositoryAggregate.Loaded">
            <summary>
            Evento acionado quando o repositório for carregado.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyInfoRepositoryAggregate.Count">
            <summary>
            Quantidade de assemblies carregados.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyInfoRepositoryAggregate.IsChanged">
            <summary>
            Identifica se algum repositorio sofreu alteração.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyInfoRepositoryAggregate.IsLoaded">
            <summary>
            Identifica se a instancia já foi carregada.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyLoader">
            <summary>
            Classe responsável por fazer a carga de assemblies.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.IAssemblyLoader">
            <summary>
            Assinatura da classe responsável por carregar um assembly.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyLoader.TryGet(System.String,System.Reflection.Assembly@)">
            <summary>
            Tenta carregar o assembly associado com o nome informado.
            </summary>
            <param name="assemblyName">Nome do assembly.</param>
            <param name="assembly">Instancia do assembly carregado.</param>
            <returns>True caso o assembly tenha sido carregado com sucesso.</returns>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyLoader.TryGet(System.String,System.Reflection.Assembly@,System.Exception@)">
            <summary>
            Tenta carregar o assembly associado com o nome informado.
            </summary>
            <param name="assemblyName">Nome do assembly.</param>
            <param name="assembly">Instancia do assembly carregado.</param>
            <param name="exception">Error ocorrido</param>
            <returns>True caso o assembly tenha sido carregado com sucesso.</returns>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyLoader.Get(System.String[])">
            <summary>
            Tenta carrega os assemblies informados.
            </summary>
            <param name="assemblyNames">Nomes dos assemblies que serão carregados.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyLoader.#ctor(System.AppDomain,Colosoft.Reflection.IAssemblyRepository)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="domain"></param>
            <param name="assemblyRepository"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyLoader.TryGet(System.String,System.Reflection.Assembly@)">
            <summary>
            Tenta carregar o assembly associado com o nome informado.
            </summary>
            <param name="assemblyName">Nome do assembly.</param>
            <param name="assembly">Instancia do assembly carregado.</param>
            <returns>True caso o assembly tenha sido carregado com sucesso.</returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyLoader.TryGet(System.String,System.Reflection.Assembly@,System.Exception@)">
            <summary>
            Tenta carregar o assembly associado com o nome informado.
            </summary>
            <param name="assemblyName">Nome do assembly.</param>
            <param name="assembly">Instancia do assembly carregado.</param>
            <param name="exception">Error ocorrido</param>
            <returns>True caso o assembly tenha sido carregado com sucesso.</returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyLoader.Get(System.String[])">
            <summary>
            Tenta carrega os assemblies informados.
            </summary>
            <param name="assemblyNames">Nomes dos assemblies que serão carregados.</param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyLoader.Instance">
            <summary>
            Recupera a instancia do loader de assembly.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyLoader.Context">
            <summary>
            Recupera a instancia do contexto do loader.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyPackage">
            <summary>
            Representa um pacote de assemblies.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.ICompactSerializable">
            <summary>
            Assinatura das classes que realizam uma serialização compacta.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.ICompactSerializable.Deserialize(Colosoft.Serialization.IO.CompactReader)">
            <summary>
            Deserializa os dados.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Colosoft.Serialization.ICompactSerializable.Serialize(Colosoft.Serialization.IO.CompactWriter)">
            <summary>
            Serializa os dados.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Colosoft.Reflection.IAssemblyPackage">
            <summary>
            Assinatura de um pacote de assemblies.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyPackage.GetAssembly(Colosoft.Reflection.AssemblyPart)">
            <summary>
            Recupera a instancia do assembly carregado.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyPackage.LoadAssemblyGuarded(Colosoft.Reflection.AssemblyPart,System.Exception@)">
            <summary>
            Carrega o assembly guardado.
            </summary>
            <param name="name"></param>
            <param name="exception">Exception caso ocorra.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyPackage.GetAssemblyStream(Colosoft.Reflection.AssemblyPart)">
            <summary>
            Recupera o stream do assembly.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyPackage.ExtractPackageFiles(System.String,System.Boolean)">
            <summary>
            Extraí os arquivos do pacote.
            </summary>
            <param name="outputDirectory">Diretório de saída.</param>
            <param name="canOverride">True para sobreescrever os arquivos que existirem.</param>
            <rereturns>True caso a operação tenha sido realizada com sucesso.</rereturns>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyPackage.Contains(Colosoft.Reflection.AssemblyPart)">
            <summary>
            Verifica se existe no pacote uma parte compatível com a informada.
            </summary>
            <param name="assemblyPart">Parte que será comparada.</param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.IAssemblyPackage.Uid">
            <summary>
            Identificador unico do pacote.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.IAssemblyPackage.Count">
            <summary>
            Quantidade de partes do pacote.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.IAssemblyPackage.CreateTime">
            <summary>
            Data de criação do pacote.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.IAssemblyPackage.Item(System.Int32)">
            <summary>
            Recupera a parte do assembly pelo indice informado.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackage.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackage.#ctor(System.Collections.Generic.IEnumerable{Colosoft.Reflection.AssemblyPart})">
            <summary>
            Cria um pacote já definindo os assemblies associados.
            </summary>
            <param name="assemblies"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor usado para deserializar os dados.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackage.Add(Colosoft.Reflection.AssemblyPart)">
            <summary>
            Adiciona um novo assembly para o pacote.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackage.Remove(Colosoft.Reflection.AssemblyPart)">
            <summary>
            Remove o nome do item informado.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackage.GetAssembly(Colosoft.Reflection.AssemblyPart)">
            <summary>
            Recupera a instancia do assembly carregado.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackage.GetAssemblyStream(Colosoft.Reflection.AssemblyPart)">
            <summary>
            Recupera o stream do assembly.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackage.LoadAssemblyGuarded(Colosoft.Reflection.AssemblyPart,System.Exception@)">
            <summary>
            Carrega o assembly guardado.
            </summary>
            <param name="name"></param>
            <param name="exception">Exception caso ocorra.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackage.ExtractPackageFiles(System.String,System.Boolean)">
            <summary>
            Extraí os arquivos do pacote.
            </summary>
            <param name="outputDirectory">Diretório de saída.</param>
            <param name="canOverride">True para sobreescrever os arquivos que existirem.</param>
            <rereturns>True caso a operação tenha sido realizada com sucesso.</rereturns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackage.Contains(Colosoft.Reflection.AssemblyPart)">
            <summary>
            Verifica se existe no pacote uma parte compatível com a informada.
            </summary>
            <param name="assemblyPart">Parte que será comparada.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackage.GetEnumerator">
            <summary>
            Recupera o enumerador dos items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackage.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador dos itens.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackage.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackage.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackage.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Recupera os dados serializados da instancia.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackage.GetMySchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Recupera o esquema XML do tipo.
            </summary>
            <param name="xs"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackage.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Recupera o esquema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackage.Deserialize(Colosoft.Serialization.IO.CompactReader)">
            <summary>
            Deserializa os dados da instancia.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackage.Serialize(Colosoft.Serialization.IO.CompactWriter)">
            <summary>
            Serializa os dados da instancia.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyPackage.Uid">
            <summary>
            Identificador único do pacote.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyPackage.CreateTime">
            <summary>
            Horário de criação do pacote.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyPackage.Count">
            <summary>
            Recupera a quantidade de nomes no pacote.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyPackage.Item(System.Int32)">
            <summary>
            Recupera o nome que está na posição informada.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyPackage.Result">
            <summary>
            Resultado da carga do pacote.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyPackageCollection">
            <summary>
            Implementação de uma coleção de pacotes de assembly.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageCollection.#ctor(System.Collections.Generic.IEnumerable{Colosoft.Reflection.AssemblyPackage})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="packages"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageCollection.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor usado para deserializar os dados.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageCollection.Add(Colosoft.Reflection.AssemblyPackage)">
            <summary>
            Adiciona um novo item na coleção.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageCollection.Clear">
            <summary>
            Limpa os itens da coleção.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageCollection.Contains(Colosoft.Reflection.AssemblyPackage)">
            <summary>
            Verifica se coleção contém o item informado.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageCollection.CopyTo(Colosoft.Reflection.AssemblyPackage[],System.Int32)">
            <summary>
            Copia os itens para o vetor informado.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageCollection.Remove(Colosoft.Reflection.AssemblyPackage)">
            <summary>
            Remove o item informado.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageCollection.GetEnumerator">
            <summary>
            Recupera o enumerador dos itens.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador dos itens.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Recupera os dados serializados da instancia.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageCollection.GetMySchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Recupera o esquema XML do tipo.
            </summary>
            <param name="xs"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageCollection.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Recupera o esquema.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyPackageCollection.Count">
            <summary>
            Quantidade de itens na coleção.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyPackageCollection.IsReadOnly">
            <summary>
            Identifica se é uma coleção somente leitura.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyPackageCollection.Item(System.Int32)">
            <summary>
            Recupera de define o item na posição informada.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyPackageContainer">
            <summary>
            Implementação de um container de pacotes de assemblies.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageContainer.#ctor(Colosoft.Reflection.IAssemblyPackage)">
            <summary>
            Cria o container com apenas um pacote.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageContainer.#ctor(System.Collections.Generic.IEnumerable{Colosoft.Reflection.IAssemblyPackage})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="packages"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageContainer.GetEnumerator">
            <summary>
            Recupera o enumerador dos pacotes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageContainer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador dos pacotes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyPackageContainer.Count">
            <summary>
            Quantidade de pacotes no container.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyPackageContainer.Item(System.Int32)">
            <summary>
            Recupera o pacote pelo indice informado.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyPackageDownloadCompletedEventArgs">
            <summary>
            Prover dados para o evento <see cref="T:Colosoft.Net.DownloadCompletedEventHandler"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageDownloadCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object,Colosoft.Reflection.AssemblyPackageDownloaderResult)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="error"></param>
            <param name="cancelled"></param>
            <param name="userState"></param>
            <param name="result"></param>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyPackageDownloadCompletedEventArgs.PackagesResult">
            <summary>
            Dados do resultado do download.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyPackageDownloaderResult">
            <summary>
            Resultado do download de um pacote de assembly.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageDownloaderResult.#ctor(System.IO.Stream)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="inputStream">Stream de entrada.</param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageDownloaderResult.Build(System.Collections.Generic.IEnumerable{Colosoft.Reflection.AssemblyPackageDownloaderResult.Item},System.IO.Stream)">
            <summary>
            Constrói o resultado na stream informada.
            </summary>
            <param name="items"></param>
            <param name="outStream"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageDownloaderResult.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageDownloaderResult.Dispose(System.Boolean)">
            <summary>
            Libera a instancia
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageDownloaderResult.GetEnumeratorInternal">
            <summary>
            Recupera o enumerador dos itens.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageDownloaderResult.GetEnumerator">
            <summary>
            Recupera o enumerador dos itens.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageDownloaderResult.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador dos itens.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyPackageDownloaderResult.Item">
            <summary>
            Representa um item do resultado.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageDownloaderResult.Item.#ctor(System.Guid,System.DateTime,System.IO.Stream)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="uid">Identificador unico do item.</param>
            <param name="lastWriteTime">Data da última escrita do item.</param>
            <param name="stream"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageDownloaderResult.Item.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPackageDownloaderResult.Item.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyPackageDownloaderResult.Item.Uid">
            <summary>
            Identificador unico do item.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyPackageDownloaderResult.Item.Stream">
            <summary>
            Stream do item.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyPackageDownloaderResult.Item.LastWriteTime">
            <summary>
            Data da ultima escrita no item.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyPart">
            <summary>
            Representa uma parte de assembly.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPart.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPart.#ctor(System.String)">
            <summary>
            Cria a instancia já definindo o source.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPart.#ctor(System.String,System.Reflection.Assembly)">
            <summary>
            Cria a parte já associando o assembly.
            </summary>
            <param name="source"></param>
            <param name="assembly"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPart.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor usado para deserializar os dados.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPart.Load(System.AppDomain,System.IO.Stream,System.Int32)">
            <summary>
            Carrega o assembly pela stream informada.
            </summary>
            <param name="appDomain">Domínio onde o assembly será carregado.</param>
            <param name="assemblyStream"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPart.Load(System.AppDomain,System.Byte[])">
            <summary>
            Carrega o assembly pelo buffer informadao.
            </summary>
            <param name="appDomain">Domínio onde o assembly será carregado.</param>
            <param name="raw"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPart.Load(System.AppDomain,System.String)">
            <summary>
            Carrega o assembly pelo caminho informado
            </summary>
            <param name="appDomain">Domínio onde o assembly será carregado.</param>
            <param name="assemblyCodeBase"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPart.ToString">
            <summary>
            Recupera o texto que representa a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPart.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Recupera os dados serializados da instancia.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPart.Deserialize(Colosoft.Serialization.IO.CompactReader)">
            <summary>
            Deserializa os dados da instancia.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPart.Serialize(Colosoft.Serialization.IO.CompactWriter)">
            <summary>
            Serializa os dados da instancia.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPart.GetMySchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Recupera o esquema XML do tipo.
            </summary>
            <param name="xs"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPart.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Recupera o esquema.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyPart.Source">
            <summary>
            Origem.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyPart.Assembly">
            <summary>
            Instancia do assembly associado que foi carregado.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyPartEqualityComparer">
            <summary>
            Comparador do nome do assembly.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.AssemblyPartEqualityComparer.Instance">
            <summary>
            Instancia unico do comparador.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPartEqualityComparer.Equals(Colosoft.Reflection.AssemblyPart,Colosoft.Reflection.AssemblyPart)">
            <summary>
            Compara os valores.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPartEqualityComparer.GetHashCode(Colosoft.Reflection.AssemblyPart)">
            <summary>
            Recupera o hash code da instancia informada.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyPartsResolver">
            <summary>
            Implementação padrão para o AssemblyResolver.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.IAssemblyResolverExt">
            <summary>
            Extensão do resolvedor de assemblies.
            </summary>
        </member>
        <member name="E:Colosoft.Reflection.IAssemblyResolverExt.Loaded">
            <summary>
            Evento acionado quando o resolver for carregado.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPartsResolver.#ctor(Colosoft.Reflection.IAssemblyRepository,System.Collections.Generic.IEnumerable{Colosoft.Reflection.AssemblyPart})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="assemblyRepository">Instancia do repositório de assemblies.</param>
            <param name="assemblyParts">Relação dos nomes dos assemblies que devem ser resolvidos.</param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPartsResolver.Finalize">
            <summary>
            Destrutor.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPartsResolver.LoadAssemblies">
            <summary>
            Carrega os assemblies.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPartsResolver.Resolve(System.ResolveEventArgs,System.Reflection.Assembly@,System.Exception@)">
            <summary>
            Resolve o assembly.
            </summary>
            <param name="args"></param>
            <param name="assembly"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPartsResolver.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyPartsResolver.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="E:Colosoft.Reflection.AssemblyPartsResolver.Loaded">
            <summary>
            Evento acionado quando a instancia for carregada.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyPartsResolver.IsValid">
            <summary>
            Identifica se a instancia está em um estado válido.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyPartsResolver.LoadAssembliesResult">
            <summary>
            Resulta da carga dos assemblies.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyRepositoryValidateResult">
            <summary>
            Armazena o resultado da validação do repositório de assemblies.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyRepositoryValidateResult.#ctor(System.Collections.Generic.IEnumerable{Colosoft.Reflection.AssemblyRepositoryValidateResult.Entry})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="entries"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyRepositoryValidateResult.GetEnumerator">
            <summary>
            Recupera o enumerador das entradas.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyRepositoryValidateResult.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador das entradas.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyRepositoryValidateResult.Count">
            <summary>
            Quantidade de entradas
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyRepositoryValidateResult.Item(System.Int32)">
            <summary>
            Recupera a entrada na posição informada.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyRepositoryValidateResult.HasError">
            <summary>
            Verifica se o resultado possui algum erro.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyRepositoryValidateResult.EntryType">
            <summary>
            Tipo de entrada.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.AssemblyRepositoryValidateResult.EntryType.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.AssemblyRepositoryValidateResult.EntryType.Info">
            <summary>
            Informação.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.AssemblyRepositoryValidateResult.EntryType.Warn">
            <summary>
            Alerta
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyRepositoryValidateResult.Entry">
            <summary>
            Armazena os dados da entrada.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyRepositoryValidateResult.Entry.#ctor(Colosoft.IMessageFormattable,Colosoft.Reflection.AssemblyRepositoryValidateResult.EntryType,System.Exception)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="message"></param>
            <param name="type"></param>
            <param name="error"></param>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyRepositoryValidateResult.Entry.Message">
            <summary>
            Mensagem da entrada.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyRepositoryValidateResult.Entry.Type">
            <summary>
            Tipo da entrada.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyRepositoryValidateResult.Entry.Error">
            <summary>
            Erro relacioando.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyResolverException">
            <summary>
            Representa a exception da resoluções dos assemblies.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyResolverException.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyResolverException.#ctor(System.String,System.Exception)">
            <summary>
            Cria a instancia com a mensagem e o erro interno.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyResolverException.#ctor(System.String)">
            <summary>
            Cria a instancia com a mensagem do erro.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyResolverManager">
            <summary>
            Implementação do assembly resolver.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.AssemblyResolverManager._assemblies">
            <summary>
            Relação dos assemblies carregados.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.AssemblyResolverManager._loadedAssemblies">
            <summary>
            Armazena a relação dos assemblies carregados
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyResolverManager.#ctor(System.AppDomain)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="appDomain">Domínio da aplicação que será utilizado.</param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyResolverManager.InitializeAssemblies">
            <summary>
            Inicializa os assemblies.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyResolverManager.AppDomainAssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Método acionado quando for necessário a resolução de um assembly.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyResolverManager.AppDomainAssemblyLoad(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            Método acionado quando um assembly é carregado.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyResolverManager.AssemblyResolverExtLoaded(System.Object,Colosoft.Reflection.AssemblyResolverLoadEventArgs)">
            <summary>
            Método acionado quando o resolver do assembly for carregado
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyResolverManager.CheckAssembly(System.String)">
            <summary>
            Verifica se o assembly associado com o nome, já foi carregado.
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyResolverManager.Insert(System.Int32,Colosoft.Reflection.IAssemblyResolver)">
            <summary>
            Adiciona um novo resolvedor na posição informada.
            </summary>
            <param name="index"></param>
            <param name="resolver"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyResolverManager.Add(Colosoft.Reflection.IAssemblyResolver)">
            <summary>
            Adiciona um novo resolvedor para o gerenciador.
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyResolverManager.Remove(Colosoft.Reflection.IAssemblyResolver)">
            <summary>
            Remove a instancia do resolvedor do gerenciador.
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyResolverManager.Clear">
            <summary>
            Remove todos items do gerenciador.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyResolverManager.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyResolverManager.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyResolverManager.GetEnumerator">
            <summary>
            Recupera o enumerador dos itens.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyResolverManager.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador dos itens.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyResolverManager.Count">
            <summary>
            Quantidade de itens no gerenciador.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyResolverManager.Item(System.Int32)">
            <summary>
            Recupera o item pelo indice informado.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyResolverManager.AppDomain">
            <summary>
            Instancia do domínio da aplicação associado.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.BindingRedirect">
            <summary>
            Armazena os dados da vinculação redirecionado .
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.BindingRedirect.NewVersion">
            <summary>
            Nova versão.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.BindingRedirect.OldVersionMax">
            <summary>
            Maximo da antiga versão.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.BindingRedirect.OldVersionMin">
            <summary>
            Mínimo da antiga versão.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.Composition.CreationPolicy">
            <summary>
            Possíveis polícas de criação.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.Composition.CreationPolicy.Any">
            <summary>
            Qualquer.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.Composition.CreationPolicy.Shared">
            <summary>
            Criação compartilhada.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.Composition.CreationPolicy.NonShared">
            <summary>
            Criação não compartilhada.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.Composition.DefaultExportManager">
            <summary>
            Implementação padrão do gerenciador das exportações.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.Composition.IExportManager">
            <summary>
            Assinatura do gerenciador das exportações.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Composition.IExportManager.GetExport(Colosoft.Reflection.TypeName,System.String,System.String)">
            <summary>
            Recupera a exportação pelo nome do contrato.
            </summary>
            <param name="contractTypeName">Nome do tipo do contrato.</param>
            <param name="contractName">Nome do contrato.</param>
            <param name="uiContext">Contexto da interface com o usuário.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Composition.IExportManager.GetExports(Colosoft.Reflection.TypeName,System.String,System.String)">
            <summary>
            Recupera a relação das exportações do tipo de contrato informado no contexto visual.
            </summary>
            <param name="contractTypeName">Nome do tipo do contrato.</param>
            <param name="contractName">Nome do contrato.</param>
            <param name="uiContext">Contexto da interface com o usuário.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Composition.IExportManager.GetExports(System.String)">
            <summary>
            Recupera todos os exports associados com o contexto intercafe com o usuário.
            </summary>
            <param name="uiContext">Contexto da interface com o usuário.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Composition.IExportManager.Start(System.String[],System.Boolean)">
            <summary>
            Inicializa o gerenciador.
            </summary>
            <param name="uiContexts">Contextos de interface com o usuário que serão carregados.</param>
            <param name="throwError">Identifica se é para dispara o erro caso ocorra.</param>
        </member>
        <member name="E:Colosoft.Reflection.Composition.IExportManager.Started">
            <summary>
            Evento acionado quando o gerenciador for iniciado.
            </summary>
        </member>
        <member name="E:Colosoft.Reflection.Composition.IExportManager.StartError">
            <summary>
            Evento acionado qaudno ocorre um erro no inicialização do gerenciador.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Composition.IExportManager.IsStarted">
            <summary>
            Identifica se o gerenciador foi iniciado.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Composition.DefaultExportManager.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Composition.DefaultExportManager.#ctor(System.Collections.Generic.IEnumerable{Colosoft.Reflection.Composition.IExport})">
            <summary>
            Cria o gerenciador e inicializa já com a lista de exports.
            </summary>
            <param name="exports"></param>
        </member>
        <member name="M:Colosoft.Reflection.Composition.DefaultExportManager.OnStarted">
            <summary>
            Método acionado quando a instancia for iniciada.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Composition.DefaultExportManager.OnStartError(System.Exception,System.String[])">
            <summary>
            Método acionado quando ocorre um erro na iniciação.
            </summary>
            <param name="exception"></param>
            <param name="uiContexts"></param>
        </member>
        <member name="M:Colosoft.Reflection.Composition.DefaultExportManager.GetExport(Colosoft.Reflection.TypeName,System.String,System.String)">
            <summary>
            Recupera a exportação pelo nome do contrato.
            </summary>
            <param name="contractTypeName">Nome do tipo do contrato.</param>
            <param name="contractName">Nome do contrato.</param>
            <param name="uiContext">Contexto da interface com o usuário.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Composition.DefaultExportManager.GetExports(Colosoft.Reflection.TypeName,System.String,System.String)">
            <summary>
            Recupera a relação das exportações do tipo de contrato informado no contexto visual.
            </summary>
            <param name="contractTypeName">Nome do tipo do contrato.</param>
            <param name="contractName">Nome do contrato.</param>
            <param name="uiContext">Contexto da interface com o usuário.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Composition.DefaultExportManager.GetExports(System.String)">
            <summary>
            Recupera todos os exports associados com o contexto intercafe com o usuário.
            </summary>
            <param name="uiContext">Contexto da interface com o usuário.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Composition.DefaultExportManager.Start(System.String[],System.Boolean)">
            <summary>
            Inicializa o gerenciador.
            </summary>
            <param name="uiContexts">Contextos de interface com o usuário que serão carregados.</param>
            <param name="throwError">Identifica se é para dispara o erro caso ocorra.</param>
        </member>
        <member name="E:Colosoft.Reflection.Composition.DefaultExportManager.Started">
            <summary>
            Evento acionado quando o gerenciador for iniciado.
            </summary>
        </member>
        <member name="E:Colosoft.Reflection.Composition.DefaultExportManager.StartError">
            <summary>
            Evento acionado qaudno ocorre um erro no inicialização do gerenciador.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Composition.DefaultExportManager.IsStarted">
            <summary>
            Identifica se o gerenciador foi iniciado.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.Composition.Export">
            <summary>
            Implementação que armazena os dados de exportção.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.Composition.IExport2">
            <summary>
            Assinatura com o completo da interface <see cref="T:Colosoft.Reflection.Composition.IExport"/>
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.Composition.IExport">
            <summary>
            Assinatura de uma exportação.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Composition.IExport.Type">
            <summary>
            Tipo exportado.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Composition.IExport.ContractName">
            <summary>
            Nome do contrato.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Composition.IExport.ContractType">
            <summary>
            Nome do tipo do contrato.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Composition.IExport.ImportingConstructor">
            <summary>
            Identifica se é para importa o construtor.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Composition.IExport.CreationPolicy">
            <summary>
            Política de criação.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Composition.IExport.UseDispatcher">
            <summary>
            Identifica se é para usar o dispatcher
            padrão do sistema para criar a instancia.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Composition.IExport.Metadata">
            <summary>
            Metadados da instancia do export.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Composition.IExport2.UIContext">
            <summary>
            Contexto de interface com o usuário.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Composition.Export.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Composition.Export.#ctor(Colosoft.Reflection.Composition.IExport)">
            <summary>
            Cria a instancia com base na export informada.
            </summary>
            <param name="export"></param>
        </member>
        <member name="M:Colosoft.Reflection.Composition.Export.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor usado para deserializar os dados.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Reflection.Composition.Export.Colosoft#Serialization#ICompactSerializable#Deserialize(Colosoft.Serialization.IO.CompactReader)">
            <summary>
            Deserializa os dados.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Colosoft.Reflection.Composition.Export.Colosoft#Serialization#ICompactSerializable#Serialize(Colosoft.Serialization.IO.CompactWriter)">
            <summary>
            Serializa os dados.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Colosoft.Reflection.Composition.Export.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Recupera os dados que serão usados pela serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Colosoft.Reflection.Composition.Export.Type">
            <summary>
            Tipo exportado.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Composition.Export.ContractName">
            <summary>
            Nome do contrato.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Composition.Export.ContractType">
            <summary>
            Nome do tipo do contrato.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Composition.Export.ImportingConstructor">
            <summary>
            Identifica se é para importa o construtor.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Composition.Export.CreationPolicy">
            <summary>
            Política de criação.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Composition.Export.UseDispatcher">
            <summary>
            Identifica se é para usar o dispatcher
            padrão do sistema para criar a instancia.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Composition.Export.Metadata">
            <summary>
            Metadados da instancia do export.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Composition.Export.UIContext">
            <summary>
            Contexto de interface com o usuário.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.Composition.ExportCollection">
            <summary>
            Implementação da coleção de exports.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Composition.ExportCollection.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Composition.ExportCollection.#ctor(System.Collections.Generic.IEnumerable{Colosoft.Reflection.Composition.IExport})">
            <summary>
            Inicializa a coleção com os itens informados.
            </summary>
            <param name="items">Relação dos itens que serão usados na inicialização.</param>
        </member>
        <member name="M:Colosoft.Reflection.Composition.ExportCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor usado para deserializar os dados.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Reflection.Composition.ExportCollection.Add(Colosoft.Reflection.Composition.IExport)">
            <summary>
            Adiciona o item para a coleção.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Reflection.Composition.ExportCollection.Clear">
            <summary>
            Limpa os itens da coleção.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Composition.ExportCollection.Contains(Colosoft.Reflection.Composition.IExport)">
            <summary>
            Verifica se o item informado está na coleção.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Composition.ExportCollection.CopyTo(Colosoft.Reflection.Composition.IExport[],System.Int32)">
            <summary>
            Copia os dados para o vetor informado.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Colosoft.Reflection.Composition.ExportCollection.Remove(Colosoft.Reflection.Composition.IExport)">
            <summary>
            Remove o item da coleção.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Composition.ExportCollection.RemoveAt(System.Int32)">
            <summary>
            Remove o item no indice informado.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Reflection.Composition.ExportCollection.Colosoft#Serialization#ICompactSerializable#Deserialize(Colosoft.Serialization.IO.CompactReader)">
            <summary>
            Deserializa os dados.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Colosoft.Reflection.Composition.ExportCollection.Colosoft#Serialization#ICompactSerializable#Serialize(Colosoft.Serialization.IO.CompactWriter)">
            <summary>
            Serializa os dados.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Colosoft.Reflection.Composition.ExportCollection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Recupera os dados que serão usados pela serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Reflection.Composition.ExportCollection.GetEnumerator">
            <summary>
            Recupera o enumerador dos itens.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Composition.ExportCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador dos itens.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.Composition.ExportCollection.IsReadOnly">
            <summary>
            Identifica se a coleção é somente leitura.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Composition.ExportCollection.Count">
            <summary>
            Quantidade de itens na coleção.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Composition.ExportCollection.Item(System.Int32)">
            <summary>
            Recupera e define o valor para a posição da coleção.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Reflection.Composition.ExportComparer">
            <summary>
            Implementação usada para comparar se dois IExport são equivalentes
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.Composition.ExportComparer.Instance">
            <summary>
            Instancia única do comparador.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Composition.ExportComparer.ToString(Colosoft.Reflection.Composition.IExport)">
            <summary>
            Recupera o texto que representa o IExport.
            </summary>
            <param name="export"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Composition.ExportComparer.Equals(Colosoft.Reflection.Composition.IExport,Colosoft.Reflection.Composition.IExport)">
            <summary>
            Verifica se as instancia informadas são compatíveis.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Composition.ExportComparer.GetHashCode(Colosoft.Reflection.Composition.IExport)">
            <summary>
            HashCode.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Composition.ExportComparer.Compare(Colosoft.Reflection.Composition.IExport,Colosoft.Reflection.Composition.IExport)">
            <summary>
            Compara as instancias informadas.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Reflection.Composition.ExportManagerStartErrorArgs">
            <summary>
            Armazena os argumentos de quando ocorre um erro ao iniciar o gerenciador.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Composition.ExportManagerStartErrorArgs.#ctor(System.Exception,System.String[])">
            <summary>
            Construtor padrão.
            </summary>
            <param name="error"></param>
            <param name="uiContexts"></param>
        </member>
        <member name="P:Colosoft.Reflection.Composition.ExportManagerStartErrorArgs.Error">
            <summary>
            Instancia do erro ocorrido.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Composition.ExportManagerStartErrorArgs.UIContexts">
            <summary>
            Contextos de interface com o usuário.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.Dynamic.ClassFactory">
            <summary>
            Factory usada na criação das classe dinamicas.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Dynamic.ClassFactory.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Dynamic.ClassFactory.CreateDynamicClass(Colosoft.Reflection.Dynamic.DynamicProperty[])">
            <summary>
            Cria o tipo da classe dinâmica.
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Dynamic.ClassFactory.GenerateProperties(System.Reflection.Emit.TypeBuilder,Colosoft.Reflection.Dynamic.DynamicProperty[])">
            <summary>
            Gera as propriedades para o tipo que será criado.
            </summary>
            <param name="tb"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Dynamic.ClassFactory.GenerateEquals(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo[])">
            <summary>
            Cria o método de comparação Equals.
            </summary>
            <param name="tb"></param>
            <param name="fields"></param>
        </member>
        <member name="M:Colosoft.Reflection.Dynamic.ClassFactory.GenerateGetHashCode(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo[])">
            <summary>
            Cria o método para calcular o hashcode.
            </summary>
            <param name="tb"></param>
            <param name="fields"></param>
        </member>
        <member name="M:Colosoft.Reflection.Dynamic.ClassFactory.GetDynamicClass(System.Collections.Generic.IEnumerable{Colosoft.Reflection.Dynamic.DynamicProperty})">
            <summary>
            Recupera a classe dinâmica associada com as propriedades informada.
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Reflection.Dynamic.DynamicClass">
            <summary>
            Implementação base para a classe dinâmica.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Dynamic.DynamicClass.ToString">
            <summary>
            Recupera o texto que representa a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Reflection.Dynamic.DynamicProperty">
            <summary>
            Armazena os dados de uma propriedade dinâmica.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Dynamic.DynamicProperty.#ctor(System.String,System.Type)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="name">Nome da propriedade.</param>
            <param name="type">Tipo da propriedade.</param>
        </member>
        <member name="P:Colosoft.Reflection.Dynamic.DynamicProperty.Name">
            <summary>
            Nome da propriedade.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Dynamic.DynamicProperty.Type">
            <summary>
            Tipo da propriedade.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.Dynamic.Signature">
            <summary>
            Representa a assinatura de cuma classe.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Dynamic.Signature.#ctor(System.Collections.Generic.IEnumerable{Colosoft.Reflection.Dynamic.DynamicProperty})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Colosoft.Reflection.Dynamic.Signature.GetHashCode">
            <summary>
            Recupera o hash code da instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Dynamic.Signature.Equals(System.Object)">
            <summary>
            Compara com a instancia informada.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Dynamic.Signature.Equals(Colosoft.Reflection.Dynamic.Signature)">
            <summary>
            Compara com outra assinatura.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.Dynamic.Signature.Properties">
            <summary>
            Propriedade associadas.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.FrameworkRedirectionsScanner">
            <summary>
            Classe que auxilia na localização dos redirecionamentos
            do framework.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.FrameworkRedirectionsScanner.GetFrameworkRedirections(System.Collections.Generic.List{Colosoft.Reflection.AsmData},Colosoft.Reflection.IAssemblyAnalyzerObserver)">
            <summary>
            Recupera os redirecionamentos do Framework.
            </summary>
            <param name="assembliesInGac"></param>
            <param name="progressDialog"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Reflection.IAssemblyAnalyzerObserver">
            <summary>
            Observer utilizado na analize.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyAnalyzerObserver.ReportProgress(System.Int32,Colosoft.IMessageFormattable)">
            <summary>
            Reporta o progresso.
            </summary>
            <param name="progressPercentage"></param>
            <param name="actionText">Texto da ação.</param>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyAnalyzerObserver.ReportErrorMessage(Colosoft.IMessageFormattable)">
            <summary>
            Reporta uma mensagem de erro.
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Colosoft.Reflection.IAssemblyAnalyzerObserver.Progress">
            <summary>
            Atual progresso.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.IAssemblyAnalyzerObserver.Text">
            <summary>
            Texto atual.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.IAssemblyAnalyzerObserver.CancellationPending">
            <summary>
            Identifica se a operação está pendente para ser cancelada.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.IAssemblyInfoRepositoryObserver">
            <summary>
            Assinatura do observer do repositório das informações de assembly.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyInfoRepositoryObserver.OnAnalysisAssemblyProgressChanged(Colosoft.IMessageFormattable,System.Int32)">
            <summary>
            Método acionad quando o progresso de analize dos assemblies é alterado. do repositório é alterado.
            </summary>
            <param name="message"></param>
            <param name="percentage"></param>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyInfoRepositoryObserver.OnLoadingAssemblyFiles">
            <summary>
            Método acionado quando os arquivos de assembly estão sendo carregados.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyInfoRepositoryObserver.OnLoaded">
            <summary>
            Evento acionado quando o repositório for carregado.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyLoaderGetResult">
            <summary>
            Representa o resultado
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyLoaderGetResult.#ctor(System.Collections.Generic.IEnumerable{Colosoft.Reflection.AssemblyLoaderGetResult.Entry})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="entries">Entradas do resultado.</param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyLoaderGetResult.GetEnumerator">
            <summary>
            Recupera o enumerador das entradas do resultado.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyLoaderGetResult.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador das entradas do resultado.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyLoaderGetResult.Count">
            <summary>
            Quantidade de entradas no resultado.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyLoaderGetResult.Entry">
            <summary>
            Representa uma entrada do resultado.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyLoaderGetResult.Entry.#ctor(System.String,System.Reflection.Assembly,System.Boolean,System.Exception)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="assemblyName">Nome do assembly da entrada.</param>
            <param name="assembly">Instancia do assembly carregado.</param>
            <param name="success">Identifica se a carga do assembly foi realizada com sucesso.</param>
            <param name="error"></param>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyLoaderGetResult.Entry.AssemblyName">
            <summary>
            Nome do assembly.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyLoaderGetResult.Entry.Assembly">
            <summary>
            Instancia do assembly carregado.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyLoaderGetResult.Entry.Success">
            <summary>
            Identifica se o assembly foi carregado com sucesso.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyLoaderGetResult.Entry.Error">
            <summary>
            Error ocorrid na carga do assembly.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyLoaderContextInitializeResult">
            <summary>
            Armazena o resultado da inicialização do contexto.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyLoaderContextInitializeResult.ToString">
            <summary>
            Recupera o texto que representa a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyLoaderContextInitializeResult.AssembliesLoaded">
            <summary>
            Relação dos assemblies carregados.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyLoaderContextInitializeResult.AssemblyLoadErrors">
            <summary>
            Errors ocorridos na carga dos assemblies
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyLoaderContextInitializeResult.Success">
            <summary>
            Identifica se a inicializa foi executa com sucesso.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyLoaderContextInitializeResult.Error">
            <summary>
            Erro ocorrido na inicialização.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyLoaderContextInitializeResult.AssemblyLoadError">
            <summary>
            Armazena o erro ao carregar o assembly.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyLoaderContextInitializeResult.AssemblyLoadError.ToString">
            <summary>
            Recupera o texto que representa a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyLoaderContextInitializeResult.AssemblyLoadError.AssemblyName">
            <summary>
            Nome do assembly.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyLoaderContextInitializeResult.AssemblyLoadError.Error">
            <summary>
            Erro ocorrido.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.IAssemblyLoaderContext">
            <summary>
            Assinatura da classe que representa um contexto do loader de assemblies.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyLoaderContext.InitializeContext(System.String[],System.String)">
            <summary>
            Inicializa o carga dos assemblies do contexto informado.
            </summary>
            <param name="contextNames">Nomes dos contextos.</param>
            <param name="uiContext">Contexto de interface com o usuário.</param>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyLoaderContext.GetContextAssemblies(System.String[],System.String)">
            <summary>
            Recupera os assemblies do contexto informado.
            </summary>
            <param name="contextNames">Nomes dos contextos.</param>
            <param name="uiContext">Contexto de interface com o usuário.</param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Reflection.IAssemblyPackageDownloader">
            <summary>
            Assinatura da classe responsável pelo download de um pacote de assemblies.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyPackageDownloader.Add(Colosoft.Reflection.AssemblyPackage)">
            <summary>
            Adiciona um pacote para fazer o download.
            </summary>
            <param name="package"></param>
        </member>
        <member name="T:Colosoft.Reflection.IAssemblyPackageResult">
            <summary>
            Representa o resultado de um pacote de assemblies.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyPackageResult.ExtractPackageFiles(System.String,System.Boolean)">
            <summary>
            Extraí os arquivos do pacote.
            </summary>
            <param name="outputDirectory">Diretório de saída.</param>
            <param name="canOverride">True para sobreescrever os arquivos que existirem.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyPackageResult.GetAssemblyStream(Colosoft.Reflection.AssemblyPart)">
            <summary>
            Recupera o stream do assembly.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyPackageResult.GetAssembly(Colosoft.Reflection.AssemblyPart)">
            <summary>
            Recupera o assembly.
            </summary>
            <param name="name">Nome do assembly que será recuperado.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyPackageResult.LoadAssemblyGuarded(Colosoft.Reflection.AssemblyPart,System.Exception@)">
            <summary>
            Carrega o assembly guardado.
            </summary>
            <param name="name"></param>
            <param name="exception">Exception caso ocorra.</param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Reflection.IAssemblyPackageValidator">
            <summary>
            Classe responsável pela validação dos pacotes de assembly.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyPackageValidator.Validate(Colosoft.Reflection.IAssemblyPackage[])">
            <summary>
            Valida os pacote informados.
            </summary>
            <param name="assemblyPackages">Instancia dos pacotes que serão validados.</param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyRepositoryStartedArgs">
            <summary>
            Argumentos para o evento que identifica a inicialização do repositório.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyRepositoryStartedArgs.#ctor(System.Exception[])">
            <summary>
            Construtor padrão.
            </summary>
            <param name="exceptions"></param>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyRepositoryStartedArgs.Exceptions">
            <summary>
            Exception caso tenha ocorrido.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyRepositoryStartedHandler">
            <summary>
            Representa o evento acionado quando o repositório for iniciado.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyRepositoryMaintenanceExecuteResult">
            <summary>
            Armazena o resultado da execução da manuteção do repositório de assemblies.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyRepositoryMaintenanceExecuteResult.#ctor(System.Collections.Generic.IEnumerable{Colosoft.Reflection.AssemblyRepositoryMaintenanceExecuteResult.Entry})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="entries"></param>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyRepositoryMaintenanceExecuteResult.GetEnumerator">
            <summary>
            Recupera o enumerador das entradas.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyRepositoryMaintenanceExecuteResult.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador das entradas.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyRepositoryMaintenanceExecuteResult.Count">
            <summary>
            Quantidade de entradas
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyRepositoryMaintenanceExecuteResult.Item(System.Int32)">
            <summary>
            Recupera a entrada na posição informada.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyRepositoryMaintenanceExecuteResult.HasError">
            <summary>
            Verifica se o resultado possui algum erro.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyRepositoryMaintenanceExecuteResult.EntryType">
            <summary>
            Tipo de entrada.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.AssemblyRepositoryMaintenanceExecuteResult.EntryType.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.AssemblyRepositoryMaintenanceExecuteResult.EntryType.Info">
            <summary>
            Informação.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.AssemblyRepositoryMaintenanceExecuteResult.EntryType.Warn">
            <summary>
            Alerta
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyRepositoryMaintenanceExecuteResult.Entry">
            <summary>
            Armazena os dados da entrada.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.AssemblyRepositoryMaintenanceExecuteResult.Entry.#ctor(Colosoft.IMessageFormattable,Colosoft.Reflection.AssemblyRepositoryMaintenanceExecuteResult.EntryType,System.Exception)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="message"></param>
            <param name="type"></param>
            <param name="error"></param>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyRepositoryMaintenanceExecuteResult.Entry.Message">
            <summary>
            Mensagem da entrada.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyRepositoryMaintenanceExecuteResult.Entry.Type">
            <summary>
            Tipo da entrada.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyRepositoryMaintenanceExecuteResult.Entry.Error">
            <summary>
            Erro relacioando.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.IAssemblyRepositoryMaintenance">
            <summary>
            Assinatura das classes reponsáveis pela manutenção do repositório de assemblies.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.IAssemblyRepositoryMaintenance.Execute">
            <summary>
            Executa a manutenção do repositório.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.IAssemblyRepositoryMaintenance.Name">
            <summary>
            Nome da instancia.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyResolverLoadEventArgs">
            <summary>
            Armazena os argumentos do evento acionado quando os resolver for carregado.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.AssemblyResolverLoadEventArgs.Result">
            <summary>
            Resultado da carga dos assemblies..
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.AssemblyResolverLoadHandler">
            <summary>
            Representa o evento acionado quando o resolver for carregado.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Colosoft.Reflection.LibraryImport">
            <summary>
            Armazena os dados da importação de uma biblioteca.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.LibraryImport.#ctor(System.String,System.Boolean)">
            <summary>
            Cria uma instancia com o caminho do biblioteca.
            </summary>
            <param name="fullPath"></param>
            <param name="exists">Identifica se existe</param>
        </member>
        <member name="M:Colosoft.Reflection.LibraryImport.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="fileName"></param>
            <param name="fullPath"></param>
            <param name="exists"></param>
        </member>
        <member name="M:Colosoft.Reflection.LibraryImport.GetLongDescription">
            <summary>
            Recupera a descrição da biblioteca.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.LibraryImport.ToString">
            <summary>
            Recupera o texto que representa a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.LibraryImport.Exists">
            <summary>
            Identifica se o arquivo existe.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.LibraryImport.FileName">
            <summary>
            Nome do arquivo.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.LibraryImport.FullPath">
            <summary>
            Caminho completo para a biblioteca.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.LibraryImport.Version">
            <summary>
            Versão da biblioteca.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.Local.AssemblyInfoRepository">
            <summary>
            Assinatura de um reposiório com as informações dos assemblies.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyInfoRepository.#ctor(System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="assembliesDirectory">Diretório dos assemblies que será observado.</param>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyInfoRepository.#ctor(System.String,Colosoft.Reflection.IAssemblyInfoRepositoryObserver)">
            <summary>
            Cria uma instancia já definindo o Worker background.
            </summary>
            <param name="assembliesDirectory"></param>
            <param name="observer"></param>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyInfoRepository.ManifestExists">
            <summary>
            Verifica se o arquivo de manifesto existe.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyInfoRepository.GetManifest">
            <summary>
            Recupera as informações de assembly do arquivo de manifesto.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyInfoRepository.SaveManifest">
            <summary>
            Salva o arquivo de manifesto.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyInfoRepository.CheckInitialize">
            <summary>
            Verifica se a instancia está inicializada, caso não, executa a inicialização.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyInfoRepository.ConvertAssemblyInfo(Colosoft.Reflection.AsmData,System.String)">
            <summary>
            Converte para as informações do assembly.
            </summary>
            <param name="data"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyInfoRepository.OnLoaded">
            <summary>
            Método acionado quando o repositório for carregado.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyInfoRepository.OnLoadingAssemblyFiles">
            <summary>
            Método acioando quando os arquivos de assembly estão sendo carregados.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyInfoRepository.OnAnalysisAssemblyProgressChanged(Colosoft.IMessageFormattable,System.Int32)">
            <summary>
            Método acionad quando o progresso de analize dos assemblies é alterado. do repositório é alterado.
            </summary>
            <param name="message"></param>
            <param name="percentage"></param>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyInfoRepository.Refresh(System.Boolean)">
            <summary>
            Atualiza os dados do repositório.
            </summary>
            <param name="executeAnalyzer">Identifica se é para executar o analizador.</param>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyInfoRepository.TryGet(System.String,Colosoft.Reflection.AssemblyInfo@,System.Exception@)">
            <summary>
            Recupera as informações do assembly pelo nome informado.
            </summary>
            <param name="assemblyName"></param>
            <param name="assemblyInfo"></param>
            <param name="exception">Error ocorrido.</param>
            <returns>True se as informações do assembly forem recuperadas com sucesso.</returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyInfoRepository.Contains(System.String)">
            <summary>
            Verifica se no repositório existe as informações do assembly informado.
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyInfoRepository.GetEnumerator">
            <summary>
            Recupera o enumerador da instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyInfoRepository.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador da instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Colosoft.Reflection.Local.AssemblyInfoRepository.Loaded">
            <summary>
            Evento 
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Local.AssemblyInfoRepository.IsLoaded">
            <summary>
            Identifica se a instancia foi carregada.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Local.AssemblyInfoRepository.ManifestFileName">
            <summary>
            Nome do arquivo de manifesto.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Local.AssemblyInfoRepository.Count">
            <summary>
            Quantidade de assemblies carregados no repositório.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Local.AssemblyInfoRepository.IsChanged">
            <summary>
            Identifica se o repositório sofreu alguma alteração.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Local.AssemblyInfoRepository.IsManifestFileChanged">
            <summary>
            Identifica se arquivo de manifesto foi alterado.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.Local.AssemblyInfoEntry">
            <summary>
            Armazena os dados da entrada.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyInfoEntry.GetMySchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Recupera o esquema XML do tipo.
            </summary>
            <param name="xs"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyInfoEntry.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Recupera o esquema.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.Local.AssemblyInfoEntry.Info">
            <summary>
            Informações do assembly.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Local.AssemblyInfoEntry.FileName">
            <summary>
            Nome do arquivo.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.Local.AssemblyPackageResult">
            <summary>
            Armazena o resulta de um pacote.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyPackageResult.#ctor(Colosoft.Reflection.AssemblyResolverManager,System.Guid,System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="assemblyResolverManager"></param>
            <param name="uid"></param>
            <param name="packageFileName">Nome do arquivo do pacote.</param>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyPackageResult.Finalize">
            <summary>
            Destrutor;
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyPackageResult.ExtractPackageAssemblies">
            <summary>
            Extrai os assemblies do pacote.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyPackageResult.ExtractPackageFiles(System.String,System.Boolean)">
            <summary>
            Extraí os arquivos do pacote.
            </summary>
            <param name="outputDirectory">Diretório de saída.</param>
            <param name="canOverride">True para sobreescrever os arquivos que existirem.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyPackageResult.GetAssemblyStream(Colosoft.Reflection.AssemblyPart)">
            <summary>
            Recupera o stream do assembly.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyPackageResult.LoadAssembly(Colosoft.Reflection.AssemblyPart)">
            <summary>
            Carrega o assembly informado.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyPackageResult.LoadAssemblyGuarded(Colosoft.Reflection.AssemblyPart,System.Exception@)">
            <summary>
            Carrega o assembly guardado.
            </summary>
            <param name="name"></param>
            <param name="exception">Exception caso ocorra.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyPackageResult.GetAssembly(Colosoft.Reflection.AssemblyPart)">
            <summary>
            Recupera o assembly.
            </summary>
            <param name="name">Nome do assembly que será recuperado.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyPackageResult.CreatePackage">
            <summary>
            Cria uma nova instancia do pacote.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyPackageResult.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyPackageResult.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Colosoft.Reflection.Local.AssemblyPackageResult.AssemblyResolverManager">
            <summary>
            Dominio da aplicação.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.Local.AssemblyPackageValidator">
            <summary>
            Implementação do validador de pacotes para arquivos locais.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.Local.AssemblyPackageValidator._assemblyFilesDirectories">
            <summary>
            Repositório dos arquivos de assembly.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyPackageValidator.#ctor(System.String[])">
            <summary>
            Construtor padrão.
            </summary>
            <param name="assemblyFilesDirectories">Diretórios onde estão os arquivos de assembly.</param>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyPackageValidator.Validate(Colosoft.Reflection.IAssemblyPackage,System.Collections.Generic.IDictionary{System.String,Colosoft.Reflection.Local.AssemblyPackageValidator.FileInfo2})">
            <summary>
            Valida o pacote.
            </summary>
            <param name="assemblyPackage"></param>
            <param name="files"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyPackageValidator.GetDirectoryFiles">
            <summary>
            Recupera a relação dos arquivos do diretório do repositório.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyPackageValidator.Validate(Colosoft.Reflection.IAssemblyPackage[])">
            <summary>
            Valida os pacote informados.
            </summary>
            <param name="assemblyPackages">Instancia dos pacotes que serão validados.</param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Reflection.Local.AssemblyPackageValidator.FileInfo2">
            <summary>
            Armazena as informações do arquivo.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyPackageValidator.FileInfo2.#ctor(System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="path">Caminho do arquivo.</param>
        </member>
        <member name="P:Colosoft.Reflection.Local.AssemblyPackageValidator.FileInfo2.Path">
            <summary>
            Nome completo do arquivo.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Local.AssemblyPackageValidator.FileInfo2.LastWriteTime">
            <summary>
            Horário da ultima escrita do arquivo
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.Local.AssemblyRepository">
            <summary>
            Implementação de um repositório local de assemblies.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.Local.AssemblyRepository._isStarting">
            <summary>
            Identifica se o repositório esta iniciando.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.Local.AssemblyRepository._packages">
            <summary>
            Pacotes carregados.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.#ctor(System.String,System.String[],Colosoft.Reflection.AssemblyResolverManager,Colosoft.Reflection.IAssemblyPackageDownloader,Colosoft.Reflection.IAssemblyPackageValidator)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="repositoryDirectory">Diretório base do respositório.</param>
            <param name="assemblyFilesDirectories">Diretórios dos arquivos de assembly.</param>
            <param name="assemblyResolverManager">Instancia responsável por resolver os assemblies.</param>
            <param name="downloader">Instancia responsável pelo download dos assemblies.</param>
            <param name="validator">Instancia do validador dos pacotes.</param>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.#ctor(System.String,System.String[],Colosoft.Reflection.AssemblyResolverManager,Colosoft.Reflection.IAssemblyPackageDownloader,Colosoft.Reflection.IAssemblyPackageValidator,Colosoft.Reflection.IAssemblyInfoRepository)">
            <summary>
            Construtor completo.
            </summary>
            <param name="repositoryDirectory">Diretório base do respositório.</param>
            <param name="assemblyFilesDirectories">Diretórios dos arquivos de assembly.</param>
            <param name="assemblyResolverManager">Instancia responsável por resolver os assemblies.</param>
            <param name="downloader">Instancia responsável pelo download dos assemblies.</param>
            <param name="validator">Instancia do validador dos pacotes.</param>
            <param name="assemblyInfoRepository">Repositório das informações do assembly.</param>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.DoStart">
            <summary>
            Realiza a inicialização do respositório.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.MaintenanceRobot">
            <summary>
            Representa o robo que realiza a manutenção do repositório.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.GetAssemblyPackageStream(System.Guid)">
            <summary>
            Recupera a stream associado com o pacote de assembly.
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.GetAssemblyPackageLocalFileName(System.Guid)">
            <summary>
            Recupera o caminho do arquivo do pacote.
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.GetAssemblyPackagesFromCache(System.Collections.Generic.IEnumerable{Colosoft.Reflection.AssemblyPart})">
            <summary>
            Recupera o pacote a partir do cache.
            </summary>
            <param name="assemblyParts"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.Downloader_DownloadCompleted(System.Object,Colosoft.Net.DownloadCompletedEventArgs)">
            <summary>
            Método acionado quando o download for concluído.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.GetAssemblyPackageFromLocal(System.Collections.Generic.IEnumerable{Colosoft.Reflection.AssemblyPart})">
            <summary>
            Recupera o pacote das pastas locais.
            </summary>
            <param name="assemblyParts"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.OnStartedInternal(Colosoft.Reflection.AssemblyRepositoryStartedArgs)">
            <summary>
            Método acioando quando o repost
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.OnStarted(Colosoft.Reflection.AssemblyRepositoryStartedArgs)">
            <summary>
            Método acioando quando a instancia
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.GetRepositoryFolder">
            <summary>
            Pasta do repositório.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.Start">
            <summary>
            Inicializa o repositório.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.Add(System.Guid,System.IO.Stream)">
            <summary>
            Adiciona um novo pacote para o repositório.
            </summary>
            <param name="uid"></param>
            <param name="inputStream"></param>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.GetAssemblyPackageStream(Colosoft.Reflection.IAssemblyPackage)">
            <summary>
            Recupera o assembly do pacote informado.
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.DoGetAssemblyPackages(System.Object)">
            <summary>
            Execute a recuperação dos pacotes de assembly.
            </summary>
            <param name="callState"></param>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.BeginGetAssemblyPackages(System.Collections.Generic.IEnumerable{Colosoft.Reflection.AssemblyPart},System.AsyncCallback,System.Object)">
            <summary>
            Inicializa o processo para recuperar a stream do pacote de 
            assembly associado com as parts de assembly informadas.
            </summary>
            <param name="assemblyParts"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.EndGetAssemblyPackages(System.IAsyncResult)">
            <summary>
            Finaliza o processa para recuperar a stream do pacote de 
            assembly associado com as parts de assembly informadas.
            </summary>
            <param name="ar"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.GetAssemblyPackages(System.Collections.Generic.IEnumerable{Colosoft.Reflection.AssemblyPart})">
            <summary>
            Recupera o pacote que se enquadra nas partes informadas.
            </summary>
            <param name="assemblyParts"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.GetAssemblyPackage(System.Guid)">
            <summary>
            Recupera o pacote pelo identificador informado.
            </summary>
            <param name="assemblyPackageUid">Identificador do pacote que será recuperado.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.Validate">
            <summary>
            Verifica se os dados são válidos.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="E:Colosoft.Reflection.Local.AssemblyRepository.Started">
            <summary>
            Evento acionado quando o repositório for iniciado.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Local.AssemblyRepository.UseDirectoryAssemblyPackages">
            <summary>
            Identifica se é para usar pacotes de assemblies de diretório.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Local.AssemblyRepository.IsStarted">
            <summary>
            Identifica se o repositório já foi iniciado.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Local.AssemblyRepository.DefaultRepositoryDirectory">
            <summary>
            Diretório padrão do repositório.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Local.AssemblyRepository.AssemblyResolverManager">
            <summary>
            Instancia do gerencia de resolução dos assemblies.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.Local.AssemblyRepository.DownloaderState">
            <summary>
            Armazena os dados do estado do download.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.Local.AssemblyRepository.DownloaderState.Packages">
            <summary>
            Relação dos pacotes já carregados anteriormente.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.Local.AssemblyRepository.DownloaderState.DownloadEntries">
            <summary>
            Relação da entradas de pacotes de foram carregadas do download.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.DownloaderState.#ctor(Colosoft.Reflection.Local.AssemblyRepository,System.Collections.Generic.IEnumerable{Colosoft.Reflection.IAssemblyPackage},Colosoft.Threading.AsyncResult{Colosoft.Reflection.AssemblyPackageContainer})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="owner"></param>
            <param name="packages"></param>
            <param name="ar"></param>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.DownloaderState.Release">
            <summary>
            Libera o estado.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.Local.AssemblyRepository.AssemblyPackageCacheEntry">
            <summary>
            Representa uma entrada do cache de um pacote.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.Local.AssemblyRepository.AssemblyPackageCacheEntry._fileName">
            <summary>
            Nome do arquivo do pacote.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.AssemblyPackageCacheEntry.#ctor(Colosoft.Reflection.AssemblyPackage)">
            <summary>
            Cria uma nova instancia com base nos dados do pacote.
            </summary>
            <param name="package"></param>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.AssemblyPackageCacheEntry.#ctor(Colosoft.Reflection.AssemblyPackage,System.Collections.Generic.IEnumerable{Colosoft.Reflection.AssemblyPart},System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="package">Instancia do pacote associado.</param>
            <param name="parts">Partes do pacote.</param>
            <param name="fileName">Caminho do arquivo do pacote.</param>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.AssemblyPackageCacheEntry.IsValid(Colosoft.Reflection.Local.AssemblyRepository)">
            <summary>
            Verifica se a entrada é válida.
            </summary>
            <param name="assemblyRepository"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.AssemblyPackageCacheEntry.Destroy">
            <summary>
            Destrói o pacote.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.AssemblyPackageCacheEntry.GetEnumerator">
            <summary>
            Recupera o enumerador das partes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.AssemblyPackageCacheEntry.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador das partes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.AssemblyRepository.AssemblyPackageCacheEntry.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Local.AssemblyRepository.AssemblyPackageCacheEntry.Package">
            <summary>
            Instancia do pacote.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Local.AssemblyRepository.AssemblyPackageCacheEntry.Parts">
            <summary>
            Parte da entrada.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.Local.DirectoryAssemblyPackage">
            <summary>
            Pacote de assemblies representado por um diretório.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.DirectoryAssemblyPackage.#ctor(Colosoft.Reflection.AssemblyResolverManager,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="assemblyResolveManager"></param>
            <param name="assemblyFiles"></param>
        </member>
        <member name="M:Colosoft.Reflection.Local.DirectoryAssemblyPackage.GetFileName(Colosoft.Reflection.AssemblyPart)">
            <summary>
            Recupera o nome do arquivo do assembly.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.DirectoryAssemblyPackage.LoadAssemblies">
            <summary>
            Carrega os assemblies
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.DirectoryAssemblyPackage.GetAssembly(Colosoft.Reflection.AssemblyPart)">
            <summary>
            Recupera o assembly associado com a parte informada.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.DirectoryAssemblyPackage.LoadAssemblyGuarded(Colosoft.Reflection.AssemblyPart,System.Exception@)">
            <summary>
            Carrega o assembly guardado.
            </summary>
            <param name="name"></param>
            <param name="exception">Exception caso ocorra.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.DirectoryAssemblyPackage.GetAssemblyStream(Colosoft.Reflection.AssemblyPart)">
            <summary>
            Recupera o stream do assembly.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.DirectoryAssemblyPackage.ExtractPackageFiles(System.String,System.Boolean)">
            <summary>
            Extraí os arquivos do pacote.
            </summary>
            <param name="outputDirectory">Diretório de saída.</param>
            <param name="canOverride">True para sobreescrever os arquivos que existirem.</param>
            <rereturns>True caso a operação tenha sido realizada com sucesso.</rereturns>
        </member>
        <member name="M:Colosoft.Reflection.Local.DirectoryAssemblyPackage.Contains(Colosoft.Reflection.AssemblyPart)">
            <summary>
            Verifica se existe no pacote uma parte compatível com a informada.
            </summary>
            <param name="assemblyPart">Parte que será comparada.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.DirectoryAssemblyPackage.GetEnumerator">
            <summary>
            Recupera o enumerador das partes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Local.DirectoryAssemblyPackage.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Recupera o enumerador das partes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.Local.DirectoryAssemblyPackage.Assemblies">
            <summary>
            Assemblies associados.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Local.DirectoryAssemblyPackage.Uid">
            <summary>
            Identificador do pacote.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.Local.DirectoryAssemblyPackage.LoadAssemblyResolver">
            <summary>
            Classe usada para resolver os assemblies.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.Local.DirectoryAssemblyPackage.LoadAssemblyResolver._deploymentParts">
            <summary>
            Relação das partes de assemblies que pode ser carregadas.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.Local.DirectoryAssemblyPackage.LoadAssemblyResolver._assemblies">
            <summary>
            Dicionário dos assemblies já carregados.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Local.DirectoryAssemblyPackage.LoadAssemblyResolver.#ctor(System.AppDomain,System.Collections.Generic.Dictionary{System.String,System.Reflection.Assembly},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="appDomain"></param>
            <param name="assemblies"></param>
            <param name="deploymentParts"></param>
        </member>
        <member name="M:Colosoft.Reflection.Local.DirectoryAssemblyPackage.LoadAssemblyResolver.Resolve(System.ResolveEventArgs,System.Reflection.Assembly@,System.Exception@)">
            <summary>
            Resolve o assembly informado.
            </summary>
            <param name="args"></param>
            <param name="assembly"></param>
            <param name="error">Erro ocorrido</param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.Local.DirectoryAssemblyPackage.LoadAssemblyResolver.IsValid">
            <summary>
            Identifica se a instancia está em um estado válido.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.MethodDispatcher">
            <summary>
            Helper class for determining the best matching method from a set of available
            methods. The best matching method is determined from the given set of parameters
            on the call to <see cref="M:Colosoft.Reflection.MethodDispatcher.Invoke(System.Object,System.Collections.Hashtable)"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.MethodDispatcher.#ctor(Colosoft.Reflection.MethodInvoker)">
            <summary>
            Construct a new MethodDispatcher instance. Initially only a single method must be given,
            however, to make full use of this class you may add additional candidate methods using
            the <see cref="M:Colosoft.Reflection.MethodDispatcher.AddInvoker(Colosoft.Reflection.MethodInvoker)"/> method.
            </summary>
            <param name="invoker"></param>
        </member>
        <member name="M:Colosoft.Reflection.MethodDispatcher.AddInvoker(Colosoft.Reflection.MethodInvoker)">
            <summary>
            Add a method to the list of available methods for this method dispatcher.
            </summary>
            <param name="invoker">A MethodInvoker instance with information on the new method.</param>
        </member>
        <member name="M:Colosoft.Reflection.MethodDispatcher.Invoke(System.Object,System.Collections.Hashtable)">
            <summary>
            Invoke the best available match (from a list of methods available) for the supplied parameters. 
            If no method can be called using the supplied parameters, an exception is raised. Any exceptions
            raised by the called method will be logged and then re-thrown.
            </summary>
            <param name="target">The object on which to invoke a method.</param>
            <param name="parameters">A hashtable of parameter name/value pairs. All parameters given
            must be used in the method call in order for a method to be considered.</param>
            <returns>The return value of the invocation.</returns>
        </member>
        <member name="T:Colosoft.Reflection.MethodInfoExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.MethodInfoExtensions.CreateDelegate(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Cria um delegate para o <see cref="T:System.Reflection.MethodInfo"/> informado.
            </summary>
            <param name="method"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Reflection.MethodInvokable">
            <summary>
            Armazena os dados de um método invocavel.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.MethodInvokable.MethodInvoker">
            <summary>
            The <see cref="F:Colosoft.Reflection.MethodInvokable.MethodInvoker"/> wrapping the method to call.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.MethodInvokable.MatchIndicator">
            <summary>
            A value indicating how good a match this is (for a given set of parameters). This value 
            is used by the <see cref="T:Colosoft.Reflection.MethodDispatcher"/> to decide which method to invoke from a 
            set of choices.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.MethodInvokable.ParameterValues">
            <summary>
            The parameter values used when invoking the method.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.MethodInvokable.#ctor(Colosoft.Reflection.MethodInvoker,System.Int32,System.Object[])">
            <summary>
            Construct a new MethodInvokable instance in preparation for executing
            the actual method call.
            </summary>
            <param name="invoker">The <see cref="F:Colosoft.Reflection.MethodInvokable.MethodInvoker"/> wrapping the method to call.</param>
            <param name="matchIndicator">A value indicating how good a match this is (for a given
            set of parameters). This value is used by the <see cref="T:Colosoft.Reflection.MethodDispatcher"/> to decide
            which method to invoke from a set of choices.</param>
            <param name="parameterValues">The parameter values used when invoking the method.</param>
        </member>
        <member name="M:Colosoft.Reflection.MethodInvokable.Invoke(System.Object)">
            <summary>
            Perform the actual method invocation.
            </summary>
            <param name="target">The object to call the method on.</param>
            <returns>The return value of the method call.</returns>
        </member>
        <member name="T:Colosoft.Reflection.MethodInvoker">
            <summary>
            Helper class usada para armazena a informação sobre um método in partilucar e a abilidade
            para executar chamadas.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.MethodInvoker._methodInfo">
            <summary>
            Método relacionados
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.MethodInvoker._parameterInfos">
            <summary>
            Parametros relacionados com o método.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.MethodInvoker._parameterDefaultValues">
            <summary>
            Parametros padrões do método
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.MethodInvoker._requiredParameters">
            <summary>
            Número de parametros requeridos pelo método.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.MethodInvoker.#ctor(System.Reflection.MethodInfo,System.Int32)">
            <summary>
            Construtor
            </summary>
            <param name="methodInfo">O <see cref="P:Colosoft.Reflection.MethodInvoker.MethodInfo"/> para o método relacionado a instancia.</param>
            <param name="requiredParameters">Número de parametros requeridos para chamar o método.</param>
        </member>
        <member name="M:Colosoft.Reflection.MethodInvoker.SetDefaultValue(System.String,System.Object)">
            <summary>
            Armazena os valores padrão do parametros. Esse valor será usado se não houve valor submetido
            para o parametro, e se ele não for um parametro requerido.
            </summary>
            <param name="parameterName">Nome do parametro(case-insensitive).</param>
            <param name="value">Valor padrão.</param>
        </member>
        <member name="M:Colosoft.Reflection.MethodInvoker.PrepareInvoke(System.Collections.Hashtable)">
            <summary>
            Prepara um instancia <see cref="T:Colosoft.Reflection.MethodInvokable"/> para chamar o método submetendo os parametros.
            </summary>
            <param name="parameters">Um hashtable contendo o parametro/valor </param>
            <returns>Uma instancia do <see cref="T:Colosoft.Reflection.MethodInvokable"/> preparado para executar a chamada do método.</returns>
        </member>
        <member name="M:Colosoft.Reflection.MethodInvoker.Invoke(System.Object,System.Object[])">
            <summary>
            Invoke the underlying method on the given target object using the supplied parameter values.
            Any exception raised by performing the method call is logged and then exposed as-is.
            </summary>
            <param name="target">The object on which to invoke the method.</param>
            <param name="parameterValues">The parameter values used to invoke the method.</param>
            <returns>The return value of the invocation.</returns>
        </member>
        <member name="M:Colosoft.Reflection.MethodInvoker.Invoke(System.Object,System.Collections.Hashtable)">
            <summary>
            Invoke the underlying method on the given target object using the supplied parameter values.
            Any exception raised by performing the method call is logged and then exposed as-is.
            </summary>
            <param name="target">The object on which to invoke the method.</param>
            <param name="parameters">A hashtable of parameter name/value pairs.</param>
            <returns>The return value of the invocation.</returns>
        </member>
        <member name="M:Colosoft.Reflection.MethodInvoker.FindParameter(System.String)">
            <summary>
            Procura o parametro do método pelo nome.
            </summary>
            <param name="parameterName">Nome do parametro.</param>
            <returns>Index do parametro.</returns>
        </member>
        <member name="P:Colosoft.Reflection.MethodInvoker.MethodInfo">
            <summary>
            O <see cref="P:Colosoft.Reflection.MethodInvoker.MethodInfo"/> no qual a instancia está relacionada.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.MethodInvoker.RequiredParameters">
            <summary>
            Número de parametro do método (contados da direita para a esquerda).
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.PathRedirection">
            <summary>
            Armazena os dados do caminho de uma redirecionamento.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.PathRedirection.AssemblyName">
            <summary>
            Nome do assembly.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.PathRedirection.Directories">
            <summary>
            Diretórios.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.Redirection">
            <summary>
            Armazena os dados do redirecionamento de uma assembly.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.Redirection.FindConfigFile(System.String)">
            <summary>
            Recupera o caminho do arquivo de configuração.
            </summary>
            <param name="appFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Redirection.GetCorrectAssemblyName(System.Reflection.AssemblyName,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Colosoft.Reflection.Redirection}})">
            <summary>
            Recupera o nome correto do assembly.
            </summary>
            <param name="original"></param>
            <param name="dic"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Redirection.GetFrameworkRedirections(System.Collections.Generic.List{Colosoft.Reflection.AsmData},Colosoft.Reflection.IAssemblyAnalyzerObserver)">
            <summary>
            Recupera os redirecionamentos do framework.
            </summary>
            <param name="assembliesInGac"></param>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Redirection.GetPathRedirections(System.String,System.String)">
            <summary>
            Recupera o caminho do redirecionamento.
            </summary>
            <param name="assemblyName"></param>
            <param name="configFile"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.Redirection.GetVersionRedirections(System.String)">
            <summary>
            Recupera os redirecionamentos das versões.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.Redirection.AssemblyIdentity">
            <summary>
            Identidade do assembly.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.Redirection.BindingRedirection">
            <summary>
            Vinculação do redirecionamento.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.ReflectionFlags.DefaultCriteria">
            <summary>
            Search criteria encompassing all public and non-public members.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.ReflectionFlags.InstanceCriteria">
            <summary>
            Search criteria encompassing all public and non-public instance members.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.ReflectionFlags.StaticCriteria">
            <summary>
            Search criteria encompassing all public and non-public static members, including those of parent classes.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.ReflectionFlags.AllCriteria">
            <summary>
            Search criteria encompassing all members, including those of parent classes.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.ReflectionNamespace">
            <summary>
            Classe com método que auxiliam no namespace.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.ReflectionNamespace.Data">
            <summary>
            Namespace definido para o XML
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.ReflectionNamespace.SchemaInstance">
            <summary>
            Namespace do arquivo de schema
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.ReflectionNamespace.ResolveReflectionSchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Resolve o esquema da consulta.
            </summary>
            <param name="xs"></param>
        </member>
        <member name="P:Colosoft.Reflection.ReflectionNamespace.ReflectionSchema">
            <summary>
            Instancia do esquema da consulta.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.SxsComponent">
            <summary>
            Representa um componente Sxs.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.SxsComponent.#ctor(System.String,System.String,System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="name"></param>
            <param name="version"></param>
            <param name="processorArchitecture"></param>
        </member>
        <member name="M:Colosoft.Reflection.SxsComponent.GetFullPath">
            <summary>
            Recupera o caminho completo.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.SxsComponent.ToString">
            <summary>
            Recupera o texto que representa a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.SxsComponent.Name">
            <summary>
            Nome do componente.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.SxsComponent.ProcessorArchitecture">
            <summary>
            Arquitetura do processador.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.SxsComponent.Version">
            <summary>
            Versão do componente.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.TypeConverter">
            <summary>
            Classe com método que auxiliam na conversão de tipos.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverter.Get(System.Type,System.Xml.XmlNode)">
            <summary>
            Converto o XmlNode submetido em um tipo especifico. Usa-se o InnerXml do XmlNode para re
            cuperar o valor usado na conversão.
            </summary>
            <param name="targetType">Tipo de destino da conversão</param>
            <param name="node">XmlNode fonte dos dados para a conversão.</param>
            <returns>Valor convertido.</returns>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverter.Get(System.Type,System.String)">
            <summary>
            Convert a string submetida em um tipo especifico.
            </summary>
            <param name="targetType">Tipo de destino da conversão.</param>
            <param name="value">Fonte usada na conversão</param>
            <returns>Valor convertido.</returns>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverter.Get(System.Type,System.String,System.Globalization.CultureInfo)">
            <summary>
            Convert a string submetida em um tipo especifico.
            </summary>
            <param name="targetType">Tipo de destino da conversão.</param>
            <param name="value">Fonte usada na conversão</param>
            <param name="culture">Cultura que será usada na conversão.</param>
            <returns>Valor convertido.</returns>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverter.Get(System.Type,System.Object)">
            <summary>
            Convert o objeto para o tipo especificado.
            </summary>
            <param name="targetType">Tipo de destino da conversão.</param>
            <param name="obj">Objeto fonte para conversão.</param>
            <returns>Valor convertido.</returns>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverter.Get(System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert o objeto para o tipo especificado.
            </summary>
            <param name="targetType">Tipo de destino da conversão.</param>
            <param name="obj">Objeto fonte para conversão.</param>
            <param name="culture">Cultura que será usada na conversão.</param>
            <returns>Valor convertido.</returns>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverter.IsNullAssignable(System.Type)">
            <summary>
            Verifica se o tipo aceita valores nulo
            </summary>
            <param name="type">Tipo a ser verificado.</param>
            <returns>True if null can be assigned, false otherwise.</returns>
        </member>
        <member name="T:Colosoft.Log">
            <summary>
            Classe para geração de Log
            </summary>
        </member>
        <member name="M:Colosoft.Log.SetLogger(Colosoft.Logging.ILogger)">
            <summary>
            Define o logger padrão.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Colosoft.Log.Write(Colosoft.IMessageFormattable)">
            <summary>
            Método para a geração de Log
            </summary>
            <param name="message">String que será logada</param>
            <returns>verdadeiro se conseguiu salvar corretamente o log</returns>
        </member>
        <member name="M:Colosoft.Log.Write(Colosoft.IMessageFormattable,Colosoft.Logging.Category,Colosoft.Logging.Priority)">
            <summary>
            Escreve uma nova entrada de log com uma categoria e prioridade especificada.
            </summary>
            <param name="message">Mensagem do corpo do log.</param>
            <param name="category">Categoria da entrada.</param>
            <param name="priority">Prioridade da entrada.</param>
            <returns>True se o log foi salvo com sucesso.</returns>
        </member>
        <member name="M:Colosoft.Log.Write(Colosoft.IMessageFormattable,System.Exception,Colosoft.Logging.Priority)">
            <summary>
            Escreve uma nava entrada de log do tipo de Exception.
            </summary>
            <param name="message">Mensagem do corpo do log.</param>
            <param name="exception">Instancia da exception ocorrida.</param>
            <param name="priority">Prioridade do log.</param>
            <returns>True se o log foi salvo com sucesso.</returns>
        </member>
        <member name="P:Colosoft.Log.Logger">
            <summary>
            Instancia da classe responsável pelo log.
            </summary>
        </member>
        <member name="T:Colosoft.Logging.Category">
            <summary>
            Possíveis categorias usadas pelo log.
            </summary>
        </member>
        <member name="F:Colosoft.Logging.Category.Debug">
            <summary>
            Debug category.
            </summary>
        </member>
        <member name="F:Colosoft.Logging.Category.Exception">
            <summary>
            Exception category.
            </summary>
        </member>
        <member name="F:Colosoft.Logging.Category.Info">
            <summary>
            Informational category.
            </summary>
        </member>
        <member name="F:Colosoft.Logging.Category.Warn">
            <summary>
            Warning category.
            </summary>
        </member>
        <member name="T:Colosoft.Logging.DebugLogger">
            <summary>
            Classe que implementa o logger para o console de Debug.
            </summary>
        </member>
        <member name="M:Colosoft.Logging.DebugLogger.Write(Colosoft.IMessageFormattable,Colosoft.Logging.Category,Colosoft.Logging.Priority)">
            <summary>
            Escreve uma nova entrada de log com uma categoria e prioridade especificada.
            </summary>
            <param name="message">Mensagem do corpo do log.</param>
            <param name="category">Categoria da entrada.</param>
            <param name="priority">Prioridade da entrada.</param>
            <returns>True se o log foi salvo com sucesso.</returns>
        </member>
        <member name="M:Colosoft.Logging.DebugLogger.Write(Colosoft.IMessageFormattable,System.Exception,Colosoft.Logging.Priority)">
            <summary>
            Escreve uma nava entrada de log do tipo de Exception.
            </summary>
            <param name="message">Mensagem do corpo do log.</param>
            <param name="exception">Instancia da exception ocorrida.</param>
            <param name="priority">Prioridade do log.</param>
            <returns>True se o log foi salvo com sucesso.</returns>
        </member>
        <member name="T:Colosoft.Logging.ExceptionMessageFormattable">
            <summary>
            Formatação de mensagens para exceptions.
            </summary>
        </member>
        <member name="M:Colosoft.Logging.ExceptionMessageFormattable.#ctor(System.Exception)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Colosoft.Logging.ExceptionMessageFormattable.Join(System.String,Colosoft.IMessageFormattable)">
            <summary>
            Junta a mensagem com outra.
            </summary>
            <param name="separator">Separador que será usado.</param>
            <param name="message">Mensagem que será anexada.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Logging.ExceptionMessageFormattable.Format">
            <summary>
            Formata a mensagem.
            </summary>
            <returns>Texto da mensagem formatada.</returns>
        </member>
        <member name="M:Colosoft.Logging.ExceptionMessageFormattable.Format(System.Globalization.CultureInfo)">
            <summary>
            Recupera o texto formatado.
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Logging.ExceptionMessageFormattable.Format(System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Recupera o texto formatado.
            </summary>
            <param name="culture"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Logging.ExceptionMessageFormattable.Matches(System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Logging.ExceptionMessageFormattable.Equals(Colosoft.IMessageFormattable)">
            <summary>
            Verifica se é igual a instancia informada.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Logging.FileLogger">
            <summary>
            Logger de arquivos.
            </summary>
        </member>
        <member name="M:Colosoft.Logging.FileLogger.#ctor">
            <summary>
            Construtor Vazio.
            </summary>
        </member>
        <member name="M:Colosoft.Logging.FileLogger.#ctor(System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="path">Caminho do arquivo.</param>
        </member>
        <member name="M:Colosoft.Logging.FileLogger.Write(Colosoft.IMessageFormattable,Colosoft.Logging.Category,Colosoft.Logging.Priority)">
            <summary>
            Escreve uma nova entrada de log com uma categoria e prioridade especificada.
            </summary>
            <param name="message">Mensagem do corpo do log.</param>
            <param name="category">Categoria da entrada.</param>
            <param name="priority">Prioridade da entrada.</param>
            <returns>True se o log foi salvo com sucesso.</returns>
        </member>
        <member name="M:Colosoft.Logging.FileLogger.Write(Colosoft.IMessageFormattable,System.Exception,Colosoft.Logging.Priority)">
            <summary>
            Escreve uma nava entrada de log do tipo de Exception.
            </summary>
            <param name="message">Mensagem do corpo do log.</param>
            <param name="exception">Instancia da exception ocorrida.</param>
            <param name="priority">Prioridade do log.</param>
            <returns>True se o log foi salvo com sucesso.</returns>
        </member>
        <member name="P:Colosoft.Logging.FileLogger.FilePath">
            <summary>
            Caminho do arquivo de log.
            </summary>
        </member>
        <member name="T:Colosoft.Logging.LogNotificationDispatcher">
            <summary>
            Implementação do despachante de notificações para o log.
            </summary>
        </member>
        <member name="T:Colosoft.Notifications.INotificationDispatcher">
            <summary>
            Assinatura das classes responsáveis por disparar uma notificação do sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Notifications.INotificationDispatcher.Dispatch(Colosoft.Notifications.NotificationInfo)">
            <summary>
            Despacha a notificação.
            </summary>
            <param name="notification">Dados da notificação.</param>
            <returns>Resultado da notificação.</returns>
        </member>
        <member name="M:Colosoft.Logging.LogNotificationDispatcher.#ctor(Colosoft.Logging.ILogger)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Colosoft.Logging.LogNotificationDispatcher.Dispatch(Colosoft.Notifications.NotificationInfo)">
            <summary>
            Despacha a notificação.
            </summary>
            <param name="notification"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Logging.LogNotificationDispatcher.Logger">
            <summary>
            <see cref="T:Colosoft.Logging.ILogger"/> associado com a instancia.
            </summary>
        </member>
        <member name="T:Colosoft.Logging.Priority">
            <summary>
            Possíveis prioridades usadas pelo log.
            </summary>
        </member>
        <member name="F:Colosoft.Logging.Priority.None">
            <summary>
            Sem prioridade especificada.
            </summary>
        </member>
        <member name="F:Colosoft.Logging.Priority.High">
            <summary>
            Entrada de alta prioridade.
            </summary>
        </member>
        <member name="F:Colosoft.Logging.Priority.Medium">
            <summary>
            Entrada de média prioridade.
            </summary>
        </member>
        <member name="F:Colosoft.Logging.Priority.Low">
            <summary>
            Entrada de baixa prioridade.
            </summary>
        </member>
        <member name="T:Colosoft.Logging.TextLogger">
            <summary>
            Implementação da <see cref="T:Colosoft.Logging.ILogger"/> que salva o log dentro de um <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Logging.TextLogger.#ctor">
            <summary>
            Inicializa uma nova instancia do <see cref="T:Colosoft.Logging.TextLogger"/> que escreve o log para a saída do console.
            </summary>
        </member>
        <member name="M:Colosoft.Logging.TextLogger.#ctor(System.IO.TextWriter)">
            <summary>
            Inicializa uma nova instancia do <see cref="T:Colosoft.Logging.TextLogger"/>.
            </summary>
            <param name="writer">Escritor onde o log será salvo.</param>
        </member>
        <member name="M:Colosoft.Logging.TextLogger.Error(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma message de erro.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.TextLogger.Error(Colosoft.IMessageFormattable,Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de erro.
            </summary>
            <param name="module">Modulo da mensagem que será registrada.</param>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.TextLogger.Error(Colosoft.IMessageFormattable,System.Exception)">
            <summary>
            Registra uma mensagem de erro.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
            <param name="exception">Erro corrido.</param>
        </member>
        <member name="M:Colosoft.Logging.TextLogger.Fatal(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem e erro fatal.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.TextLogger.Fatal(Colosoft.IMessageFormattable,System.Exception)">
            <summary>
            Registra uma mensagem e erro fatal.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
            <param name="exception">Erro corrido.</param>
        </member>
        <member name="M:Colosoft.Logging.TextLogger.Debug(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de debug.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.TextLogger.Warn(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de alerta.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.TextLogger.Info(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de informação.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Colosoft.Logging.TextLogger.CriticalInfo(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de informação crítica.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.TextLogger.CriticalInfo(Colosoft.IMessageFormattable,Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de informação crítica.
            </summary>
            <param name="module">Modulo da mensagem que será registrada.</param>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.TextLogger.SetLevel(System.String)">
            <summary>
            Define o nível do log.
            </summary>
            <param name="level">Descritivo do nível.</param>
        </member>
        <member name="M:Colosoft.Logging.TextLogger.Write(Colosoft.IMessageFormattable,Colosoft.Logging.Category,Colosoft.Logging.Priority)">
            <summary>
            Escreve uma nova entrada de log com uma categoria e prioridade especificada.
            </summary>
            <param name="message">Mensagem do corpo do log.</param>
            <param name="category">Categoria da entrada.</param>
            <param name="priority">Prioridade da entrada.</param>
            <returns>True se o log foi salvo com sucesso.</returns>
        </member>
        <member name="M:Colosoft.Logging.TextLogger.Write(Colosoft.IMessageFormattable,System.Exception,Colosoft.Logging.Priority)">
            <summary>
            Escreve uma nava entrada de log do tipo de Exception.
            </summary>
            <param name="message">Mensagem do corpo do log.</param>
            <param name="exception">Instancia da exception ocorrida.</param>
            <param name="priority">Prioridade do log.</param>
            <returns>True se o log foi salvo com sucesso.</returns>
        </member>
        <member name="M:Colosoft.Logging.TextLogger.Dispose(System.Boolean)">
            <summary>
            Libera o <see cref="T:System.IO.TextWriter"/> associado.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Logging.TextLogger.Dispose">
            <summary>
             Libera a instancia.
            </summary>
             <remarks>Calls <see cref="M:Colosoft.Logging.TextLogger.Dispose(System.Boolean)"/></remarks>.
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Colosoft.Logging.TextLogger.IsDebugEnabled">
            <summary>
            Identifica se o debug está abilitado.
            </summary>
        </member>
        <member name="P:Colosoft.Logging.TextLogger.IsErrorEnabled">
            <summary>
            Identifica se o error está abilitado.
            </summary>
        </member>
        <member name="P:Colosoft.Logging.TextLogger.IsFatalEnabled">
            <summary>
            Identifica se o erro fatal está abilitado
            </summary>
        </member>
        <member name="P:Colosoft.Logging.TextLogger.IsInfoEnabled">
            <summary>
            Identifica se informações estão abilitadas
            </summary>
        </member>
        <member name="P:Colosoft.Logging.TextLogger.IsWarnEnabled">
            <summary>
            Identifica se o Warning está abilitado.
            </summary>
        </member>
        <member name="T:Colosoft.Logging.Trace">
            <summary>
            Implementação da classe de trace.
            </summary>
        </member>
        <member name="M:Colosoft.Logging.Trace.Error(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma messagem de erro.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.Trace.Error(Colosoft.IMessageFormattable,Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de erro.
            </summary>
            <param name="module">Modulo da mensagem que será registrada.</param>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.Trace.Fatal(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem e erro fatal.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.Trace.Debug(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de debug.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.Trace.Warn(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de alerta.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.Trace.Info(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de informação.
            </summary>
            <param name="message">Mensagem que será regitrada.</param>
        </member>
        <member name="M:Colosoft.Logging.Trace.CriticalInfo(Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de informação crítica.
            </summary>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="M:Colosoft.Logging.Trace.CriticalInfo(Colosoft.IMessageFormattable,Colosoft.IMessageFormattable)">
            <summary>
            Registra uma mensagem de informação crítica.
            </summary>
            <param name="module">Modulo da mensagem que será registrada.</param>
            <param name="message">Mensagem que será registrada.</param>
        </member>
        <member name="P:Colosoft.Logging.Trace.Logger">
            <summary>
            Logger que será usado pelo trace.
            </summary>
        </member>
        <member name="T:Colosoft.Logging.TraceLogger">
            <summary>
            Implementação do logger para trace.
            </summary>
        </member>
        <member name="M:Colosoft.Logging.TraceLogger.Write(Colosoft.IMessageFormattable,Colosoft.Logging.Category,Colosoft.Logging.Priority)">
            <summary>
            Escreve uma nova entrada de log com uma categoria e prioridade especificada.
            </summary>
            <param name="message">Mensagem do corpo do log.</param>
            <param name="category">Categoria da entrada.</param>
            <param name="priority">Prioridade da entrada.</param>
            <returns>True se o log foi salvo com sucesso.</returns>
        </member>
        <member name="M:Colosoft.Logging.TraceLogger.Write(Colosoft.IMessageFormattable,System.Exception,Colosoft.Logging.Priority)">
            <summary>
            Escreve uma nava entrada de log do tipo de Exception.
            </summary>
            <param name="message">Mensagem do corpo do log.</param>
            <param name="exception">Instancia da exception ocorrida.</param>
            <param name="priority">Prioridade do log.</param>
            <returns>True se o log foi salvo com sucesso.</returns>
        </member>
        <member name="T:Colosoft.Notifications.MessageResult">
            <summary>
            Possíveis resultados de notificação.
            </summary>
        </member>
        <member name="F:Colosoft.Notifications.MessageResult.None">
            <summary>
            Nenhum resultado
            </summary>
        </member>
        <member name="F:Colosoft.Notifications.MessageResult.OK">
            <summary>
            O resultado foi OK
            </summary>
        </member>
        <member name="F:Colosoft.Notifications.MessageResult.Cancel">
            <summary>
            Notificação cancelada.
            </summary>
        </member>
        <member name="F:Colosoft.Notifications.MessageResult.Yes">
            <summary>
            Resposta Yes.
            </summary>
        </member>
        <member name="F:Colosoft.Notifications.MessageResult.No">
            <summary>
            Resposta No.
            </summary>
        </member>
        <member name="T:Colosoft.Notifications.MessageResultOption">
            <summary>
            Especifica a combinação de opções para o resultado da mensagem.
            </summary>
        </member>
        <member name="F:Colosoft.Notifications.MessageResultOption.OK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Colosoft.Notifications.MessageResultOption.OKCancel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Colosoft.Notifications.MessageResultOption.YesNoCancel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Colosoft.Notifications.MessageResultOption.YesNo">
            <summary>
            
            </summary>
        </member>
        <member name="T:Colosoft.Notifications.Notification">
            <summary>
            Classe responsável por gerenciar as mensagens do sistema.
            </summary>
        </member>
        <member name="F:Colosoft.Notifications.Notification._dispacher">
            <summary>
            Instancia do dispacher que será 
            </summary>
        </member>
        <member name="M:Colosoft.Notifications.Notification.OnDispatched(Colosoft.Notifications.NotificationInfo)">
            <summary>
            Método de desempenha o evento Dispached.
            </summary>
            <param name="notification"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Notifications.Notification.Dispatch(Colosoft.IMessageFormattable)">
            <summary>
            Despacha uma mensagem de notificação.
            </summary>
            <param name="message">Mensagem que será enviada.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Notifications.Notification.Dispatch(Colosoft.IMessageFormattable,Colosoft.Notifications.NotificationType)">
            <summary>
            Despacha uma mensagem de notificação.
            </summary>
            <param name="message">Mensagem que será enviada.</param>
            <param name="type">Tipo da notificação.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Notifications.Notification.Dispatch(Colosoft.IMessageFormattable,Colosoft.IMessageFormattable)">
            <summary>
             Despacha uma mensagem de notificação.
            </summary>
            <param name="message">Mensagem que será enviada.</param>
            <param name="caption">Título da notificação.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Notifications.Notification.Dispatch(Colosoft.IMessageFormattable,Colosoft.IMessageFormattable,Colosoft.Notifications.MessageResultOption)">
            <summary>
            Despacha uma mensagem de notificação.
            </summary>
            <param name="message">Mensagem que será enviada.</param>
            <param name="caption">Título da notificação.</param>
            <param name="resultOption">Opção do resultado da mensagem.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Notifications.Notification.Dispatch(Colosoft.IMessageFormattable,Colosoft.IMessageFormattable,Colosoft.Notifications.MessageResultOption,Colosoft.Notifications.NotificationType,Colosoft.Notifications.MessageResult)">
            <summary>
            Despacha uma mensagem de notificação
            </summary>
            <param name="message">Mensagem que será enviada.</param>
            <param name="caption">Título da notificação.</param>
            <param name="resultOption">Opção do resultado da mensagem.</param>
            <param name="type">Tipo da notificação.</param>
            <param name="dafaultMessageResult">Resultado padrão.</param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Notifications.Notification.Dispatcher">
            <summary>
            Recupera a instancia padrão do dispachante de notificações do sistema.
            </summary>
        </member>
        <member name="T:Colosoft.Notifications.NotificationInfo">
            <summary>
            Armazena as informações de um notificação.
            </summary>
        </member>
        <member name="M:Colosoft.Notifications.NotificationInfo.#ctor(Colosoft.IMessageFormattable,Colosoft.IMessageFormattable,Colosoft.Notifications.MessageResultOption,Colosoft.Notifications.MessageResult,Colosoft.Notifications.NotificationType)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="message"></param>
            <param name="option"></param>
            <param name="caption"></param>
            <param name="defaultMessageResult"></param>
            <param name="type"></param>
        </member>
        <member name="P:Colosoft.Notifications.NotificationInfo.Message">
            <summary>
            Mensagem da notificação.
            </summary>
        </member>
        <member name="P:Colosoft.Notifications.NotificationInfo.Caption">
            <summary>
            Legenda da notificação.
            </summary>
        </member>
        <member name="P:Colosoft.Notifications.NotificationInfo.DefaultMessageResult">
            <summary>
            Resultado padrão da notificação.
            </summary>
        </member>
        <member name="P:Colosoft.Notifications.NotificationInfo.Type">
            <summary>
            Tipo da notificação.
            </summary>
        </member>
        <member name="P:Colosoft.Notifications.NotificationInfo.Option">
            <summary>
            Opção do resultado da mensagem.
            </summary>
        </member>
        <member name="T:Colosoft.Notifications.NotificationType">
            <summary>
            Possíveis tipos de notificação.
            </summary>
        </member>
        <member name="F:Colosoft.Notifications.NotificationType.None">
            <summary>
            Tipo indefinido.
            </summary>
        </member>
        <member name="F:Colosoft.Notifications.NotificationType.Question">
            <summary>
            Notificação do tipo de questionário.
            </summary>
        </member>
        <member name="F:Colosoft.Notifications.NotificationType.Exclamation">
            <summary>
            Notificação de exclamação.
            </summary>
        </member>
        <member name="F:Colosoft.Notifications.NotificationType.Error">
            <summary>
            Notificação de erro.
            </summary>
        </member>
        <member name="F:Colosoft.Notifications.NotificationType.Warning">
            <summary>
            Notificação de alerta.
            </summary>
        </member>
        <member name="F:Colosoft.Notifications.NotificationType.Information">
            <summary>
            Notificação de informação.
            </summary>
        </member>
        <member name="T:Colosoft.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Arg_EnumIllegalVal">
            <summary>
              Looks up a localized string similar to Illegal enum value: {0}..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Arg_EnumNotSingleFlag">
            <summary>
              Looks up a localized string similar to Must set exactly one flag..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Argument_AbsolutePathRequired">
            <summary>
              Looks up a localized string similar to Absolute path information is required..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Argument_AddingDuplicate">
            <summary>
              Looks up a localized string similar to Adicionando item duplicado.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Argument_EmptyPath">
            <summary>
              Looks up a localized string similar to Empty path name is not legal..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Argument_InvalidDelegateRerefenceType">
            <summary>
              Looks up a localized string similar to Invalid DelegateRerefence type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Argument_InvalidPathChars">
            <summary>
              Looks up a localized string similar to Illegal characters in path..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Argument_InvalidPermissionState">
            <summary>
              Looks up a localized string similar to Invalid permission state..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Argument_InvalidXMLBadVersion">
            <summary>
              Looks up a localized string similar to Invalid Xml - can only parse elements of version one..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Argument_NoAppropriateSurrogateFound">
            <summary>
              Looks up a localized string similar to No appropriate surrogate found for type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Argument_NoAppropriateSurrogateFoundForType">
            <summary>
              Looks up a localized string similar to No appropriate surrogate found for type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Argument_NotAPermissionElement">
            <summary>
              Looks up a localized string similar to &apos;elem&apos; was not a permission element..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Argument_PathFormatNotSupported">
            <summary>
              Looks up a localized string similar to The given path&apos;s format is not supported..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Argument_SubtypeAlreadyRegistered">
            <summary>
              Looks up a localized string similar to Specified sub-type handle is already registered..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Argument_TypeAlreadyRegistered">
            <summary>
              Looks up a localized string similar to Specified type handle is already registered..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Argument_TypeAlreadyRegistered2">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is already registered.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Argument_TypeAlreadyRegisteredWithDifferentHandle">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is already registered with different handle.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Argument_WrongType">
            <summary>
              Looks up a localized string similar to Operation on type &apos;{0}&apos; attempted with target of incorrect type..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.AssemblyLoader_GetContextError">
            <summary>
              Looks up a localized string similar to A erro ocurred on get AssemblyLoader context. Details: {0}.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.AssemblyRepository_AnalyzeAssemblyError">
            <summary>
              Looks up a localized string similar to Ocorreu um erro ao analisar o assembly &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.AssemblyRepository_AssemblyPartNotFound">
            <summary>
              Looks up a localized string similar to Assembly part &apos;{0}&apos; not found..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.AssemblyRepository_AssemblyPartNotFound1">
            <summary>
              Looks up a localized string similar to Assembly part &apos;{0}&apos; not found..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.AssemblyRepository_GetFilesFromRepositoryDirectoryError">
            <summary>
              Looks up a localized string similar to Ocorreu um erro ao recuperar os arquivos para o repositório apartir do diretório &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.AssemblyRepository_MaintenanceError">
             <summary>
               Looks up a localized string similar to Ocorreu um ao executar a manuteção do repositório pelo módulo &apos;{0}&apos;.
            Detalhes:
            {1}.
             </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.AssemblyRepository_ValidateAssemblyPackageCacheEntryError">
            <summary>
              Looks up a localized string similar to Ocorreu um erro e não foi possível validar a entrada do cache do pacote..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.AssemblyRepository_ValidateAssemblyPackageError">
            <summary>
              Looks up a localized string similar to Ocorreu um erro e não foi possível validar o pacote de assemblies..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.AssemblyRepository_ValidateMaintenanceError">
            <summary>
              Looks up a localized string similar to Existem erros na execução da manutenção do repositório usando &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.AssemblyResolver_GetAssemblyDownloaderException">
            <summary>
              Looks up a localized string similar to An error ocurred when download assemblies from server. Detalis: {0}.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Captcha_Necessary">
            <summary>
              Looks up a localized string similar to Usuário necessita de captcha para autenticar.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.CommunicationReader_FormatErrorCode">
            <summary>
              Looks up a localized string similar to Error Code {0}.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.CommunicationReader_FormatErrorCommunication">
            <summary>
              Looks up a localized string similar to Communication error: {0}.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.CommunicationReader_FormatErrorFtp">
            <summary>
              Looks up a localized string similar to FTP error: {0}.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.CommunicationReader_FormatErrorFtpDiskFull">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.CommunicationReader_FormatErrorFtpIO">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.CommunicationReader_FormatErrorNoOpFailed">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.CommunicationReader_FormatErrorSocket">
            <summary>
              Looks up a localized string similar to Socket error.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.CommunicationReader_FormatErrorTimeout">
            <summary>
              Looks up a localized string similar to Timeout.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.CommunicationReader_FormatStackFrame">
            <summary>
              Looks up a localized string similar to {0}({1}:{2}).
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.CompactSerialization_TypeHandleNotRegistered">
            <summary>
              Looks up a localized string similar to Type handle &apos;{0}&apos; is not registered with Compact Serialization Framework.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.DefaultLoggerNotFound">
            <summary>
              Looks up a localized string similar to Default logger not found..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.DefaultTextLoggerPattern">
            <summary>
              Looks up a localized string similar to {1}: {2}. Priority: {3}. Timestamp:{0:u}..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Error_IdentityProviderNotFound">
            <summary>
              Looks up a localized string similar to IdentityProvider not found for user &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Error_IdentityProviderTypeUndefined">
            <summary>
              Looks up a localized string similar to Identity provider type undefined..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Error_TokenCreate">
            <summary>
              Looks up a localized string similar to Erro ao inserir controle de token.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Error_TokenDuplicate">
            <summary>
              Looks up a localized string similar to Token já existe para o usuário.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Error_UserCantResetPassword">
            <summary>
              Looks up a localized string similar to Usuário não pode redefinir senha.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Exception_FailOnValidateUser">
            <summary>
              Looks up a localized string similar to Fail on validate user..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.ExceptionDataDictionaryReport">
            <summary>
              Looks up a localized string similar to {0} = {1}.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.ExceptionStackTrace">
            <summary>
              Looks up a localized string similar to Exception Stack Trace: {0}.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.FileLoggerPattern">
            <summary>
              Looks up a localized string similar to {1}-{0:u}: {2}. Priority: {3}.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.IndexNotFoundException_Message">
            <summary>
              Looks up a localized string similar to Index &apos;{0}&apos; not found.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.InnerException">
            <summary>
              Looks up a localized string similar to Inner Exception Details:.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Invalid_Captcha">
            <summary>
              Looks up a localized string similar to Captcha incorreto.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Invalid_UsernameOrPassword">
            <summary>
              Looks up a localized string similar to Nome de usuário ou senha inválidos.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.InvalidOperation_DefaultProfileProviderNotFound">
            <summary>
              Looks up a localized string similar to Default profile provider not found..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.InvalidOperation_DefaultRolesProviderNotFound">
            <summary>
              Looks up a localized string similar to Default roles provider not found..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.InvalidOperation_DefaultTokenProviderNotFound">
            <summary>
              Looks up a localized string similar to Default token provider not found..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.InvalidOperation_DefaultUserProviderNotFound">
            <summary>
              Looks up a localized string similar to Default user provider not found..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.InvalidOperation_FailOnLoadNotificationDispatcher">
            <summary>
              Looks up a localized string similar to Fail on load notification dispatcher..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.InvalidOperation_ItemIsNotMatchingWithFilter">
            <summary>
              Looks up a localized string similar to Item is not matching with filter..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.InvalidOperation_NotFoundProfileForCurrentUser">
            <summary>
              Looks up a localized string similar to Not found profile for current user.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.InvalidOperation_ServiceLocatorCurrentNotConfigured">
            <summary>
              Looks up a localized string similar to ServiceLocator.Current not configured..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.InvalidOperation_SettingsManager_RepositoryNotFound">
            <summary>
              Looks up a localized string similar to Repository {0} not found..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.LogExceptionDataDictionary">
             <summary>
               Looks up a localized string similar to Exception Data Dictionary:
            {0}
            .
             </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.LogExceptionHeader">
             <summary>
               Looks up a localized string similar to 
            Exception Message: {0} (type {1}).
             </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.MalformedUri">
            <summary>
              Looks up a localized string similar to Malformed Artifact URI: {0}.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.ProfileSearchMode_Agency">
            <summary>
              Looks up a localized string similar to Somente registros criados pela agência associada com o usuário..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.ProfileSearchMode_All">
            <summary>
              Looks up a localized string similar to Todos os registros.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.ProfileSearchMode_Intermediate">
            <summary>
              Looks up a localized string similar to Somente registros associados com o intermediador.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.ProfileSearchMode_Self">
            <summary>
              Looks up a localized string similar to Somente registros criados pelo perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.ProfileSearchMode_Seller">
            <summary>
              Looks up a localized string similar to Somente registros associados com o vendedor.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.ProfileSearchMode_Source">
            <summary>
              Looks up a localized string similar to Somente registros associados com a origem.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.PropertySelector_ExpressionNotProperty_Exception">
            <summary>
              Looks up a localized string similar to Expression not is property.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.PropertySelector_NotMemberAccessExpression_Exception">
            <summary>
              Looks up a localized string similar to Not member access expression.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.PropertySelector_StaticExpression_Exception">
            <summary>
              Looks up a localized string similar to Invalida for static expression.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Security_SystemPermission">
            <summary>
              Looks up a localized string similar to System Permission.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.SetProfileError">
            <summary>
              Looks up a localized string similar to A error ocurred on set profile &apos;{0}&apos; for token &apos;{1}&apos;. Details: &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.SoapExceptionReport">
            <summary>
              Looks up a localized string similar to SoapException Details: {0}.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.ValidationErrors_IsOfType">
            <summary>
              Looks up a localized string similar to The type of the parameter &apos;{0}&apos; was not of the type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.ValidationErrors_NotEmpty">
            <summary>
              Looks up a localized string similar to The length of the parameter &apos;{0}&apos; cannot be zero..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.ValidationErrors_NotEmptyCollection">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; array must have atleast one item..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.ValidationErrors_NotNull">
            <summary>
              Looks up a localized string similar to The specified value for parameter &apos;{0}&apos; cannot be null..
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.ValidationErrors_OutOfRange">
            <summary>
              Looks up a localized string similar to Argument {0} out of range.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.Warning_Password">
            <summary>
              Looks up a localized string similar to Sua senha expirará em {0} dia(s).
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.WebExceptionReport">
             <summary>
               Looks up a localized string similar to Status: {0}
            Response Status Code: {1}
            Response Status Message: {2}
            .
             </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.WebExceptionReport_ResponseDisposed">
             <summary>
               Looks up a localized string similar to 
            Status : {0}
            Response already disposed, no additional information available..
             </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.WeekDay_Friday">
            <summary>
              Looks up a localized string similar to Sexta-feira.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.WeekDay_Monday">
            <summary>
              Looks up a localized string similar to Segunda-feira.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.WeekDay_Saturday">
            <summary>
              Looks up a localized string similar to Sábado.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.WeekDay_Sunday">
            <summary>
              Looks up a localized string similar to Domingo.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.WeekDay_Thursday">
            <summary>
              Looks up a localized string similar to Quinta-feira.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.WeekDay_Tuesday">
            <summary>
              Looks up a localized string similar to Terça-feira.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.WeekDay_Wednesday">
            <summary>
              Looks up a localized string similar to Quarta-feira.
            </summary>
        </member>
        <member name="P:Colosoft.Properties.Resources.WrongFirstSegment">
            <summary>
              Looks up a localized string similar to O padrão exigido para URI contendo &apos;;&apos; é &apos;AssemblyName;Vxxxx;PublicKey;&apos;, onde Vxxxx é a versão do assembly e PublicKey é a seqüência de 16 caracteres que representa o token de chave pública do assembly. Vxxxx e PublicKey são opcionais..
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.TypeConverterScheme`2">
            <summary>
            Representa um esquema de conversão de tipo.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.#ctor">
            <summary>
            Construtor privado.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.Create">
            <summary>
            Cria o configurar o esquema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.Apply(`0,`1)">
            <summary>
            Aplica os valores da origem para o destino.
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.Apply(`1,`0)">
            <summary>
            Aplica os valores da origem para o destino.
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="T:Colosoft.Reflection.TypeConverterScheme`2.ISchemeItem">
            <summary>
            Assinatura de um item do esquema.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.ISchemeItem.Apply(`0,`1)">
            <summary>
            Aplica o item da origem na classe de destinho.
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.ISchemeItem.Apply(`1,`0)">
            <summary>
            Aplica o item do destinho na classe de origem.
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="T:Colosoft.Reflection.TypeConverterScheme`2.SchemeItem`1">
            <summary>
            Implementação de um item do esquema.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.SchemeItem`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`2}},System.Linq.Expressions.Expression{System.Func{`1,`2}})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="t1Expression"></param>
            <param name="t2Expression"></param>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.SchemeItem`1.SetValue(`0,`2)">
            <summary>
            Define o valor para a instancia.
            </summary>
            <param name="instance"></param>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.SchemeItem`1.SetValue(`1,`2)">
            <summary>
            Define o valor para a instancia.
            </summary>
            <param name="instance"></param>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.SchemeItem`1.SetValue``1(``0,`2,System.Reflection.MemberInfo)">
            <summary>
            Define o valor para a instancia.
            </summary>
            <param name="instance"></param>
            <param name="value"></param>
            <param name="member"></param>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.SchemeItem`1.Apply(`0,`1)">
            <summary>
            Aplica o item da origem na classe de destinho.
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.SchemeItem`1.Apply(`1,`0)">
            <summary>
            Aplica o item do destinho na classe de origem.
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
        </member>
        <member name="T:Colosoft.Reflection.TypeConverterScheme`2.CastSchemeItem`2">
            <summary>
            Implementação de um item do esquema com conversão.
            </summary>
            <typeparam name="TLeft"></typeparam>
            <typeparam name="TRight"></typeparam>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.CastSchemeItem`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`2}},System.Linq.Expressions.Expression{System.Func{`1,`3}},System.Func{`2,`3},System.Func{`3,`2})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="leftExpression"></param>
            <param name="rightExpression"></param>
            <param name="leftRightCast"></param>
            <param name="rightLeftCast"></param>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.CastSchemeItem`2.SetValue(`0,`3)">
            <summary>
            Define o valor para a instancia.
            </summary>
            <param name="instance"></param>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.CastSchemeItem`2.SetValue(`1,`2)">
            <summary>
            Define o valor para a instancia.
            </summary>
            <param name="instance"></param>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.CastSchemeItem`2.SetValue``2(``0,``1,System.Reflection.MemberInfo)">
            <summary>
            Define o valor para a instancia.
            </summary>
            <param name="instance"></param>
            <param name="value"></param>
            <param name="member"></param>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.CastSchemeItem`2.Apply(`0,`1)">
            <summary>
            Aplica o item da origem na classe de destinho.
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.CastSchemeItem`2.Apply(`1,`0)">
            <summary>
            Aplica o item do destinho na classe de origem.
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.SchemaItem.#ctor(System.Action{`0,`1},System.Action{`1,`0})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="t1ToT2"></param>
            <param name="t2ToT1"></param>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.SchemaItem.Apply(`0,`1)">
            <summary>
            Aplica os valores da origem para o destino.
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.SchemaItem.Apply(`1,`0)">
            <summary>
            Aplica os valores da origem para o destino.
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="T:Colosoft.Reflection.TypeConverterScheme`2.FluentTypeConverterSchema">
            <summary>
            Classe usada para configurar o esquema.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.FluentTypeConverterSchema.#ctor(Colosoft.Reflection.TypeConverterScheme{`0,`1})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="scheme"></param>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.FluentTypeConverterSchema.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Configura uma propriedade.
            </summary>
            <typeparam name="TValue">Tipo da propriedade.</typeparam>
            <param name="sourceProperty">Propriedade da origem.</param>
            <param name="destinationProperty">Propriedade do destino.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.FluentTypeConverterSchema.Property``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Func{``0,``1},System.Func{``1,``0})">
            <summary>
            Configura uma propriedade.
            </summary>
            <typeparam name="TLeft">Tipo da propriedade da esquerda.</typeparam>
            <typeparam name="TRight">Tipo da propriedade da direita.</typeparam>
            <param name="sourceProperty">Propriedade de origem.</param>
            <param name="destinationProperty">Propriedade de destino.</param>
            <param name="leftRightCast">Cast da esquerda para a direita.</param>
            <param name="rightLeftCast">Cast da direita para esquerda.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.FluentTypeConverterSchema.Apply(System.Action{`0,`1},System.Action{`1,`0})">
            <summary>
            Configura a aplicação da conversão de valores de T1 para T2 e vice versa.
            </summary>
            <param name="t1ToT2"></param>
            <param name="t2ToT1"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.TypeConverterScheme`2.FluentTypeConverterSchema.Finalize">
            <summary>
            Finaliza a configuração.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Reflection.TypeName">
            <summary>
            Parses names of .NET types.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.TypeName.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.TypeName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Colosoft.Reflection.TypeName"/> class.
            </summary>
            <param name="assemblyQualifiedName">Assembly qualified name of the type.</param>
        </member>
        <member name="M:Colosoft.Reflection.TypeName.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor usado para deserializar os dados.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Reflection.TypeName.Get``1">
            <summary>
            Recupera o nome para o tipo informado.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.TypeName.Get(System.Type)">
            <summary>
            Recupera o nome para o tipo informado.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.TypeName.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Colosoft.Reflection.TypeName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Recupera os dados serializados da instancia.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Reflection.TypeName.Deserialize(Colosoft.Serialization.IO.CompactReader)">
            <summary>
            Deserializa os dados da instancia.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Colosoft.Reflection.TypeName.Serialize(Colosoft.Serialization.IO.CompactWriter)">
            <summary>
            Serializa os dados da instancia.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Colosoft.Reflection.TypeName.GetMySchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Recupera o esquema XML do tipo.
            </summary>
            <param name="xs"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.TypeName.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Recupera o esquema.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Reflection.TypeName.Name">
            <summary>
            Gets or sets the name of the type, e.g. "IEnumerable"
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.TypeName.Namespace">
            <summary>
            Gets or sets the namespace as a list, e.g. ["System", "Collections", "Generic"].
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.TypeName.Nesting">
            <summary>
            Gets or sets the container types.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.TypeName.TypeArguments">
            <summary>
            Gets or sets the list of type arguments, e.g. [ "System.String" ].
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.TypeName.AssemblyName">
            <summary>
            Gets or sets the name of the assembly.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.TypeName.IsPointer">
            <summary>
            Gets a value indicating whether the System.Type is a pointer.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.TypeName.IsByRef">
            <summary>
            Gets a value indicating whether the System.Type is passed by reference.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.TypeName.AssemblyQualifiedName">
            <summary>
            Gets the full name of the type, including the assembly name.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.TypeName.FullName">
            <summary>
            Gets the full name of the type.
            </summary>
        </member>
        <member name="P:Colosoft.Reflection.TypeName.Suffix">
            <summary>
            Sufixo.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.TypeName.TypeNameEqualityComparer">
            <summary>
            Implementação usada para compara o nome dos tipos.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.TypeName.TypeNameEqualityComparer.Instance">
            <summary>
            Instancia única do comparador.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.TypeName.TypeNameEqualityComparer.Equals(Colosoft.Reflection.TypeName,Colosoft.Reflection.TypeName)">
            <summary>
            Compara as duas instancias.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.TypeName.TypeNameEqualityComparer.GetHashCode(Colosoft.Reflection.TypeName)">
            <summary>
            Recupera o hashcode da instancia informada.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Reflection.TypeName.TypeNameFullNameComparer">
            <summary>
            Implementação do comparador do fullname do tipo.
            </summary>
        </member>
        <member name="F:Colosoft.Reflection.TypeName.TypeNameFullNameComparer.Instance">
            <summary>
            Instancia única do comparador.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.TypeName.TypeNameFullNameComparer.Compare(Colosoft.Reflection.TypeName,Colosoft.Reflection.TypeName)">
            <summary>
            Compara os dois nomes informados.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.TypeName.TypeNameFullNameComparer.Equals(Colosoft.Reflection.TypeName,Colosoft.Reflection.TypeName)">
            <summary>
            Compara as duas instancias.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.TypeName.TypeNameFullNameComparer.GetHashCode(Colosoft.Reflection.TypeName)">
            <summary>
            Recupera o hashcode da instancia informada.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Reflection.TypeName.Parser">
            <summary>
            Classe que executa o parser do nome do tipo.
            </summary>
        </member>
        <member name="T:Colosoft.Reflection.TypeResolver">
            <summary>
            Classe responsável por resolver os tipos do sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Reflection.TypeResolver.ResolveType(System.String)">
            <summary>
            Resolve o tipo para o nome informado.
            </summary>
            <param name="typeNameOrAlias">Nome ou apelido do tipo para ser resolvido.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.TypeResolver.ResolveType(System.String,System.Boolean)">
            <summary>
            Resolve o tipo para o nome informado.
            </summary>
            <param name="typeNameOrAlias">Nome ou apelido do tipo para ser resolvido.</param>
            <param name="throwIfResolveFails">Se true e o tipo não for resolvido dispara um <see cref="T:System.InvalidOperationException"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Reflection.TypeResolver.ResolveType(Colosoft.Reflection.TypeName,System.Boolean)">
            <summary>
            Resolve o tipo para o nome informado.
            </summary>
            <param name="typeName">Nome do tipo que será resolvido.</param>
            <param name="throwIfResolveFails">Se true e o tipo não for resolvido dispara um <see cref="T:System.InvalidOperationException"/>.</param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.ResourceMessageFormatter">
            <summary>
            Formatador de mensagens de recursos.
            </summary>
        </member>
        <member name="M:Colosoft.ResourceMessageFormatter.#ctor">
            <summary>
            Construtor vazio.
            </summary>
        </member>
        <member name="M:Colosoft.ResourceMessageFormatter.#ctor(System.String,System.String,System.Type,System.Object[])">
            <summary>
            Construtor padrão.
            </summary>
            <param name="baseName">Nome base do recurso.</param>
            <param name="name">Nome do recurso.</param>
            <param name="resourceType">Tipo que trata o recurso.</param>
            <param name="parameters"></param>
        </member>
        <member name="M:Colosoft.ResourceMessageFormatter.Create(System.Linq.Expressions.Expression{System.Func{System.String}},System.Object[])">
            <summary>
            Cria uma nova messagem formatada a partir da propriedade de um Recurso.
            </summary>
            <param name="propertySelector"></param>
            <param name="parameters">Parametros que será usados para formatar a mensagem.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ResourceMessageFormatter.Colosoft#IMessageFormattable#Format(System.Globalization.CultureInfo)">
            <summary>
            Formata a mensagem na cultura informada.
            </summary>
            <param name="culture">Cultura que será usada na formatação.</param>
            <returns>Texto da mensagem formatada.</returns>
        </member>
        <member name="M:Colosoft.ResourceMessageFormatter.Join(System.String,Colosoft.IMessageFormattable)">
            <summary>
            Junta a mensagem com outra.
            </summary>
            <param name="separator">Separador que será usado.</param>
            <param name="message">Mensagem que será anexada.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ResourceMessageFormatter.Format(System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Formata a mensagem na cultura informada usando os parametros.
            </summary>
            <param name="culture">Cultura que será usada na formatação.</param>
            <param name="parameters">Parametros que serão usados na formatação.</param>
            <returns>Texto da mensagem formatada.</returns>
        </member>
        <member name="M:Colosoft.ResourceMessageFormatter.Format">
            <summary>
            Formata a mensagem na cultura padrão da thread.
            </summary>
            <returns>Texto da mensagem formatada.</returns>
        </member>
        <member name="M:Colosoft.ResourceMessageFormatter.Matches(System.Globalization.CultureInfo)">
            <summary>
            Retorna um valor indicando se a linguagem da descrição 
            da suporte a cultura informada.
            </summary>
            <param name="culture">Instancia da cultura que será comparado com a linguagem da mensagem.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ResourceMessageFormatter.Equals(Colosoft.IMessageFormattable)">
            <summary>
            Compara as instancia da mensagem informado.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ResourceMessageFormatter.ToString">
            <summary>
            Recupera o texto da mensagem.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ResourceMessageFormatter.Clone">
            <summary>
            Clona os dados da instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.ResourceMessageFormatter.BaseName">
            <summary>
            Nome básico do recurso.
            </summary>
        </member>
        <member name="P:Colosoft.ResourceMessageFormatter.Name">
            <summary>
            Nome do recurso.
            </summary>
        </member>
        <member name="P:Colosoft.ResourceMessageFormatter.ResourceType">
            <summary>
            Tipo da classe do recurso.
            </summary>
        </member>
        <member name="P:Colosoft.ResourceMessageFormatter.Parameters">
            <summary>
            Parametros do formatador.
            </summary>
        </member>
        <member name="T:Colosoft.Runtime.Cache`1">
            <summary>
            Representa um cache para armazenar os itens do gerenciador.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Colosoft.Runtime.Cache`1.#ctor(System.Int32)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="maxCount"></param>
        </member>
        <member name="M:Colosoft.Runtime.Cache`1.Finalize">
            <summary>
            Destrutor.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Cache`1.Get(System.Predicate{`0},System.Func{`0},`0@)">
            <summary>
            Recupera o item que está no cache.
            </summary>
            <param name="predicate">Predicado usado no filtro.</param>
            <param name="creator"></param>
            <param name="item">Instancia do item encontrado.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Cache`1.Reset">
            <summary>
            Reseta o cache.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Cache`1.Reset(System.Predicate{`0})">
            <summary>
            Reseta os itens que atendam o predicado informado.
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:Colosoft.Runtime.Cache`1.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Runtime.Cache`1.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="E:Colosoft.Runtime.Cache`1.Disposing">
            <summary>
            Evento acionado quando o cache estiver sendo liberado.
            </summary>
        </member>
        <member name="E:Colosoft.Runtime.Cache`1.CollectionChanged">
            <summary>
            Evento acionado quando a coleção associada for alterada.
            </summary>
        </member>
        <member name="T:Colosoft.Runtime.Cache`1.Entry">
            <summary>
            Representa uma entrada do cache.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Cache`1.Entry.#ctor(`0)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Colosoft.Runtime.Cache`1.Entry.Notify(System.Boolean)">
            <summary>
            Notifica o uso da entrada.
            </summary>
            <param name="inUse"></param>
        </member>
        <member name="P:Colosoft.Runtime.Cache`1.Entry.Item">
            <summary>
            Item
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Cache`1.Entry.UsageCount">
            <summary>
            Contador da utilização.
            </summary>
        </member>
        <member name="T:Colosoft.Runtime.IRentableObject">
            <summary>
            Representa um objeto que pode ser "alugado".
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.IRentableObject.RentId">
            <summary>
            Identificador do empréstimo do objeto.
            </summary>
        </member>
        <member name="T:Colosoft.Runtime.IRuntimeValueStorage">
            <summary>
            Assinatura das classe que armazena valores.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.IRuntimeValueStorage.GetValue(System.String)">
            <summary>
            Recupera o valor pelo nome informado.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.IRuntimeValueStorage.SetValue(System.String,System.Object)">
            <summary>
            Define o valor associado com o nome.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Runtime.IRuntimeValueStorage.RemoveValue(System.String)">
            <summary>
            Remove o valor pelo nome informado.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Colosoft.Runtime.MemoryManager">
            <summary>
            Gerenciador de memória.
            </summary>
        </member>
        <member name="F:Colosoft.Runtime.MemoryManager._objectProviders">
            <summary>
            Hash dos provedores de objetos do gerenciador.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.MemoryManager.GetProvider(System.Type)">
            <summary>
            Recupera o provedor associado com o tipo informado.
            </summary>
            <param name="objType">Tipo do objeto do provedor.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.MemoryManager.RegisterObjectProvider(Colosoft.Runtime.ObjectProvider)">
            <summary>
            Registra um provedor de objetos.
            </summary>
            <param name="proivder"></param>
        </member>
        <member name="T:Colosoft.Runtime.ObjectProvider">
            <summary>
            Classe responsável por prover instancia de objetos.
            </summary>
        </member>
        <member name="F:Colosoft.Runtime.ObjectProvider._initialSize">
            <summary>
            Tamanho inicial.
            </summary>
        </member>
        <member name="F:Colosoft.Runtime.ObjectProvider._objectType">
            <summary>
            Tipo do objeto associado.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.ObjectProvider.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.ObjectProvider.#ctor(System.Int32)">
            <summary>
            Cria uma instancia com o tamanho inicial.
            </summary>
            <param name="initialSize"></param>
        </member>
        <member name="M:Colosoft.Runtime.ObjectProvider.ResetObject(System.Object)">
            <summary>
            Reseta a instancia informada.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Colosoft.Runtime.ObjectProvider.CreateObject">
            <summary>
            Cria uma instancia para o objeto gerenciado pela instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.ObjectProvider.Initialize">
            <summary>
            Inicializa a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.ObjectProvider.RentAnObject">
            <summary>
            Cria uma instancia alugada.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.ObjectProvider.SubmittObject(Colosoft.Runtime.IRentableObject)">
            <summary>
            Adiciona o objeto informado para instancia.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:Colosoft.Runtime.ObjectProvider.AvailableCount">
            <summary>
            Quantidade de itens disponíveis.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.ObjectProvider.InitialSize">
            <summary>
            Tamanho inicial.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.ObjectProvider.Name">
            <summary>
            Nome do provedor.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.ObjectProvider.ObjectType">
            <summary>
            Tipo de objeto gerenciado pela instancia.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.ObjectProvider.RentCount">
            <summary>
            Total de instancia alugadas.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.ObjectProvider.TotalObjects">
            <summary>
            Quantidade total de objetos.
            </summary>
        </member>
        <member name="T:Colosoft.Runtime.PlatformHelper">
            <summary>
            Classe com método que auxiliam a identificador da plataforma que está sendo
            executada no momento.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.PlatformHelper.IsRunningOnMono">
            <summary>
            Identifica se o sistema está sendo executado sobre o Mono.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.PlatformHelper.IsLinux">
            <summary>
            Verifica se o OS é linux.
            </summary>
        </member>
        <member name="T:Colosoft.Runtime.Remoting.CommunicationErrorEventArgs">
            <summary>
            Representa os argumentos deo evento acionado quando ocorre um erro de comunicação.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationErrorEventArgs.#ctor(Colosoft.Runtime.Remoting.CommunicationProtocol,Colosoft.Runtime.Remoting.CommunicationResult)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="protocol"></param>
            <param name="result"></param>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.CommunicationErrorEventArgs.Detail">
            <summary>
            Detalhes.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.CommunicationErrorEventArgs.Protocol">
            <summary>
            Protocolo.
            </summary>
        </member>
        <member name="T:Colosoft.Runtime.Remoting.CommunicationProtocol">
            <summary>
            Possíveis protocolos de comunicação.
            </summary>
        </member>
        <member name="F:Colosoft.Runtime.Remoting.CommunicationProtocol.Tcp">
            <summary>
            TCP.
            </summary>
        </member>
        <member name="F:Colosoft.Runtime.Remoting.CommunicationProtocol.Udp">
            <summary>
            UDP;
            </summary>
        </member>
        <member name="F:Colosoft.Runtime.Remoting.CommunicationProtocol.Ftp">
            <summary>
            FTP.
            </summary>
        </member>
        <member name="F:Colosoft.Runtime.Remoting.CommunicationProtocol.SerialPort">
            <summary>
            SerialPort.
            </summary>
        </member>
        <member name="T:Colosoft.Runtime.Remoting.CommunicationReader">
            <summary>
            Leitor de comunicação.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationReader.EndsWithTerminator(System.Byte[],System.Int32,System.Int32,Colosoft.Runtime.Remoting.CommunicationReader.HeaderTerminator)">
            <summary>
            Verifica se os dados informados terminam com o terminador informado.
            </summary>
            <param name="data">Buffer.</param>
            <param name="startIndex">Indice de inicio para leitura do buffer.</param>
            <param name="length">Tamanho dos dados que devem ser lidos.</param>
            <param name="headerTerminator"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationReader.GetHeaderLength(System.Byte[])">
            <summary>
            Recupera o tamanho do cabeçalho.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationReader.GetHeaderTerminator(System.Byte[],System.Int32)">
            <summary>
            Recupera o terminador com base nos dados informados.
            </summary>
            <param name="data"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationReader.GetTerminatorLength(System.Byte[])">
            <summary>
            Recupera o tamanho do terminador.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationReader.IsNone(System.Byte[])">
            <summary>
            Verifica se o buffer de dados é inválido.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationReader.Matches(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Compara os buffers informados.
            </summary>
            <param name="pattern">Padrão que será comparado.</param>
            <param name="patternIndex"></param>
            <param name="patternLength"></param>
            <param name="data">Dados que será comparados</param>
            <param name="length"></param>
            <param name="fromEnd"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationReader.AddHeaderTerminator(System.Byte[],System.Byte[])">
            <summary>
            Adiciona o terminador do cabeçalho.
            </summary>
            <param name="header"></param>
            <param name="terminator"></param>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationReader.CleanBuffers">
            <summary>
            Limpa os buffers.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationReader.CleanHeaderTermiators">
            <summary>
            Limpa os terminadores do cabeçalho.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationReader.GetRawData(System.Byte[],System.Int32)">
            <summary>
            Recupera os dados do buffer informado.
            </summary>
            <param name="data"></param>
            <param name="dataSize">Tamanho dos dados no buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationReader.ReadBuffer(System.Byte[]@)">
            <summary>
            Lê o buffer.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationReader.ReadBuffer(System.Byte[]@,System.Int32)">
            <summary>
            Lê o buffer.
            </summary>
            <param name="data"></param>
            <param name="expectedSize">Tamanho esperado.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationReader.ReadDataLength(System.Int32@)">
            <summary>
            Lê o tamanho dos dados.
            </summary>
            <param name="dataLength"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationReader.ReadStream(System.IO.Stream,System.Byte[]@)">
            <summary>
            Lê a stream.
            </summary>
            <param name="stream"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationReader.ReadStream(System.IO.Stream,System.Byte[]@,System.Int32)">
            <summary>
            Lê a stream.
            </summary>
            <param name="stream"></param>
            <param name="data"></param>
            <param name="expectedSize"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationReader.RegisterBuffer(System.Byte[],System.Int32)">
            <summary>
            Registra o buffer.
            </summary>
            <param name="buffer">Buffer.</param>
            <param name="bufferSize">Tamanho do buffer.</param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.CommunicationReader.BufferAvailable">
            <summary>
            Identifica se o buffer está disponível.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.CommunicationReader.CheckSumBlockSize">
            <summary>
            Tamanho do bloco co checksum.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.CommunicationReader.FormatLengthBlockSize">
            <summary>
            Tamanho do bloco de tamanho do formato.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.CommunicationReader.Header">
            <summary>
            Cabeçalho.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.CommunicationReader.MaxDataLength">
            <summary>
            Tamanho máximo dos dados recebidos.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.CommunicationReader.Terminator">
            <summary>
            Terminador.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.CommunicationReader.UseCheckSum">
            <summary>
            Identifica se é para usar o checksum.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.CommunicationReader.UseFormatLength">
            <summary>
            Identifica se é para usar o tamanho do formato.
            </summary>
        </member>
        <member name="T:Colosoft.Runtime.Remoting.CommunicationReader.HeaderTerminator">
            <summary>
            Armazena o cabeçalho e os terminadores.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.CommunicationReader.HeaderTerminator.Header">
            <summary>
            Cabeçalho.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.CommunicationReader.HeaderTerminator.Terminators">
            <summary>
            Terminadores.
            </summary>
        </member>
        <member name="T:Colosoft.Runtime.Remoting.CommunicationResult">
            <summary>
            Representa o resultado da comunicação.
            </summary>
        </member>
        <member name="F:Colosoft.Runtime.Remoting.CommunicationResult.Success">
            <summary>
            Identifica que a comunicação foi realizada com sucesso.
            </summary>
        </member>
        <member name="F:Colosoft.Runtime.Remoting.CommunicationResult.Closed">
            <summary>
            Idenificica que a comunicação foi fechada.
            </summary>
        </member>
        <member name="F:Colosoft.Runtime.Remoting.CommunicationResult.AlreadyOpen">
            <summary>
            Identifica que a comunicação está aberta.
            </summary>
        </member>
        <member name="F:Colosoft.Runtime.Remoting.CommunicationResult.OpenFailed">
            <summary>
            Identifica que a comunicação foi aberta com falha.
            </summary>
        </member>
        <member name="F:Colosoft.Runtime.Remoting.CommunicationResult.Timeout">
            <summary>
            Identifica que estorou o tempo de espera.
            </summary>
        </member>
        <member name="F:Colosoft.Runtime.Remoting.CommunicationResult.SendFailed">
            <summary>
            Identifica que houve uma falha no envio.
            </summary>
        </member>
        <member name="F:Colosoft.Runtime.Remoting.CommunicationResult.ReceiveFailed">
            <summary>
            Identifica que houve uma falha no recebimento.
            </summary>
        </member>
        <member name="F:Colosoft.Runtime.Remoting.CommunicationResult.AddressUsed">
            <summary>
            Identifica que o endereço está sendo usado.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationResult.#ctor(System.Int32)">
            <summary>
            Cria a instancia informando o código do erro.
            </summary>
            <param name="errorCode"></param>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationResult.#ctor(System.Int32,System.String)">
            <summary>
            Cria a instancia informando o código do erro e a mensagem.
            </summary>
            <param name="errorCode"></param>
            <param name="message"></param>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationResult.#cctor">
            <summary>
            Construtor estático.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationResult.ToString">
            <summary>
            Recupera o texto que representa a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationResult.GetDebugInfo">
            <summary>
            Recupera as informações para depuraçã.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationResult.Equals(System.Object)">
            <summary>
            Verifica se os dados são iguais aos da instancia informada.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationResult.GetHashCode">
            <summary>
            Recupera o hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationResult.op_Implicit(Colosoft.Runtime.Remoting.CommunicationResult)~System.Boolean">
            <summary>
            Sobrecarga do operador com o tipo Boolean.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationResult.op_Implicit(Colosoft.Runtime.Remoting.CommunicationResult)~System.Int32">
            <summary>
            Sobrecarga do operador com o tipo Int32.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationResult.op_Equality(Colosoft.Runtime.Remoting.CommunicationResult,Colosoft.Runtime.Remoting.CommunicationResult)">
            <summary>
            Sobrecarga do operador de comparação.
            </summary>
            <param name="result1"></param>
            <param name="result2"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.CommunicationResult.op_Inequality(Colosoft.Runtime.Remoting.CommunicationResult,Colosoft.Runtime.Remoting.CommunicationResult)">
            <summary>
            Sobrecarga do operador de comparação.
            </summary>
            <param name="result1"></param>
            <param name="result2"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.CommunicationResult.ErrorCode">
            <summary>
            Código do erro.
            </summary>
        </member>
        <member name="T:Colosoft.Runtime.Remoting.ICommunication">
            <summary>
            Assinatura de uma forma de comunicação.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.ICommunication.Close">
            <summary>
            Fecha a comunicação.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.ICommunication.Open">
            <summary>
            Abre a comunicação.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.ICommunication.Receive(System.Byte[]@)">
            <summary>
            Receber os dados.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.ICommunication.ReceiveAsync(System.Action{System.Byte[],System.Net.IPEndPoint},System.Action{System.Net.IPEndPoint},System.Boolean)">
            <summary>
            Recebe os dados de forma assincrona.
            </summary>
            <param name="receiveAction"></param>
            <param name="timeoutAction"></param>
            <param name="expectResponse"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.ICommunication.Send(System.Byte[],System.Int32)">
            <summary>
            Envia os dados.
            </summary>
            <param name="data"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.ICommunication.IsOpen">
            <summary>
            Identifica se a comunicação está aberta.
            </summary>
        </member>
        <member name="T:Colosoft.Runtime.Remoting.Log">
            <summary>
            Classe de log da comunicação.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.Log.#ctor(System.String,System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.Log.Error(System.String)">
            <summary>
            Escreve uma mensagem de erro.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.Log.Error(System.String,System.Object[])">
            <summary>
            Escreve uma mensagem.
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.Log.Info(System.String)">
            <summary>
            Escreve uma mensagem informativa.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.Log.Info(System.String,System.Object[])">
            <summary>
            Escreve uma mensagem informativa.
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.Log.Verbose(System.String)">
            <summary>
            Escreve uma mensagem.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.Log.Verbose(System.String,System.Object[])">
            <summary>
            Escreve uma mensagem.
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.Log.Warn(System.String)">
            <summary>
            Escreve uma mensagem de alerta.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.Log.Warn(System.String,System.Object[])">
            <summary>
            Escreve uma mensagem de alerta.
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="T:Colosoft.Runtime.Remoting.LogAccessor">
            <summary>
            Classe de acesso ao log.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.LogAccessor.Log">
            <summary>
            Log.
            </summary>
        </member>
        <member name="T:Colosoft.Runtime.Remoting.NetworkCommunication">
            <summary>
            Implementação base de uma cmunicação de rde.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.NetworkCommunication.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.NetworkCommunication.Finalize">
            <summary>
            Destrutor.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.NetworkCommunication.BeginReceive(System.Action{System.Byte[],System.Net.IPEndPoint})">
            <summary>
            Inicia o processo assincrono de recebimento dos dados.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.NetworkCommunication.Close">
            <summary>
            Fecha a comunicação.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.NetworkCommunication.EndReceive">
            <summary>
            Finaliza o recebimento de dados.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.NetworkCommunication.Open">
            <summary>
            Abre a comunicação.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.NetworkCommunication.Receive(System.Byte[]@)">
            <summary>
            Recebe os dados.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.NetworkCommunication.ReceiveAsync(System.Action{System.Byte[],System.Net.IPEndPoint},System.Action{System.Net.IPEndPoint},System.Boolean)">
            <summary>
            Recebe os dados de forma assincrona.
            </summary>
            <param name="receiveAction"></param>
            <param name="timeoutAction"></param>
            <param name="expectResponse"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.NetworkCommunication.Send(System.Byte[],System.Int32)">
            <summary>
            Envia os dados.
            </summary>
            <param name="data"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.NetworkCommunication.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.NetworkCommunication.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.NetworkCommunication.IsOpen">
            <summary>
            Identifica se a comunicação está aberta.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.NetworkCommunication.RemoteEndPoint">
            <summary>
            EndPoint remoto.
            </summary>
        </member>
        <member name="T:Colosoft.Runtime.Remoting.TcpCommunication">
            <summary>
            Implementação da comunicação via TCP.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.TcpStreamReceived(System.IAsyncResult)">
            <summary>
            Método acionado quando dados forem recebidos da stream da conexão.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.ReceiveBase(System.Byte[]@)">
            <summary>
            Método base para recebimento dos dados.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.TryOpen(System.IAsyncResult)">
            <summary>
            Tenta abrir a comunicação.
            </summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.HandleResult(Colosoft.Runtime.Remoting.CommunicationResult)">
            <summary>
            Tranta o resultado.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.ReadBuffer">
            <summary>
            Lê o buffer.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.AddHeaderTerminator(System.Byte[],System.Byte[])">
            <summary>
            Adiciona um terminador do cabeçalho.
            </summary>
            <param name="header"></param>
            <param name="terminator"></param>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.BeginReceive(System.Action{System.Byte[]})">
            <summary>
            Inicia o processo assincrono para recebimento dos dados.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.BeginReceive(System.Action{System.Byte[],System.Net.IPEndPoint})">
            <summary>
            Inicia o processo assincrono para recebimento dos dados.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.CleanHeaderTermiators">
            <summary>
            Remove os terminadores do cabeçalho.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.ClearBuffer">
            <summary>
            Limpa o buffer.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.Close">
            <summary>
            Fecha a comunicação.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.Close(System.Boolean)">
            <summary>
            Fecha a comunicação.
            </summary>
            <param name="force">Identifica se é para força o fechamento.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.EndReceive">
            <summary>
            Finaliza o recebimento assincrono dos dados.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.GetRawData(System.Byte[],System.Int32)">
            <summary>
            Recupera o dados.
            </summary>
            <param name="data"></param>
            <param name="dataSize">Tamanho dos dados.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.Open">
            <summary>
            Abrea a comunicação.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.Receive(System.Byte[]@)">
            <summary>
            Recebe os dados.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.Receive(System.Byte[]@,System.Int32)">
            <summary>
            Recebe os dados.
            </summary>
            <param name="data">Buffer dos dados recebidos.</param>
            <param name="expectedSize">Tamanho esperado.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.ReceiveAsync(System.Action{System.Byte[],System.Net.IPEndPoint},System.Action{System.Net.IPEndPoint},System.Boolean)">
            <summary>
            Recebe os dados de forma assincrona.
            </summary>
            <param name="receiveAction"></param>
            <param name="timeoutAction"></param>
            <param name="expectResponse"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.Send(System.Byte[],System.Int32)">
            <summary>
            Envia os dados.
            </summary>
            <param name="data">Dados que serão enviados.</param>
            <param name="size">Tamanho dos dados.</param>
            <returns></returns>
        </member>
        <member name="E:Colosoft.Runtime.Remoting.TcpCommunication.ErrorOccurred">
            <summary>
            Evento acionado quando ocorre um erro na comunicação.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.TcpCommunication.CheckSumBlockSize">
            <summary>
            Tamanho do bloco de CheckSum.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.TcpCommunication.DataAvailable">
            <summary>
            Identifica se possui dados disponíveis.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.TcpCommunication.FormatLengthBlockSize">
            <summary>
            Tamanho do block do tamanho do formato.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.TcpCommunication.IsOpen">
            <summary>
            Identifica se a comunicação está aberta.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.TcpCommunication.LastError">
            <summary>
            Último erro ocorrido.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.TcpCommunication.MaxDataLength">
            <summary>
            Tamanho máximo dos dados.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.TcpCommunication.Stream">
            <summary>
            Stream.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.TcpCommunication.TcpTimeout">
            <summary>
            Tempo de espera do TCP.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.TcpCommunication.UseCheckSum">
            <summary>
            Identifica se é para usar o CheckSum.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.TcpCommunication.UseFormatLength">
            <summary>
            Identifica se é para usar o tamanho do formato.
            </summary>
        </member>
        <member name="T:Colosoft.Runtime.Remoting.TcpCommunication.TcpCommunicationState">
            <summary>
            Estado da comunicação.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.TcpCommunicationState.#ctor(System.Byte[])">
            <summary>
            Construtor padrão.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.TcpCommunication.TcpCommunicationState.GetData">
            <summary>
            Recupera os dados.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Runtime.Remoting.UdpCommunication">
            <summary>
            Implementação da comunicação sobre UDP.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.UdpCommunication.Finalize">
            <summary>
            Destrutor.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.UdpCommunication.UdpClientReceive(System.IAsyncResult)">
            <summary>
            Método acionado quando for recebido uma mensagem do cliente UDP.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.UdpCommunication.Bind(System.Net.IPEndPoint)">
            <summary>
            Vincula o EndPoint.
            </summary>
            <param name="localEndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.UdpCommunication.Dispatch(System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <summary>
            Despacha os dados para o endPoint informado.
            </summary>
            <param name="data"></param>
            <param name="size"></param>
            <param name="remoteEndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.UdpCommunication.HandleResult(Colosoft.Runtime.Remoting.CommunicationResult)">
            <summary>
            Trata o resultado da comunicação.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.UdpCommunication.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.UdpCommunication.BeginReceive(System.Action{System.Byte[],System.Net.IPEndPoint})">
            <summary>
            Inicia o recebimento de dados assincrono.
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.UdpCommunication.Broadcast(System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <summary>
            Dispara um broadcast dos dados.
            </summary>
            <param name="data"></param>
            <param name="size"></param>
            <param name="broadcastEndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.UdpCommunication.Close">
            <summary>
            Fecha a comunicação.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.UdpCommunication.EndReceive">
            <summary>
            Finaliza o recebimento dos dados.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.UdpCommunication.Open">
            <summary>
            Abre a comunicação.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.UdpCommunication.Receive(System.Byte[]@)">
            <summary>
            Recebe os dados.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.UdpCommunication.ReceiveAsync(System.Action{System.Byte[],System.Net.IPEndPoint},System.Action{System.Net.IPEndPoint},System.Boolean)">
            <summary>
            Recebe os dados de forma assincrona.
            </summary>
            <param name="receiveAction"></param>
            <param name="timeoutAction"></param>
            <param name="expectResponse"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.Remoting.UdpCommunication.Send(System.Byte[],System.Int32)">
            <summary>
            Envia os dados.
            </summary>
            <param name="data"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="E:Colosoft.Runtime.Remoting.UdpCommunication.ErrorOccurred">
            <summary>
            Evento acionado quando ocorrer um erro na comunicação.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.UdpCommunication.IsOpen">
            <summary>
            Identifica se a comunicação está aberta.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.Remoting.UdpCommunication.LocalEndPoint">
            <summary>
            EndPoint local.
            </summary>
        </member>
        <member name="T:Colosoft.Runtime.RuntimeValueStorage">
            <summary>
            Implementação padrão do IRuntimeValueStorage.
            </summary>
        </member>
        <member name="M:Colosoft.Runtime.RuntimeValueStorage.GetValue(System.String)">
            <summary>
            Recupera o valor associado com o nome informado.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Runtime.RuntimeValueStorage.SetValue(System.String,System.Object)">
            <summary>
            Define o valor associado com o nome informado.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Runtime.RuntimeValueStorage.RemoveValue(System.String)">
            <summary>
            Remove o valor associado com o nome informado.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Colosoft.Runtime.RuntimeValueStorage.Default">
            <summary>
            Instancia padrão.
            </summary>
        </member>
        <member name="P:Colosoft.Runtime.RuntimeValueStorage.Instance">
            <summary>
            Instancia geral.
            </summary>
        </member>
        <member name="T:Colosoft.Security.AuthenticationStatus">
            <summary>
            Enumerador dos tipos de retorno de autenticação
            </summary>
        </member>
        <member name="F:Colosoft.Security.AuthenticationStatus.Success">
            <summary>
            Credenciais válidas
            </summary>
        </member>
        <member name="F:Colosoft.Security.AuthenticationStatus.InvalidUserNameOrPassword">
            <summary>
            Nome de usuário ou senha incorreta
            </summary>
        </member>
        <member name="F:Colosoft.Security.AuthenticationStatus.InvalidDomain">
            <summary>
            Domínio inválido
            </summary>
        </member>
        <member name="F:Colosoft.Security.AuthenticationStatus.PasswordExpired">
            <summary>
            Senha expirada
            </summary>
        </member>
        <member name="F:Colosoft.Security.AuthenticationStatus.PasswordWarning">
            <summary>
            Credenciais válidas porém com alerta
            </summary>
        </member>
        <member name="F:Colosoft.Security.AuthenticationStatus.ErrorInValidate">
            <summary>
            Ocorreu algum erro durante a autenticação
            </summary>
        </member>
        <member name="F:Colosoft.Security.AuthenticationStatus.CaptchaRequired">
            <summary>
            Erro pois autenticação requer captcha
            </summary>
        </member>
        <member name="F:Colosoft.Security.AuthenticationStatus.InvalidCaptcha">
            <summary>
            Informações do captcha incorretas
            </summary>
        </member>
        <member name="F:Colosoft.Security.AuthenticationStatus.ErrorTokenControl">
            <summary>
            Erro ao criar controle de token
            </summary>
        </member>
        <member name="F:Colosoft.Security.AuthenticationStatus.DuplicateToken">
            <summary>
            Se já existe um token aberto para o usuário em questão
            </summary>
        </member>
        <member name="F:Colosoft.Security.AuthenticationStatus.ErrorInCommunication">
            <summary>
            Identifica erro na comunicação com o servidor de autenticação.
            </summary>
        </member>
        <member name="F:Colosoft.Security.AuthenticationStatus.UnknownError">
            <summary>
            Identifica um erro desconhecido.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Authentication.Authentication">
            <summary>
            Classe abstrata com tratamentos básicos de usuário
            </summary>
        </member>
        <member name="T:Colosoft.Security.IUserProvider">
            <summary>
            Provedor de acesso a manipulação dos dados do usuário.
            </summary>
        </member>
        <member name="M:Colosoft.Security.IUserProvider.RequestPasswordReset(System.String)">
            <summary>
            Inicia o processo de redefinição de senha
            </summary>
            <param name="userName">Nome do usuário</param>
            <returns>Resultado do processo</returns>
        </member>
        <member name="M:Colosoft.Security.IUserProvider.CreateUser(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Boolean,Colosoft.Security.UserCreateStatus@,Colosoft.Security.SecurityParameter[])">
            <summary>
            Cria um novo usuário no sistema.
            </summary>
            <param name="username">Nome do usuário.</param>
            <param name="password">Senha de acesso.</param>
            <param name="fullName">Nome completo do usuário.</param>
            <param name="email">Email associado com o usuário.</param>
            <param name="passwordQuestion">Pergunta para a senha.</param>
            <param name="passwordAnswer">Resposta da pergunta para a recuperação da senha.</param>
            <param name="isApproved">Identifica se o usuário é aprovado.</param>
            <param name="identityProvider">Nome do provedor de identidade do usuário.</param>
            <param name="userKey">Chave que identifica o usuário.</param>
            <param name="ignoreCaptcha">Indica se o usuário deve ignorar o controle de captcha</param>
            <param name="status">Situação do usuário.</param>
            <param name="parameters">Parametros adicionais para a criação do usuário</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IUserProvider.ChangePassword(System.String,System.String,System.String,Colosoft.Security.SecurityParameter[])">
            <summary>
            Método usado para alterar a senha do usuário.
            </summary>
            <param name="username">Nome do usuário.</param>
            <param name="oldPassword">Antiga senha.</param>
            <param name="newPassword">Nova senha.</param>
            <param name="parameters">Parametros da autenticação.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IUserProvider.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Método usado para alterar a senha do usuário.
            </summary>
            <param name="username">Nome do usuário.</param>
            <param name="password">Nova senha.</param>
            <param name="newPasswordQuestion">Pergunta para a nova senha.</param>
            <param name="newPasswordAnswer">Resposta da pergunta da nova senha.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IUserProvider.ResetPassword(System.String,System.String)">
            <summary>
            Reseta a senha do usuário.
            </summary>
            <param name="username">Nome do usuário.</param>
            <param name="answer">Resposta para validar a operação.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IUserProvider.GetUser(System.String,System.Boolean)">
            <summary>
            Recupera os dados do usuário.
            </summary>
            <param name="username">Nome do usuário.</param>
            <param name="userIsOnline">Identifica se o usuário é para estar online.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IUserProvider.GetUserByKey(System.String,System.Boolean)">
            <summary>
            Recupera os dados do usuário pela a sua chave.
            </summary>
            <param name="userKey">Valor da chave do usuário.</param>
            <param name="userIsOnline">Identifica se o usuário é para estar online.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IUserProvider.GetUserByToken(System.String,System.Boolean)">
            <summary>
            Recupera os dados do usuário pelo token informado.
            </summary>
            <param name="token"></param>
            <param name="userIsOnline"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IUserProvider.UpdateUser(Colosoft.Security.IUser)">
            <summary>
            Atualiza os dados do usuário.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Colosoft.Security.IUserProvider.GetNumberOfUsersOnline">
            <summary>
            Recupera o número de usuário online.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IUserProvider.GetIdentityProviders">
            <summary>
            Recupera os nomes de todos os provedores do identidade cadastrados no sistema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IUserProvider.ValidateUser(System.String,System.String,Colosoft.Security.SecurityParameter[])">
            <summary>
            Valida credenciais
            </summary>
            <param name="userName">Nome de usuário</param>
            <param name="password">Senha</param>
            <param name="parameters">Demais parâmetros</param>
            <returns>Resultado da autenticação</returns>
        </member>
        <member name="M:Colosoft.Security.IUserProvider.ValidateToken(System.String)">
            <summary>
            Valida os dados do token.
            </summary>
            <param name="token">Token</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IUserProvider.LogOut(System.String)">
            <summary>
            Desloga o usuário do sistema
            </summary>
            <param name="token">Token do usuário</param>
            <returns>Sucesso da operação</returns>
        </member>
        <member name="P:Colosoft.Security.IUserProvider.EnablePasswordReset">
            <summary>
            Identifica se está habilitado resetar a senha.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IUserProvider.EnablePasswordRetrieval">
            <summary>
            Identifica se a recuperação de senha está habilitada.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IUserProvider.MaxInvalidPasswordAttempts">
            <summary>
            Número máximo de senhas inválidas.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IUserProvider.MinRequiredNonAlphanumericCharacters">
            <summary>
            Quantidade minima de caracteres não alfanuméricos.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IUserProvider.MinRequiredPasswordLength">
            <summary>
            Comprimento minimo requerido para a senha.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IUserProvider.PasswordFormat">
            <summary>
            Formato da senha.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IUserProvider.PasswordStrengthRegularExpression">
            <summary>
            Expressão regular usada para varifica se a senha é forte.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IUserProvider.RequiresQuestionAndAnswer">
            <summary>
            Identifica se é requerido pergunta e resposta.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IUserProvider.Name">
            <summary>
            Nome do provedor.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Authentication.Authentication.#ctor">
            <summary>
            Construtor padrão da classe
            </summary>
        </member>
        <member name="M:Colosoft.Security.Authentication.Authentication.RequestPasswordReset(System.String)">
            <summary>
            Inicia o processo de redefinição de senha
            </summary>
            <param name="userName">Nome do usuário</param>
            <returns>Resultado do processo</returns>
        </member>
        <member name="M:Colosoft.Security.Authentication.Authentication.ValidateUser(System.String,System.String,Colosoft.Security.SecurityParameter[])">
            <summary>
            Valida o usuário no provedor de identidade
            </summary>
            <param name="userName">Nome de usuário</param>
            <param name="password">Senha</param>
            <param name="parameters">Demais informações necessárias</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Authentication.Authentication.ValidateToken(System.String)">
            <summary>
            Valida os dados do token.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Authentication.Authentication.ChangePassword(System.String,System.String,System.String,Colosoft.Security.SecurityParameter[])">
            <summary>
            Altera o password do usuário
            </summary>
            <param name="userName">usuário</param>
            <param name="oldPassword">senha atual</param>
            <param name="newPassword">nova senha</param>
            <param name="parameters">demais parametros</param>
            <returns>resultado da operação</returns>
        </member>
        <member name="M:Colosoft.Security.Authentication.Authentication.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Altera o password do usuário
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="newPasswordQuestion"></param>
            <param name="newPasswordAnswer"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Authentication.Authentication.GetNumberOfUsersOnline">
            <summary>
            Retorna o número de usuários online
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Authentication.Authentication.GetUser(System.String,System.Boolean)">
            <summary>
            Retorna o usuário
            </summary>
            <param name="username">Nome do usuário</param>
            <param name="userIsOnline">Flag que indica se o usuário está online</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Authentication.Authentication.ResetPassword(System.String,System.String)">
            <summary>
            Limpa a senha
            </summary>
            <param name="username">Nome de usuário</param>
            <param name="answer">Resposta da pergunta secreta</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Authentication.Authentication.LogOut(System.String)">
            <summary>
            Desloga o usuário do sistema
            </summary>
            <param name="token">Token do usuário</param>
            <returns>Sucesso da operação</returns>
        </member>
        <member name="M:Colosoft.Security.Authentication.Authentication.UpdateUser(Colosoft.Security.IUser)">
            <summary>
            Atualiza o cadastro do usuário
            </summary>
            <param name="user">Usuário</param>
        </member>
        <member name="M:Colosoft.Security.Authentication.Authentication.CreateUser(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Boolean,Colosoft.Security.UserCreateStatus@,Colosoft.Security.SecurityParameter[])">
            <summary>
            Cria um novo usuário no sistema.
            </summary>
            <param name="username">Nome do usuário.</param>
            <param name="password">Senha de acesso.</param>
            <param name="email">Email associado com o usuário.</param>
            <param name="passwordQuestion">Pergunta para a senha.</param>
            <param name="passwordAnswer">Resposta da pergunta para a recuperação da senha.</param>
            <param name="isApproved">Identifica se o usuário é aprovado.</param>
            <param name="identityProvider">Nome do provedor de identidade do usuário.</param>
            <param name="userKey">Chave que identifica o usuário.</param>
            <param name="ignoreCaptcha">Indica se o usuário irá ignorar o controle por captcha</param>
            <param name="status">Situação do usuário.</param>
            <param name="fullname">Nome do usuário</param>
            <param name="parameters">Parametros adicionais para a criação do usuário</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Authentication.Authentication.GetUserByKey(System.String,System.Boolean)">
            <summary>
            Busca o usuário pela chave
            </summary>
            <param name="userKey">Chave</param>
            <param name="userIsOnline"></param>
            <returns>Objeto</returns>
        </member>
        <member name="M:Colosoft.Security.Authentication.Authentication.GetUserByToken(System.String,System.Boolean)">
            <summary>
            Recupera os dados do usuário pelo token informado.
            </summary>
            <param name="token"></param>
            <param name="userIsOnline"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Authentication.Authentication.GetIdentityProviders">
            <summary>
            Busca os provedores de acesso disponíveis
            </summary>
            <returns>Lista com os nomes</returns>
        </member>
        <member name="M:Colosoft.Security.Authentication.Authentication.InsertUser(Colosoft.Security.IUser)">
            <summary>
            Persiste o usuário na base
            </summary>
            <param name="user">Usuário a persistir</param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Security.Authentication.Authentication.InvalidLogin">
            <summary>
            Controla os logins inválidos para verificar a necessidade ou não de captcha
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.Authentication.ValidatePassword">
            <summary>
            Retorna a instância de validação de senha
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.Authentication.EnablePasswordReset">
            <summary>
            Informa se o password pode ou não ser resetado
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.Authentication.EnablePasswordRetrieval">
            <summary>
            Informa se o password pode ou não ser recuperado
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.Authentication.MaxInvalidPasswordAttempts">
            <summary>
            Número máximo de tentativas de autenticaçãoi
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.Authentication.MinRequiredNonAlphanumericCharacters">
            <summary>
            Número mínimo de caracteres alfanuméricos na senha
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.Authentication.MinRequiredPasswordLength">
            <summary>
            Tamanho mínimo necessário para a senha
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.Authentication.PasswordFormat">
            <summary>
            Formatador da senha
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.Authentication.PasswordStrengthRegularExpression">
            <summary>
            Expreessão regular para validar senha
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.Authentication.RequiresQuestionAndAnswer">
            <summary>
            Informa se é obrigatório o preenchimento da resposta da pergunta secreta
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.Authentication.Name">
            <summary>
            Nome do usuário
            </summary>
        </member>
        <member name="T:Colosoft.Security.Authentication.AutheticationServiceNameChangedHandler">
            <summary>
            Assinatura do evento acionado quando o nome do serviço de autenticação 
            for alterado.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Authentication.AuthenticationService">
            <summary>
            Armazena as informações do serviço de autenticação.
            </summary>
        </member>
        <member name="E:Colosoft.Security.Authentication.AuthenticationService.NameChanged">
            <summary>
            Evento acionado quando o nome do serviço de autenticação for alterado.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.AuthenticationService.Name">
            <summary>
            Nome do serviço de autenticação.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Authentication.IAutheticableUser">
            <summary>
            Interface mínima para que um usuário seja autenticado
            </summary>
        </member>
        <member name="T:Colosoft.Security.IUser">
            <summary>
            Armazena os dados associados com o usuário.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IUser.UserKey">
            <summary>
            Chave que identifica unicamente o usuário.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IUser.UserName">
            <summary>
            Nome do usuário.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IUser.FullName">
            <summary>
            Nome completo do usuário.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IUser.Email">
            <summary>
            Email associado.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IUser.PasswordQuestion">
            <summary>
            Questão usada para recuperação da senha.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IUser.IsApproved">
            <summary>
            Identifica se o usuário foi aprovado.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IUser.IdentityProvider">
            <summary>
            Nome do provedor de identidade do usuário.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IUser.LastPasswordChangedDate">
            <summary>
            Ultima data de alteração da senha de acesso.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IUser.CreationDate">
            <summary>
            Data de criação do usuário.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IUser.IgnoreCaptcha">
            <summary>
            Indica que o usuário deve ignorar o captcha do sistema
            </summary>
        </member>
        <member name="P:Colosoft.Security.IUser.IsActive">
            <summary>
            Identifica se o usuário está inativo.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.IAutheticableUser.IdentityProviderId">
            <summary>
            Identificador do provedor de identidade associado.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.IAutheticableUser.PasswordAnswer">
            <summary>
            Resposta à pergunta para relembrar senha
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.IAutheticableUser.PasswordQuestion">
            <summary>
            Questão usada para recuperação da senha.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.IAutheticableUser.UserName">
            <summary>
            Nome de usuário
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.IAutheticableUser.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.IAutheticableUser.FullName">
            <summary>
            Nome ompleto
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.IAutheticableUser.IdentityProvider">
            <summary>
            Nome do provedor de identidade
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.IAutheticableUser.LastPasswordChangedDate">
            <summary>
            Data da ultima alteraçã de senha
            </summary>
        </member>
        <member name="T:Colosoft.Security.Authentication.IdentityProvider">
            <summary>
            Objeto com o provedor de acesso
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.IdentityProvider.IdentityProviderId">
            <summary>
            Identificador
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.IdentityProvider.FullName">
            <summary>
            Nome
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.IdentityProvider.Type">
            <summary>
            Tipo aonde está implementado o provedor
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.IdentityProvider.TypeString">
            <summary>
            Strnig com a definição do tipo
            </summary>
        </member>
        <member name="P:Colosoft.Security.Authentication.IdentityProvider.WarningDays">
            <summary>
            Dias de antecedência para o alerta de alteração de senha
            </summary>
        </member>
        <member name="T:Colosoft.Security.Authentication.IIdentityProviderManager">
            <summary>
            Fluxo de recuperação de identityprovider
            </summary>
        </member>
        <member name="M:Colosoft.Security.Authentication.IIdentityProviderManager.GetProviderByName(System.String)">
            <summary>
            Gecupera o nome do objeto do provider
            </summary>
            <param name="providerName">Nome do provedor de identidade</param>
            <returns>Tipo do provedor de identidade</returns>
        </member>
        <member name="M:Colosoft.Security.Authentication.IIdentityProviderManager.GetProviderById(System.Int32)">
            <summary>
            Retorna o nome do provedor de udentidade
            </summary>
            <param name="providerId">identificador</param>
            <returns>nome</returns>
        </member>
        <member name="T:Colosoft.Security.Authentication.Log.ILog">
            <summary>
            Contrato para classes que implementarão o log de autenticação.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Authentication.Log.ILog.LogRequest(System.String,System.String,System.Byte)">
            <summary>
            Registra o log.
            </summary>
            <param name="userName">Nome do usuário</param>
            <param name="iP">IP</param>
            <param name="status">Status da autenticação</param>
        </member>
        <member name="T:Colosoft.Security.CaptchaSupport.Captcha">
            <summary>
            Classe que encapsula o uso do captcha no sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Security.CaptchaSupport.Captcha.Init(Colosoft.Security.CaptchaSupport.ICaptcha)">
            <summary>
            Inicializa a instancia do catcha que será usada pelo sistema.
            </summary>
            <param name="captcha"></param>
        </member>
        <member name="M:Colosoft.Security.CaptchaSupport.Captcha.GetRandomText">
            <summary>
            Recupera um texto aleatório.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.CaptchaSupport.Captcha.IsCorrect(System.Guid,System.String)">
            <summary>
            Determina se os dados informados validam o captcha.
            </summary>
            <param name="uid">Identificador unico do captcha.</param>
            <param name="userInput">Texto de entrada do usuário.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.CaptchaSupport.Captcha.Generate(Colosoft.Security.CaptchaSupport.CaptchaSettings)">
            <summary>
            Gera um catpcha.
            </summary>
            <param name="settings">Configurações para a geração do captcha</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.CaptchaSupport.Captcha.Generate(System.String,Colosoft.Security.CaptchaSupport.CaptchaSettings)">
            <summary>
            Gera um captcha.
            </summary>
            <param name="settings">Configurações para a geração do captcha</param>
            <param name="randomText">Texto do captcha</param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Security.CaptchaSupport.Captcha.Current">
            <summary>
            Instancia do captcha que está sendo usada pelo sistema.
            </summary>
        </member>
        <member name="T:Colosoft.Security.CaptchaSupport.CaptchaSettings">
            <summary>
            Classe de configuração do captcha.
            </summary>
        </member>
        <member name="M:Colosoft.Security.CaptchaSupport.CaptchaSettings.#ctor(System.Int32,System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>
            Construtor com inicialização da configuração
            </summary>
            <param name="height">Altura</param>
            <param name="width">Largura</param>
            <param name="font">Fonte</param>
            <param name="numChars">Número de caracteres</param>
            <param name="isCaseSensitive">Se tratará caso</param>
        </member>
        <member name="P:Colosoft.Security.CaptchaSupport.CaptchaSettings.Height">
            <summary>
            Altura da imagem que será gerada.
            </summary>
        </member>
        <member name="P:Colosoft.Security.CaptchaSupport.CaptchaSettings.Width">
            <summary>
            Largura da imagem que será gerada.
            </summary>
            <value>The allowed chars.</value>
        </member>
        <member name="P:Colosoft.Security.CaptchaSupport.CaptchaSettings.Font">
            <summary>
            Nome da fonte que será utilizada.
            </summary>
        </member>
        <member name="P:Colosoft.Security.CaptchaSupport.CaptchaSettings.NumChars">
            <summary>
            Quatidade de letras que será feitas
            </summary>
        </member>
        <member name="P:Colosoft.Security.CaptchaSupport.CaptchaSettings.IsCaseSensitive">
            <summary>
            Determina se a validação do captcha é CaseSensitive.
            </summary>
        </member>
        <member name="T:Colosoft.Security.CaptchaSupport.ICaptcha">
            <summary>
            Assituras das classes que gerenciam o captcha.
            </summary>
            
        </member>
        <member name="T:Colosoft.Security.CaptchaSupport.ICaptchaGenerator">
            <summary>
            Assinatura para as classes responsáveis por gerar o Captcha.
            </summary>
        </member>
        <member name="M:Colosoft.Security.CaptchaSupport.ICaptchaGenerator.Generate(System.String,Colosoft.Security.CaptchaSupport.CaptchaSettings)">
             <summary>
             Gera um captcha para o texto aleatório informado.
             </summary>
             <param name="randomText">Texto aleatório.</param>
            <param name="settings">Configurações</param>
             <returns></returns>
        </member>
        <member name="M:Colosoft.Security.CaptchaSupport.ICaptcha.IsCorrect(System.Guid,System.String)">
            <summary>
            Determina se o atual captcha é correto.
            </summary>
            <param name="uid">Identificador do captcha no sistema.</param>
            <param name="userInput">Dados da entrada do usuário.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.CaptchaSupport.ICaptcha.Generate(Colosoft.Security.CaptchaSupport.CaptchaSettings)">
             <summary>
             Gera uma imagem do captcha.
             </summary>
            <param name="settings">Configurações</param>
             <returns></returns>
        </member>
        <member name="M:Colosoft.Security.CaptchaSupport.ICaptcha.GetRandomText">
            <summary>
            Recupera um texto aleatório.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Security.CaptchaSupport.CaptchaInfo">
            <summary>
            Armazena as informações do captcha gerado.
            </summary>
        </member>
        <member name="P:Colosoft.Security.CaptchaSupport.CaptchaInfo.Uid">
            <summary>
            Identificador do captcha no sistema.
            </summary>
        </member>
        <member name="P:Colosoft.Security.CaptchaSupport.CaptchaInfo.Image">
            <summary>
            Vetor que representa a imagem do captcha.
            </summary>
        </member>
        <member name="T:Colosoft.Security.CaptchaSupport.IRandomTextGenerator">
            <summary>
            Assinatura das classes responsáveis por gerar textos aleatórios.
            </summary>
        </member>
        <member name="M:Colosoft.Security.CaptchaSupport.IRandomTextGenerator.Generate">
            <summary>
            Gera um novo texto aleatório.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Security.CaptchaSupport.IRandomTextGenerator.Settings">
            <summary>
            Configuração do gerador.
            </summary>
        </member>
        <member name="T:Colosoft.Security.CaptchaSupport.RandomTextGenerator">
            <summary>
            Classe responsável por gerar textos aleatórios.
            </summary>
        </member>
        <member name="M:Colosoft.Security.CaptchaSupport.RandomTextGenerator.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Security.CaptchaSupport.RandomTextGenerator.Generate">
            <summary>
            Gera o texto aleatório.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Security.CaptchaSupport.RandomTextGenerator.Settings">
            <summary>
            Configuração do gerador.
            </summary>
        </member>
        <member name="T:Colosoft.Security.CaptchaSupport.RandomTextGeneratorSettings">
            <summary>
            Representa as configuração do gerador de textos aleatórios.
            </summary>
        </member>
        <member name="P:Colosoft.Security.CaptchaSupport.RandomTextGeneratorSettings.Length">
            <summary>
            Tamanho do texto que será gerado.
            </summary>
        </member>
        <member name="P:Colosoft.Security.CaptchaSupport.RandomTextGeneratorSettings.AllowedChars">
            <summary>
            Letras permitidas.
            </summary>
            <value>The allowed chars.</value>
        </member>
        <member name="T:Colosoft.Security.ChangePasswordResult">
            <summary>
            Resultado da troca de senha
            </summary>
        </member>
        <member name="P:Colosoft.Security.ChangePasswordResult.Status">
            <summary>
            Indica se a troca foi realizada
            </summary>
        </member>
        <member name="P:Colosoft.Security.ChangePasswordResult.Message">
            <summary>
            Mensagem retornada pela auteração de senha
            </summary>
        </member>
        <member name="P:Colosoft.Security.ChangePasswordResult.Captcha">
            <summary>
            Indica que a próxima tentativa de login deverá conter o captcha
            </summary>
        </member>
        <member name="T:Colosoft.Security.ChangePasswordStatus">
            <summary>
            Status da tentativa de alteração de senha
            </summary>
        </member>
        <member name="F:Colosoft.Security.ChangePasswordStatus.Success">
            <summary>
            Alteração bem sucedida
            </summary>
        </member>
        <member name="F:Colosoft.Security.ChangePasswordStatus.Error">
            <summary>
            Erro durante a alteração
            </summary>
        </member>
        <member name="F:Colosoft.Security.ChangePasswordStatus.CaptchaRequired">
            <summary>
            Captcha requerido
            </summary>
        </member>
        <member name="F:Colosoft.Security.ChangePasswordStatus.InvalidCaptcha">
            <summary>
            Identifica que o captcha informado é inválido.
            </summary>
        </member>
        <member name="T:Colosoft.Security.CreateUserResult">
            <summary>
            Resultado da criação de usuário no provedor de identidade
            </summary>
        </member>
        <member name="P:Colosoft.Security.CreateUserResult.Success">
            <summary>
            Indica se obteve ou não êxito na criação do usuário
            </summary>
        </member>
        <member name="P:Colosoft.Security.CreateUserResult.Message">
            <summary>
            Mensagem de retorno
            </summary>
        </member>
        <member name="T:Colosoft.Security.IAuthenticate">
            <summary>
            Interface que contém métodos de autenticação
            </summary>
        </member>
        <member name="M:Colosoft.Security.IAuthenticate.RequestPasswordReset(System.String)">
            <summary>
            Inicia o processo de redefinição de senha
            </summary>
            <param name="userName">Nome do usuário</param>
            <returns>Resultado do processo</returns>
        </member>
        <member name="M:Colosoft.Security.IAuthenticate.CreateNewUser(Colosoft.Security.IUser,System.String,Colosoft.Security.SecurityParameter[])">
            <summary>
            Cria um novo usuário no provedor de identificação
            </summary>
            <param name="user">usuário</param>
            <param name="password">hash da Senha</param>
            <param name="parameters">Parâmetros adicionais do provider</param>
            <returns>Sucesso de criação</returns>
        </member>
        <member name="M:Colosoft.Security.IAuthenticate.ValidateUser(System.String,System.String,Colosoft.Security.SecurityParameter[])">
            <summary>
            Valida credenciais
            </summary>
            <param name="userName">Nome de usuário</param>
            <param name="password">Senha</param>
            <param name="parameters">Demais parâmetros</param>
            <returns>Resultado da autenticação</returns>
        </member>
        <member name="M:Colosoft.Security.IAuthenticate.ValidateToken(System.String)">
            <summary>
            Valida os dados do token.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IAuthenticate.ChangePassword(System.String,System.String,System.String,Colosoft.Security.SecurityParameter[])">
            <summary>
            Altera a senha
            </summary>
            <param name="userName">Nome de usuário</param>
            <param name="oldPassword">Senha atual</param>
            <param name="newPassword">Nova senha</param>
            <param name="parameters">Parametros adicionais de autenticação</param>
            <returns>Resultado da troca de senha</returns>
        </member>
        <member name="P:Colosoft.Security.IAuthenticate.CanCreateUser">
            <summary>
            Informa se o provedor de identificação permite ou não a criação de usuário
            </summary>
        </member>
        <member name="P:Colosoft.Security.IAuthenticate.CanResetPassword">
            <summary>
            Informa se a senha pode ser dedefinida
            </summary>
        </member>
        <member name="T:Colosoft.Security.IAuthenticationSource">
            <summary>
            Representa um origem do sistema.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IAuthenticationSource.Uid">
            <summary>
            Identificador único da origem de autenticação.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IAuthenticationSource.FullName">
            <summary>
            Nome da origem.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IAuthenticationSource.IsActive">
            <summary>
            Identifica se a origem está ativa.
            </summary>
        </member>
        <member name="T:Colosoft.Security.AuthenticationSource">
            <summary>
            Implementação Fake do IAutheticationSource.
            </summary>
        </member>
        <member name="M:Colosoft.Security.AuthenticationSource.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Security.AuthenticationSource.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor usado para deserializar os dados.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Security.AuthenticationSource.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Recupera os dados serializados.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Colosoft.Security.AuthenticationSource.Uid">
            <summary>
            Identificador único da origem.
            </summary>
        </member>
        <member name="P:Colosoft.Security.AuthenticationSource.FullName">
            <summary>
            Nome da origem.
            </summary>
        </member>
        <member name="P:Colosoft.Security.AuthenticationSource.IsActive">
            <summary>
            Identifica se a origem está ativa.
            </summary>
        </member>
        <member name="T:Colosoft.Security.IdentityModel.DefaultUserNameValidator">
            <summary>
            Validador de usuário usado pelos serviços.
            </summary>
        </member>
        <member name="M:Colosoft.Security.IdentityModel.DefaultUserNameValidator.Validate(System.String,System.String)">
            <summary>
            Valida os dados do usuário.
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
        </member>
        <member name="T:Colosoft.Security.ILoadPingMessages">
            <summary>
            Contrato para carga de mensagens.
            </summary>
        </member>
        <member name="M:Colosoft.Security.ILoadPingMessages.GetMessages(System.Int32,System.Int32)">
            <summary>
            Carrega as mensagens do usuário.
            </summary>
            <param name="userId">Identificador do usuário.</param>
            <param name="tokenId">Identificador do token.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.ILoadPingMessages.MarkAsRead(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Marca os despachos como lidos.
            </summary>
            <param name="dispatcherIds">Enumerador com os ids dos despachos.</param>
        </member>
        <member name="T:Colosoft.Security.IPasswordValidate">
            <summary>
            Valida se uma senha é ou não válida para o sistema
            </summary>
        </member>
        <member name="M:Colosoft.Security.IPasswordValidate.IsValid(System.String)">
            <summary>
            Verifica se a senha está ou não nos padrões do sistema
            </summary>
            <param name="password">Senha</param>
            <returns>Resultado da validação</returns>
        </member>
        <member name="T:Colosoft.Security.IPingMessage">
            <summary>
            Contrato para informações dispachadas pelo ping.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IPingMessage.DispatcherId">
            <summary>
            Identificador do despacho.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IPingMessage.SenderName">
            <summary>
            Remetente.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IPingMessage.Title">
            <summary>
            Título.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IPingMessage.Body">
            <summary>
            Corpo.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IPingMessage.Link">
            <summary>
            Link.
            </summary>
        </member>
        <member name="T:Colosoft.Security.IRoleProvider">
            <summary>
            Provedor dos papéis do sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.CreateRole(System.String)">
            <summary>
            Cria um novo papel no sistema.
            </summary>
            <param name="roleName"></param>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.DeleteRole(System.String)">
            <summary>
            Apaga o papel do sistema.
            </summary>
            <param name="roleName">Nome do papel que será removido.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.GetRolesForUser(System.String)">
            <summary>
            Recupera os papéis para o usuário informado.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.GetExclusiveRolesForUser(System.String)">
            <summary>
            Recupera os papéis execlusivos do usuário, ou seja, independente de grupos.
            </summary>
            <param name="username">Nome do usuário.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.GetUsersInRole(System.String)">
            <summary>
            Recupera os usuário que estão associados com a regra informada.
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.IsUserInRole(System.String,System.String)">
            <summary>
            Verifica se o usuário informado está inserido no papel informada.
            </summary>
            <param name="username"></param>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.RoleExists(System.String)">
            <summary>
            Verifica se o papel existe.
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.AddUsersToRoles(System.String[],System.String[])">
            <summary>
            Adiciona os papéis para os usuário informados.
            </summary>
            <param name="usernames"></param>
            <param name="roleNames"></param>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.FindUsersInRole(System.String,System.String)">
            <summary>
            Pesquisa os usuário dentro do papél informado.
            </summary>
            <param name="roleName"></param>
            <param name="usernameToMatch"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])">
            <summary>
            Remove os usuários dos papéis.
            </summary>
            <param name="usernames"></param>
            <param name="roleNames"></param>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.GetAllRoles">
            <summary>
            Recupera todos os papéis do sistema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.CreateRoleGroup(System.String,System.String[])">
            <summary>
            Cria um grupo de papéis.
            </summary>
            <param name="roleGroupName">Nome do grupo.</param>
            <param name="roles">Papéis associados.</param>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.DeleteRoleGroup(System.String)">
            <summary>
            Apaga um grupo de papéis.
            </summary>
            <param name="roleGroupName"></param>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.ExistsRoleGroup(System.String)">
            <summary>
            Verifica se o grupo de papéis existe.
            </summary>
            <param name="roleGroupName"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.AddRolesToRoleGroup(System.String,System.String[])">
            <summary>
            Adiciona papéis para o grupo.
            </summary>
            <param name="roleGroupName">Nome do grupo.</param>
            <param name="roleNames">Nomes dos papéis que serão adicionados.</param>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.RemoveRolesFromRoleGroup(System.String[],System.String[])">
            <summary>
            Remove os papéis associados com os grupos de papéis.
            </summary>
            <param name="roleGroupName">Nomes dos grupos.</param>
            <param name="roleNames">Nomes dos papéis.</param>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.GetRolesForRoleGroup(System.String)">
            <summary>
            Recupera os papéis para o grupo de papéis.
            </summary>
            <param name="roleGroupName">Nome do grupom de papéis.</param>
            <returns>Nomes dos papéis.</returns>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.RoleGroupExists(System.String)">
            <summary>
            Verifica se o grupo de regras existe.
            </summary>
            <param name="roleGroupName">Nome do grupo.</param>
            <returns>True caso exista.</returns>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.GetAllRoleGroups">
            <summary>
            Recupera todos os grupos de papéis.
            </summary>
            <returns>Nomes dos grupos.</returns>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.AddUsersToRoleGroup(System.String[],System.String[])">
            <summary>
            Adiciona usuários para os grupos de papéis.
            </summary>
            <param name="usernames">Nomes dos usuários que serão associados.</param>
            <param name="roleGroupNames">Nomes dos grupos que serão associados.</param>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.RemoveUsersFromRoleGroup(System.String[],System.String[])">
            <summary>
            Remove os usuários associados com os grupos de papéis.
            </summary>
            <param name="usernames">Nomes dos usuários.</param>
            <param name="roleGroupNames">Nomes dos grupos.</param>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.FindUsersInRoleGroup(System.String,System.String)">
            <summary>
            Pesquisa os usuários qeu estão inseridos no grupo de papéis.
            </summary>
            <param name="roleGroupName">Nome do grupo.</param>
            <param name="usernameToMatch">Nome dos usuários que serão usados para comparação.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IRoleProvider.IsUserInRoleGroup(System.String,System.String)">
            <summary>
            Verifica se o usuário está no grupo de papéis.
            </summary>
            <param name="username">Nome do usuário.</param>
            <param name="roleGroupName">Nome do grupo de papéis.</param>
            <returns>True caso exista.</returns>
        </member>
        <member name="P:Colosoft.Security.IRoleProvider.Name">
            <summary>
            Nome do provedor.
            </summary>
        </member>
        <member name="T:Colosoft.Security.ITokenApplicationProvider">
            <summary>
            Assinatura da classe que gerencia o token por aplicação.
            </summary>
        </member>
        <member name="M:Colosoft.Security.ITokenApplicationProvider.Insert(System.String,System.Int32,System.String)">
            <summary>
            Insere o controle do token
            </summary>
            <param name="token">token</param>
            <param name="userId">identificador do usuário</param>
            <param name="applicationName">Nome da aplicação associada com o token.</param>
            <returns>verdadeiro se a inserção foi bem sucedida</returns>
        </member>
        <member name="M:Colosoft.Security.ITokenApplicationProvider.GetToken(System.Int32,System.String)">
            <summary>
            Verifica se já existe um token aberto para o usuário em questão
            </summary>
            <param name="userId">Identificador do usuário</param>
            <param name="applicationName">Nome da aplicação no qual o token deve estar associado.</param>
            <returns>token</returns>
        </member>
        <member name="M:Colosoft.Security.ITokenApplicationProvider.CloseUserTokens(System.Int32,System.String)">
            <summary>
            Fecha os tokens em aberto de um usuário.
            </summary>
            <param name="userId">Identificador do usuário</param>
            <param name="applicationName">Nome da aplicação.</param>
        </member>
        <member name="T:Colosoft.Security.ITokenGetter">
            <summary>
            Assinatura das classe que fornecem
            uma form de recupera o token da atual instancia da aplicação.
            </summary>
        </member>
        <member name="M:Colosoft.Security.ITokenGetter.Get">
            <summary>
            Recupera o token.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Security.DefaultTokenGetter">
            <summary>
            Implementação padrão do recuperador de token.
            </summary>
        </member>
        <member name="M:Colosoft.Security.DefaultTokenGetter.Get">
            <summary>
            Recupera o token
            </summary>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Security.ITokenProvider">
            <summary>
            Assinatura das classes que disponibilizam token.
            </summary>
        </member>
        <member name="M:Colosoft.Security.ITokenProvider.Create">
            <summary>
            Cria um token com o tamanho padrão e com os caracteres padrão
            </summary>
            <returns>Token</returns>
        </member>
        <member name="M:Colosoft.Security.ITokenProvider.Create(System.Char[])">
            <summary>
            Cria um token com o tamanho padrão os caracteres informados
            </summary>
            <param name="validChars">Vetor com os caracteres válidos</param>
            <returns>Token</returns>
        </member>
        <member name="M:Colosoft.Security.ITokenProvider.Create(System.Int32)">
            <summary>
            Cria um token do tamanho informado com os caracteres "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%¨*()"
            </summary>
            <param name="size">Tamanho do token</param>
            <returns>Token</returns>
        </member>
        <member name="M:Colosoft.Security.ITokenProvider.Create(System.Int32,System.Char[])">
            <summary>
            Cria um token do tamanho informado com os caracteres informados
            </summary>
            <param name="size">Tamanho do token</param>
            <param name="validChars">Vetor com os caracteres válidos</param>
            <returns>Token</returns>
        </member>
        <member name="M:Colosoft.Security.ITokenProvider.Insert(System.String,System.Int32)">
            <summary>
            Insere o controle do token
            </summary>
            <param name="token">token</param>
            <param name="userId">identificador do usuário</param>
            <returns>verdadeiro se a inserção foi bem sucedida</returns>
        </member>
        <member name="M:Colosoft.Security.ITokenProvider.Check(System.String)">
            <summary>
            Verifica se um token está ou não válido
            </summary>
            <param name="token">token</param>
            <returns>Objeto com o resultado da consulta</returns>
        </member>
        <member name="M:Colosoft.Security.ITokenProvider.SetProfile(System.String,System.Int32)">
            <summary>
            Define o perfil para o token.
            </summary>
            <param name="token">Token.</param>
            <param name="profileId">Identificador do perfil.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.ITokenProvider.Close(System.String)">
            <summary>
            Invalida o token
            </summary>
            <param name="token">token</param>
            <returns>verdadeiro se conseguiu invalidar</returns>
        </member>
        <member name="M:Colosoft.Security.ITokenProvider.GetToken(System.Int32)">
            <summary>
            Verifica se já existe um token aberto para o usuário em questão
            </summary>
            <param name="userId">Identificador do usuário</param>
            <returns>token</returns>
        </member>
        <member name="M:Colosoft.Security.ITokenProvider.Ping(System.String)">
            <summary>
            Executa uma verificação do token no servidor.
            </summary>
            <param name="token">Token</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.ITokenProvider.MarkMessageAsRead(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Marca as mensagens como lidas.
            </summary>
            <param name="dispatcherIds">Identificadores dos despachos.</param>
        </member>
        <member name="M:Colosoft.Security.ITokenProvider.CloseUserTokens(System.Int32)">
            <summary>
            Fecha os tokens em aberto de um usuário.
            </summary>
            <param name="userId">Identificador do usuário</param>
        </member>
        <member name="P:Colosoft.Security.ITokenProvider.Name">
            <summary>
            Nome do provedor.
            </summary>
        </member>
        <member name="T:Colosoft.Security.TokenInsertedEventArgs">
            <summary>
            Armazena os argumento de quando um token é inserido.
            </summary>
        </member>
        <member name="M:Colosoft.Security.TokenInsertedEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="token"></param>
            <param name="userId"></param>
        </member>
        <member name="P:Colosoft.Security.TokenInsertedEventArgs.Token">
            <summary>
            Token inserido.
            </summary>
        </member>
        <member name="P:Colosoft.Security.TokenInsertedEventArgs.UserId">
            <summary>
            Identificador do usuário associado ao token.
            </summary>
        </member>
        <member name="T:Colosoft.Security.TokenInsertedHandle">
            <summary>
            Assinatura do evento acionado quando o token é inserido.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Colosoft.Security.ITokenProviderExtension">
            <summary>
            Instancia do provedor de token
            </summary>
        </member>
        <member name="E:Colosoft.Security.ITokenProviderExtension.TokenInserted">
            <summary>
            Evento acionado quando o token é inserido.
            </summary>
        </member>
        <member name="T:Colosoft.Security.IUserContextConfigurator">
            <summary>
            Assinatura de um configurador do contexto do usuário.
            </summary>
        </member>
        <member name="M:Colosoft.Security.IUserContextConfigurator.GetPrincipal">
            <summary>
            Recupera ao principal para o contexto do usuário.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.IUserContextConfigurator.Configure(Colosoft.Security.UserContext)">
            <summary>
            Configura o contexto do usuário.
            </summary>
            <param name="userContext">Instancia do contexto que deve ser configurada.</param>
        </member>
        <member name="T:Colosoft.Security.PasswordFormat">
            <summary>
            Formato da senha.
            </summary>
        </member>
        <member name="F:Colosoft.Security.PasswordFormat.Clear">
            <summary>
            Password sem formatação.
            </summary>
        </member>
        <member name="F:Colosoft.Security.PasswordFormat.Hashed">
            <summary>
            Password em formato de hash.
            </summary>
        </member>
        <member name="F:Colosoft.Security.PasswordFormat.Encrypted">
            <summary>
            Password em formto criptografado.
            </summary>
        </member>
        <member name="T:Colosoft.Security.UserCreateStatus">
            <summary>
            Possiveis situações da criação de um novo usuário.
            </summary>
        </member>
        <member name="F:Colosoft.Security.UserCreateStatus.Success">
            <summary>
            Usuário criado com sucesso.
            </summary>
        </member>
        <member name="F:Colosoft.Security.UserCreateStatus.InvalidUserName">
            <summary>
            Nome do usuário é inválido.
            </summary>
        </member>
        <member name="F:Colosoft.Security.UserCreateStatus.InvalidPassword">
            <summary>
            Senha inválida.
            </summary>
        </member>
        <member name="F:Colosoft.Security.UserCreateStatus.InvalidQuestion">
            <summary>
            Pergunta inválida.
            </summary>
        </member>
        <member name="F:Colosoft.Security.UserCreateStatus.InvalidAnswer">
            <summary>
            Resposta inválida.
            </summary>
        </member>
        <member name="F:Colosoft.Security.UserCreateStatus.InvalidEmail">
            <summary>
            Email inválido.
            </summary>
        </member>
        <member name="F:Colosoft.Security.UserCreateStatus.DuplicateUserName">
            <summary>
            Nome de usuário duplicado.
            </summary>
        </member>
        <member name="F:Colosoft.Security.UserCreateStatus.DuplicateEmail">
            <summary>
            Email duplicado.
            </summary>
        </member>
        <member name="F:Colosoft.Security.UserCreateStatus.UserRejected">
            <summary>
            Usuário rejeitado.
            </summary>
        </member>
        <member name="F:Colosoft.Security.UserCreateStatus.InvalidProviderUserKey">
            <summary>
            Identifica que a chave do usuário é inválida no provedor.
            </summary>
        </member>
        <member name="F:Colosoft.Security.UserCreateStatus.DuplicateProviderUserKey">
            <summary>
            Identifica que a chave informada para o usuário já existe no provedor.
            </summary>
        </member>
        <member name="F:Colosoft.Security.UserCreateStatus.ProviderError">
            <summary>
            Identifica um erro do provedor.
            </summary>
        </member>
        <member name="T:Colosoft.Security.IValidateUserResult">
            <summary>
            Assinatura das classes responsáveis pelo resultado da validação do usuário.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IValidateUserResult.Status">
            <summary>
            Situação da autenticação.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IValidateUserResult.Message">
            <summary>
            Mensagem a ser apresentada
            </summary>
        </member>
        <member name="P:Colosoft.Security.IValidateUserResult.User">
            <summary>
            Usuário autenticado em caso de sucesso
            </summary>
        </member>
        <member name="P:Colosoft.Security.IValidateUserResult.Captcha">
            <summary>
            Indica que a próxima tentativa de login deverá conter o captcha
            </summary>
        </member>
        <member name="P:Colosoft.Security.IValidateUserResult.ExpireDate">
            <summary>
            Data em que o password irá expirar
            </summary>
        </member>
        <member name="P:Colosoft.Security.IValidateUserResult.Token">
            <summary>
            Token que identifica a autenticação
            </summary>
        </member>
        <member name="P:Colosoft.Security.IValidateUserResult.IsProcess">
            <summary>
            Indica que é um processo
            </summary>
        </member>
        <member name="T:Colosoft.Security.IValidateUserResultError">
            <summary>
            Assinatura do resultado da validação do usuário que possui detalhes do erro ocorrido.
            </summary>
        </member>
        <member name="P:Colosoft.Security.IValidateUserResultError.Error">
            <summary>
            Error associado.
            </summary>
        </member>
        <member name="T:Colosoft.Security.LogOutingEventArgs">
            <summary>
            Representa o argumento para o evento <see cref="T:Colosoft.Security.LogOutingEventHandle"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Security.LogOutingEventArgs.#ctor(System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="token"></param>
        </member>
        <member name="P:Colosoft.Security.LogOutingEventArgs.Token">
            <summary>
            Token que está sendo liberado.
            </summary>
        </member>
        <member name="P:Colosoft.Security.LogOutingEventArgs.Cancel">
            <summary>
            Identifica se a operação foi cancelada.
            </summary>
        </member>
        <member name="T:Colosoft.Security.LogOutedEventArgs">
            <summary>
            Representa o argumento para o evento <see cref="T:Colosoft.Security.LogOutedEventHandle"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Security.LogOutedEventArgs.#ctor(System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="token"></param>
        </member>
        <member name="P:Colosoft.Security.LogOutedEventArgs.Token">
            <summary>
            Token que está sendo liberado.
            </summary>
        </member>
        <member name="T:Colosoft.Security.LogOutingEventHandle">
            <summary>
            Representa os eventos acionados quando o usuário está deslogando do sistema.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Colosoft.Security.LogOutedEventHandle">
            <summary>
            Representa os eventos acionados quando o usuário for deslogado do sistema.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Colosoft.Security.Membership">
            <summary>
            Valida as credenciais do usuário e gerencia as configurações de usuário
            </summary>
        </member>
        <member name="M:Colosoft.Security.Membership.Initialize">
            <summary>
            Initializa os dados do membership.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Membership.GetUser(System.String)">
            <summary>
            Recupera a informação da fonte de dados e atualiza a última atividade para o logon atual usuário da associação.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Membership.GetUserByKey(System.String)">
            <summary>
            Recupera os dados do usuário pela sua chave.
            </summary>
            <param name="userKey">Chave associado com o usuário.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Membership.GetUserByToken(System.String)">
            <summary>
            Recupera os dados do usuário pelo token informado.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Membership.ValidateUser(System.String,System.String,Colosoft.Security.SecurityParameter[])">
            <summary>
            Verifica se o nome e senha do usuário são validos.
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="parameters">Parametros que poderão ser usados na autenticação.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Membership.ValidateToken(System.String)">
            <summary>
            Valida os dados do token.
            </summary>
            <param name="token">Token.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Membership.LogOut(System.String)">
            <summary>
            Desloga o usuário do sistema
            </summary>
            <param name="token">Token do usuário</param>
            <returns>Sucesso da operação</returns>
        </member>
        <member name="M:Colosoft.Security.Membership.ChangePassword(System.String,System.String,System.String,Colosoft.Security.SecurityParameter[])">
            <summary>
            Método usado para alterar a senha do usuário.
            </summary>
            <param name="username">Nome do usuário.</param>
            <param name="oldPassword">Antiga senha.</param>
            <param name="newPassword">Nova senha.</param>
            <param name="parameters">Parametros da autenticação.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Membership.RequestPasswordReset(System.String)">
            <summary>
            Inicia o processo de redefinição de senha
            </summary>
            <param name="userName">Nome do usuário</param>
            <returns>Resultado do processo</returns>
        </member>
        <member name="E:Colosoft.Security.Membership.LogOuting">
            <summary>
            Evento acionado quando o usuário está se delogando do sistema.
            </summary>
        </member>
        <member name="E:Colosoft.Security.Membership.LogOuted">
            <summary>
            Evento acionado quando o usuário deslogar do sistema.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Membership.Providers">
            <summary>
            Armazena a lista dos provedores carregados.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Membership.DefaultProviderName">
            <summary>
            Nome do provedor padrão do sistema.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Membership.Provider">
            <summary>
            Provedor dos usuários.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Membership.CurrentUserName">
            <summary>
            Nome do usuário autenticado no sistema.
            </summary>
        </member>
        <member name="T:Colosoft.Security.PasswordHash">
            <summary>
            Salted password hashing with PBKDF2-SHA1.
            Author: havoc AT defuse.ca
            www: http://crackstation.net/hashing-security.htm
            Compatibility: .NET 3.0 and later.
            </summary>
        </member>
        <member name="M:Colosoft.Security.PasswordHash.CreateHash(System.String)">
            <summary>
            Creates a salted PBKDF2 hash of the password.
            </summary>
            <param name="password">The password to hash.</param>
            <returns>The hash of the password.</returns>
        </member>
        <member name="M:Colosoft.Security.PasswordHash.ValidatePassword(System.String,System.String)">
            <summary>
            Validates a password given a hash of the correct one.
            </summary>
            <param name="password">The password to check.</param>
            <param name="correctHash">A hash of the correct password.</param>
            <returns>True if the password is correct. False otherwise.</returns>
        </member>
        <member name="M:Colosoft.Security.PasswordHash.SlowEquals(System.Byte[],System.Byte[])">
            <summary>
            Compares two byte arrays in length-constant time. This comparison
            method is used so that password hashes cannot be extracted from
            on-line systems using a timing attack and then attacked off-line.
            </summary>
            <param name="a">The first byte array.</param>
            <param name="b">The second byte array.</param>
            <returns>True if both byte arrays are equal. False otherwise.</returns>
        </member>
        <member name="M:Colosoft.Security.PasswordHash.PBKDF2(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes the PBKDF2-SHA1 hash of a password.
            </summary>
            <param name="password">The password to hash.</param>
            <param name="salt">The salt.</param>
            <param name="iterations">The PBKDF2 iteration count.</param>
            <param name="outputBytes">The length of the hash to generate, in bytes.</param>
            <returns>A hash of the password.</returns>
        </member>
        <member name="T:Colosoft.Security.PasswordStrength">
            <summary>
            Enumerador com a força de segurança da senha
            </summary>
        </member>
        <member name="F:Colosoft.Security.PasswordStrength.None">
            <summary>
            Indefinido
            </summary>
        </member>
        <member name="F:Colosoft.Security.PasswordStrength.Strong">
            <summary>
            Senha segura
            </summary>
        </member>
        <member name="F:Colosoft.Security.PasswordStrength.Medium">
            <summary>
            Senha média
            </summary>
        </member>
        <member name="F:Colosoft.Security.PasswordStrength.Weak">
            <summary>
            Senha fraca
            </summary>
        </member>
        <member name="T:Colosoft.Security.PasswordValidateResult">
            <summary>
            Resultado da validação de senha, checa se a senha possui os requisitos mínimos de segurança
            </summary>
        </member>
        <member name="M:Colosoft.Security.PasswordValidateResult.#ctor(System.Boolean,System.String,Colosoft.Security.PasswordStrength)">
            <summary>
            Construtor da classe
            </summary>
            <param name="isOk">Indica se a senha está ou não no padrão</param>
            <param name="message">Mensagem a ser apresentada para o usuário ao criar/altera senha</param>
            <param name="strength">Indica a força de segurança da senha</param>
        </member>
        <member name="P:Colosoft.Security.PasswordValidateResult.IsOk">
            <summary>
            Indica se a senha está ou não no padrão
            </summary>
        </member>
        <member name="P:Colosoft.Security.PasswordValidateResult.Message">
            <summary>
            Mensagem a ser apresentada para o usuário ao criar/altera senha
            </summary>
        </member>
        <member name="P:Colosoft.Security.PasswordValidateResult.Strength">
            <summary>
            Indica a força de segurança da senha
            </summary>
        </member>
        <member name="T:Colosoft.Security.Permissions.CheckPermissionResult">
            <summary>
            Armazena os dados do resultado de uma verificação de permissão.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Permissions.CheckPermissionResult.#ctor(System.Boolean,Colosoft.IMessageFormattable,Colosoft.IMessageFormattable)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="success"></param>
            <param name="message"></param>
            <param name="title"></param>
        </member>
        <member name="M:Colosoft.Security.Permissions.CheckPermissionResult.op_Implicit(Colosoft.Security.Permissions.CheckPermissionResult)~System.Boolean">
            <summary>
            Converte implicitamente para um Boolean.
            </summary>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Colosoft.Security.Permissions.CheckPermissionResult.Success">
            <summary>
            Identifi
            </summary>
        </member>
        <member name="P:Colosoft.Security.Permissions.CheckPermissionResult.Message">
            <summary>
            Mensagem associada.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Permissions.CheckPermissionResult.Title">
            <summary>
            Titulo da mensagem.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Permissions.SystemAccess">
            <summary>
            Classe que gerencia o acesso ao sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemAccess.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemAccess.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="pathDiscovery">Caminho descoberto.</param>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemAccess.#ctor(Colosoft.Security.Permissions.SystemAccess)">
            <summary>
            Cria um nova instancia com base em dados da outro acesso.
            </summary>
            <param name="operand"></param>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemAccess.#ctor(System.String)">
            <summary>
            Cria um novo acesso paara o sistema definindo a expressão para validar.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemAccess.GetRoot(System.String)">
            <summary>
            Recupera a raiz do caminho.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemAccess.AddExpressions(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Adiciona expressões para o acesso.
            </summary>
            <param name="values">Expressões que serão adicionadas.</param>
            <param name="checkForDuplicates">True para ver</param>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemAccess.IsEmpty">
            <summary>
            Vericica se o acesso é vazio.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemAccess.Copy">
            <summary>
            Cria um cópia da instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemAccess.Intersect(Colosoft.Security.Permissions.SystemAccess)">
            <summary>
            Faz uma intercessão dos acessos.
            </summary>
            <param name="operand"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemAccess.Union(Colosoft.Security.Permissions.SystemAccess)">
            <summary>
            Realiza a união com o acesso informado.
            </summary>
            <param name="operand"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemAccess.IsSubsetOf(Colosoft.Security.Permissions.SystemAccess)">
            <summary>
            Verifica se o acesso informado é um subconjunto da instancia.
            </summary>
            <param name="operand"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemAccess.Equals(System.Object)">
            <summary>
            Compara um objeto com a instancia.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemAccess.ToStringArray">
            <summary>
            Itens do acesso.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Security.Permissions.SystemAccess.AllItems">
            <summary>
            Identifica se engloba todos os itens.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Permissions.SystemAccess.PathDiscovery">
            <summary>
            Caminho do acesso.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Permissions.SystemPermissionAccess">
            <summary>
            Tipos de permissões de acesso do sistema.
            </summary>
        </member>
        <member name="F:Colosoft.Security.Permissions.SystemPermissionAccess.AllAccess">
            <summary>
            Identifica permissão para acesso total.
            </summary>
        </member>
        <member name="F:Colosoft.Security.Permissions.SystemPermissionAccess.NoAccess">
            <summary>
            Negação de acesso.
            </summary>
        </member>
        <member name="F:Colosoft.Security.Permissions.SystemPermissionAccess.Read">
            <summary>
            Permissão para leitura.
            </summary>
        </member>
        <member name="F:Colosoft.Security.Permissions.SystemPermissionAccess.Write">
            <summary>
            Permissão para escrita.
            </summary>
        </member>
        <member name="F:Colosoft.Security.Permissions.SystemPermissionAccess.Execute">
            <summary>
            Permissão para execução.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Permissions.SystemPermission">
            <summary>
            Representa permissões do sistema.
            </summary>
        </member>
        <member name="F:Colosoft.Security.Permissions.SystemPermission._illegalCharacters">
            <summary>
            Armazena os caracteres inválidos.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.#cctor">
            <summary>
            Construtor geral.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.#ctor(System.Security.Permissions.PermissionState)">
            <summary>
            Cria uma permissão informado o estado de permissão.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.#ctor(Colosoft.Security.Permissions.SystemPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)">
            <summary>
            
            </summary>
            <param name="access">Tipo de acesso.</param>
            <param name="control">Ações de controle de acesso.</param>
            <param name="path">Caminho do sistema onde a permissão será aplicada.</param>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.#ctor(Colosoft.Security.Permissions.SystemPermissionAccess,System.String)">
            <summary>
            Cria a permissão com o caminho informado.
            </summary>
            <param name="access">Tipo de acesso.</param>
            <param name="path">Caminho do sistema onde a permissão será aplicada.</param>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.ThrowSecurityException(System.String,System.Object[])">
            <summary>
            Dispara a exception de segurança.
            </summary>
            <param name="message">Mensagem de exception.</param>
            <param name="parameters"></param>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.HasIllegalCharacters(System.String[])">
            <summary>
            Verifica se os texto informados possui caracteres inválidos.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.AddPathList(Colosoft.Security.Permissions.SystemPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adiciona uma lista de caminhos e acesso para a permissão.
            </summary>
            <param name="access"></param>
            <param name="control"></param>
            <param name="pathListOrig"></param>
            <param name="checkForDuplicates"></param>
            <param name="needFullPath"></param>
            <param name="copyPathList"></param>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.AddPathList(Colosoft.Security.Permissions.SystemPermissionAccess,System.String[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adiciona uma lista de caminhos e acesso para a permissão.
            </summary>
            <param name="access"></param>
            <param name="pathListOrig"></param>
            <param name="checkForDuplicates"></param>
            <param name="needFullPath"></param>
            <param name="copyPathList"></param>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.AccessIsSet(Colosoft.Security.Permissions.SystemPermissionAccess,Colosoft.Security.Permissions.SystemPermissionAccess)">
            <summary>
            Verifica a permissão de acesso.
            </summary>
            <param name="access"></param>
            <param name="question"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.VerifyAccess(Colosoft.Security.Permissions.SystemPermissionAccess)">
            <summary>
            Verifica a permissão de acesso.
            </summary>
            <param name="access"></param>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.ExclusiveAccess(Colosoft.Security.Permissions.SystemPermissionAccess)">
            <summary>
            Verifica um acesso exclusivo.
            </summary>
            <param name="access"></param>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.IsEmpty">
            <summary>
            Verifica se a instancia é vazia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.CreatePermissionElement(System.Security.IPermission,System.String)">
            <summary>
            Cria um elemento de permissão.
            </summary>
            <param name="perm"></param>
            <param name="permname"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.ValidateElement(System.Security.SecurityElement,System.Security.IPermission)">
            <summary>
            Valida o elemento de permissão.
            </summary>
            <param name="elem"></param>
            <param name="perm"></param>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.Demand">
            <summary>
            Verifica a permissão.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.IsAllowed">
            <summary>
            Verifica se a permissão informada é permitida no conjunto.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.AddPathList(Colosoft.Security.Permissions.SystemPermissionAccess,System.String[])">
            <summary>
            Adiciona uma lista de caminhos e o acesso para a permissão.
            </summary>
            <param name="access"></param>
            <param name="pathList"></param>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.AddPathList(Colosoft.Security.Permissions.SystemPermissionAccess,System.String)">
            <summary>
            Adiciona um caminho e o acesso para a permissão.
            </summary>
            <param name="access"></param>
            <param name="path"></param>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.Equals(System.Object)">
            <summary>
            Compara um objeto com a instancia.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.GetHashCode">
            <summary>
            Hash code da instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.Union(System.Security.IPermission)">
            <summary>
            Une a instancia com a permissão informada.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.Intersect(System.Security.IPermission)">
            <summary>
            Recupera a intercessão da instancia com a permissão informada.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.IsSubsetOf(System.Security.IPermission)">
            <summary>
            Verifica se a permissão informada é um subconjunto da instancia.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.IsUnrestricted">
            <summary>
            Verifica se a instancia está sem restrição.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.Copy">
            <summary>
            Cria uma cópia da permissão.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.GetPathList(Colosoft.Security.Permissions.SystemPermissionAccess)">
            <summary>
            Recupera a lista de caminhos com o acesso informado.
            </summary>
            <param name="access"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.FromXml(System.Security.SecurityElement)">
            <summary>
            Recupera os dados da permissão do elemento de segurança informado.
            </summary>
            <param name="esd"></param>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermission.ToXml">
            <summary>
            Recupera o elemento XML de segurança da instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Security.Permissions.SystemPermission.AllItems">
            <summary>
            Recupera e define acesso a todos os itens.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Permissions.SystemPermissionAttribute">
            <summary>
            Atributo usado para definir permissão para execução de operações.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Colosoft.Security.Permissions.SystemPermissionAttribute.CreatePermission">
            <summary>
            Cria um nova permissão com os dados da instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Security.Permissions.SystemPermissionAttribute.Access">
            <summary>
            Tipo de acesso.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Permissions.SystemPermissionAttribute.AccessAction">
            <summary>
            Ação de acesso.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Permissions.SystemPermissionAttribute.Path">
            <summary>
            Caminho da permissão.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Permissions.SystemPermissionAttribute.Permission">
            <summary>
            Permissão.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Policy.AuthorizationPolicy">
            <summary>
            Politica de autorização do serviço.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Policy.AuthorizationPolicy.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Policy.AuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)">
            <summary>
            Executa a politica.
            </summary>
            <param name="evaluationContext"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Security.Policy.AuthorizationPolicy.Issuer">
            <summary>
            Emissor da autorização.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Policy.AuthorizationPolicy.Id">
            <summary>
            Identificador da política.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Principal.DefaultIdentity">
            <summary>
            Implementação padrão do <see cref="T:System.Security.Principal.IIdentity"/> usado pelo sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Principal.DefaultIdentity.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="name">Nome do usuário cujo código está rodando.</param>
            <param name="token">Token do usuário.</param>
            <param name="isAuthenticated">Usuário autenticado.</param>
            <param name="type">Tipo da autenticação.</param>
        </member>
        <member name="M:Colosoft.Security.Principal.DefaultIdentity.SetValues(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Redefine os dados.
            </summary>
            <param name="name">Nome do usuário cujo código está rodando.</param>
            <param name="token">Token do usuário.</param>
            <param name="isAuthenticated">Usuário autenticado.</param>
            <param name="type">Tipo da autenticação.</param>
        </member>
        <member name="P:Colosoft.Security.Principal.DefaultIdentity.Token">
            <summary>
            Token associado.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Principal.DefaultIdentity.Name">
            <summary>
            Nome do usuário da identidade.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Principal.DefaultIdentity.AuthenticationType">
            <summary>
            Tipo de autenticação da identidade;
            </summary>
        </member>
        <member name="P:Colosoft.Security.Principal.DefaultIdentity.IsAuthenticated">
            <summary>
            Identifica o usuário da identidade está autenticado.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Principal.DefaultIdentity.Parameters">
            <summary>
            Parametros.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Principal.DefaultPrincipal">
            <summary>
            Implementação padrão do IPrincipal.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Principal.DefaultPrincipal.#ctor(System.Func{System.Security.Principal.IIdentity})">
            <summary>
            Cria a instancia informado o ponteiro do método para recupera a identidade.
            </summary>
            <param name="identityGetter"></param>
        </member>
        <member name="M:Colosoft.Security.Principal.DefaultPrincipal.#ctor(System.Security.Principal.IIdentity)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:Colosoft.Security.Principal.DefaultPrincipal.IsInRole(System.String)">
            <summary>
            Verifica se está contido no papel.
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Principal.DefaultPrincipal.EnsureRoles">
            <summary>
            Armazena os papéis no cache para requisições sobsequentes.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Principal.DefaultPrincipal.Current">
            <summary>
            Método para facilitar o acesso.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Principal.DefaultPrincipal.Identity">
            <summary>
            Instancia do Identity do principal.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Principal.DefaultPrincipal.Roles">
            <summary>
            Recupera todos os papéis associados com a instancia.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Profile.IProfile">
            <summary>
            Assinatura de um perfil do sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Profile.IProfile.GetPropertyValue(System.String)">
            <summary>
            Recupera o valor da propriedade.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Profile.IProfile.SetPropertyValue(System.String,System.Object)">
            <summary>
            Define o valor da propriedade.
            </summary>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="P:Colosoft.Security.Profile.IProfile.ProfileId">
            <summary>
            Identificador do perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.IProfile.FullName">
            <summary>
            Nome do perfil
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.IProfile.IsAnonymous">
            <summary>
            Identifica se o perfil é para um usuário anonimo.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.IProfile.LastActivityDate">
            <summary>
            Recupera a data da ultima atividade realizada sobre o perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.IProfile.LastUpdatedDate">
            <summary>
            Recupera a data da ultima alteração realizada sobre o perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.IProfile.UserName">
            <summary>
            Nome do usuário associado com o perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.IProfile.SearchMode">
            <summary>
            Modo de pesquisa associado com o perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.IProfile.Source">
            <summary>
            Origem da autenticação.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.IProfile.RoleSet">
            <summary>
            Conjunto dos papéis e permissões do perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.IProfile.Item(System.String)">
            <summary>
            Recupera e define o valor de uma propriedade do perfil.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Security.Profile.IProfile.Properties">
            <summary>
            Propriedades do perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.IProfile.MarkGroupId">
            <summary>
            Grupo de marcadores associado ao perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.IProfile.SellerTreeId">
            <summary>
            Identificador da árvore de vendedores associada com o perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.IProfile.IntermediateId">
            <summary>
            Identificador do intermediador associado com o perfil.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Profile.ICurrentProfileInfoProvider">
            <summary>
            Assinatura do proverdor das informações do perfil do usuário.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Profile.ICurrentProfileInfoProvider.GetProfileInfo">
            <summary>
            Recupera as informações do perfil.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Colosoft.Security.Profile.ICurrentProfileInfoProvider.ProfileInfoChanged">
            <summary>
            Evento acionado quando as informações do perfil forem alteradas.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Profile.IProfileProvider">
            <summary>
            Assinatura dos métodos do provedor do perfil.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Profile.IProfileProvider.DeleteProfiles(System.String[])">
            <summary>
            Apaga os perfis dos usuários informados.
            </summary>
            <param name="usernames">Nomes dos usuários que terão seus perfis apagados.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Profile.IProfileProvider.DeleteProfiles(Colosoft.Security.Profile.ProfileInfo[])">
            <summary>
            Apaga os perfis informados.
            </summary>
            <param name="profiles">Informações dos perfis que serão apagados.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Profile.IProfileProvider.FindProfilesByUserName(System.String)">
            <summary>
            Pesquisa os perfis associados com o nome do usuário informado.
            </summary>
            <param name="usernameToMatch"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Profile.IProfileProvider.GetUserProfiles(System.String)">
            <summary>
            Recupera os perfis associados com o usuário informado.
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Profile.IProfileProvider.GetProfile(Colosoft.Security.Profile.ProfileInfo)">
            <summary>
            Recupera os dados do perfil.
            </summary>
            <param name="info">Informações usadas para recuperar o perfil.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Profile.IProfileProvider.GetSource(System.Int32)">
            <summary>
            Recupera a origem do perfil
            </summary>
            <param name="sourceId">identificador da origem</param>
            <returns>Origem</returns>
        </member>
        <member name="M:Colosoft.Security.Profile.IProfileProvider.GetProfilePropertyDefinitions">
            <summary>
            Recupera as definições de propriedades do perfil.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Profile.IProfileProvider.SaveProfileProperties(Colosoft.Security.Profile.IProfile)">
            <summary>
            Salva as propriedades do perfil informado.
            </summary>
            <param name="profile">Instancia do perfil.</param>
        </member>
        <member name="P:Colosoft.Security.Profile.IProfileProvider.Name">
            <summary>
            Nome do provedor.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Profile.ProfileContext">
            <summary>
            Armazena os dados do contexto do perfil de um usuário do sistema.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileContext.Profile">
            <summary>
            Instancia do perfil associado.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileContext.ProfileInfo">
            <summary>
            Informações do perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileContext.CurrentProfileData">
            <summary>
            Dados do perfil.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Profile.ProfileGroup">
            <summary>
            Grupo de propriedades
            </summary>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileGroup.Init(Colosoft.Security.Profile.IProfile,System.String)">
            <summary>
            Inicializa a instancia.
            </summary>
            <param name="parent">Perfil pai do grupo.</param>
            <param name="name"></param>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileGroup.SetPropertyValue(System.String,System.Object)">
            <summary>
            Define o valor da propriedade do grupo.
            </summary>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileGroup.GetPropertyValue(System.String,System.Object)">
            <summary>
            Recupera o valor da propriedade.
            </summary>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileGroup.Item(System.String)">
            <summary>
            Recupera e define o valor da propriedade.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Security.Profile.ProfileInfo">
            <summary>
            Armazena as informações do perfil.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileInfo.#ctor">
            <summary>
            Construtor usado na serialização.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileInfo.#ctor(System.Int32,System.String,System.String,System.Boolean,Colosoft.Security.Profile.ProfileSearchMode,Colosoft.Security.IAuthenticationSource,System.DateTimeOffset,System.DateTimeOffset,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Construtor padrão.
            </summary>
            <param name="profileId"></param>
            <param name="username"></param>
            <param name="fullName"></param>
            <param name="searchMode">Modo de pesquisa associado.</param>
            <param name="source">Source.</param>
            <param name="isAnonymous"></param>
            <param name="lastActivityDate"></param>
            <param name="lastUpdatedDate"></param>
            <param name="markGroupId"></param>
            <param name="sellerTreeId"></param>
            <param name="intermediateId"></param>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileInfo.#ctor(Colosoft.Security.Profile.IProfile)">
            <summary>
            Cria uma instancia com base nos dados do perfil.
            </summary>
            <param name="profile"></param>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor usado na serialização dos dados.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileInfo.Equals(Colosoft.Security.Profile.ProfileInfo)">
            <summary>
            Verifica os dados das instancia são equivalentes.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Recupera os dados serializados.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileInfo.ProfileId">
            <summary>
            Identificador do perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileInfo.FullName">
            <summary>
            Nome do perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileInfo.UserName">
            <summary>
            Nome do usuário do perfil
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileInfo.SearchMode">
            <summary>
            Modo de pesquisa associado com o perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileInfo.Source">
            <summary>
            Origem da autenticação.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileInfo.LastActivityDate">
            <summary>
            Data da ultima atividade com o perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileInfo.LastUpdatedDate">
            <summary>
            Data da ultima vez que o perfil foi atualizado.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileInfo.IsAnonymous">
            <summary>
            Identifica se o usuário do perfil é anonimo.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileInfo.MarkGroupId">
            <summary>
            Grupo de marcadores associado ao perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileInfo.SellerTreeId">
            <summary>
            Identificador da árvore de vendedores associada ao perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileInfo.IntermediateId">
            <summary>
            Identificador do intermediador associado ao perfil.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Profile.CurrentProfileChangedEventArgs">
            <summary>
            Representa os argumentos do evento acionado quando o atual perfil for alterado.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.CurrentProfileChangedEventArgs.ProfileInfo">
            <summary>
            Instancia do novo perfil.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Profile.ProfileManager">
            <summary>
            Classe usada para gerenciar o perfil carregado no sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileManager.CurrentProfileInfoProviderProfileInfoChanged(System.Object,Colosoft.Security.Profile.CurrentProfileChangedEventArgs)">
            <summary>
            Método acionado quando as informações do perfil do atual usuário forem alteradas.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileManager.Initialize">
            <summary>
            Initializa os dados do membership.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileManager.SetCurrentProfile(System.Lazy{Colosoft.Security.Profile.ProfileInfo},System.Boolean)">
            <summary>
            Define as informações do perfil.
            </summary>
            <param name="info">Lazy das informações do perfil</param>
            <param name="ignoreTokenProvider"></param>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileManager.SetCurrentProfile(System.Lazy{Colosoft.Security.Profile.ProfileInfo},System.Boolean,Colosoft.Security.UserContext)">
            <summary>
            Define as informações do perfil.
            </summary>
            <param name="info">Lazy das informações do perfil</param>
            <param name="ignoreTokenProvider"></param>
            <param name="context">Contexto do usuário.</param>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileManager.SetCurrentProfile(Colosoft.Security.Profile.ProfileInfo)">
            <summary>
            Defin o profile que deve ser carregado para o sistema.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileManager.SetCurrentProfile(Colosoft.Security.Profile.ProfileInfo,System.Boolean)">
            <summary>
            Defin o profile que deve ser carregado para o sistema.
            </summary>
            <param name="info"></param>
            <param name="ignoreTokenProvider">Identifica se é para ignora a definição no provedor do token.</param>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileManager.SetCurrentProfile(Colosoft.Security.Profile.ProfileInfo,System.Boolean,Colosoft.Security.UserContext)">
            <summary>
            Defin o profile que deve ser carregado para o sistema.
            </summary>
            <param name="info"></param>
            <param name="ignoreTokenProvider">Identifica se é para ignora a definição no provedor do token.</param>
            <param name="userContext">Contexto do usuário.</param>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileManager.SetCurrentProfile(Colosoft.Security.Profile.IProfile)">
            <summary>
            Define o perfil
            </summary>
            <param name="profile"></param>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileManager.SetCurrentProfile(Colosoft.Security.Profile.IProfile,System.Boolean)">
            <summary>
            Define o perfil
            </summary>
            <param name="profile"></param>
            <param name="ignoreTokenProvider">Identifica se é para ignora a definição no provedor do token.</param>
        </member>
        <member name="E:Colosoft.Security.Profile.ProfileManager.CurrentProfileChanged">
            <summary>
            Evento acionado quando o perfil atual for alterado.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileManager.Context">
            <summary>
            Contexto do perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileManager.Providers">
            <summary>
            Armazena a lista dos provedores carregados.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileManager.DefaultProviderName">
            <summary>
            Nome do perfil padrão.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileManager.Provider">
            <summary>
            Provedor padrão do sistema.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileManager.CurrentProfile">
            <summary>
            Recupera a instancia do perfil do usuário.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileManager.CurrentProfileInfo">
            <summary>
            Recupera as informações do atual perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileManager.CurrentProfileInfoProvider">
            <summary>
            Instancia do provedro das informações do perfil
            </summary>
        </member>
        <member name="T:Colosoft.Security.Profile.ProfileManager.SetCurrentProfileData">
            <summary>
            Armazena os dados do perfil informado.
            </summary>
        </member>
        <member name="F:Colosoft.Security.Profile.ProfileManager.SetCurrentProfileData.ProfileInfo">
            <summary>
            Informações do perfil.
            </summary>
        </member>
        <member name="F:Colosoft.Security.Profile.ProfileManager.SetCurrentProfileData.IgnoreTokenProvider">
            <summary>
            Identifica se é para ignorar o token provider.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Profile.ProfileProperty">
            <summary>
            Armazena as propriedades de um perfil.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileProperty.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileProperty.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor usado na deserialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileProperty.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Recupera os dados serializados.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileProperty.GetMySchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Recupera o esquema XML do tipo.
            </summary>
            <param name="xs"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileProperty.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Não utilizar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileProperty.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Lê um xml e deserializa o objeto
            </summary>
            <param name="reader">objeto leitor</param>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileProperty.DefinitionUid">
            <summary>
            Identificador unico da definição da propriedade.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileProperty.Name">
            <summary>
            Nome da propriedade.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileProperty.Description">
            <summary>
            Descrição sobre a propriedade
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileProperty.TypeDefinition">
            <summary>
            Define o tipo da propriedade
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileProperty.Value">
            <summary>
            Valor da propriedade.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Profile.ProfilePropertyDefinition">
            <summary>
            Armazena a definição da propriedade do perfil.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfilePropertyDefinition.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfilePropertyDefinition.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor da serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfilePropertyDefinition.GetMySchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Recupera o esquema XML do tipo.
            </summary>
            <param name="xs"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfilePropertyDefinition.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Não utilizar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfilePropertyDefinition.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Lê um xml e deserializa o objeto
            </summary>
            <param name="reader">objeto leitor</param>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfilePropertyDefinition.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Recupera os dados serializados.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfilePropertyDefinition.Uid">
            <summary>
            Identificador unico da definição.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfilePropertyDefinition.Name">
            <summary>
            Nome da propriedade.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfilePropertyDefinition.Description">
            <summary>
            Descrição da propriedade.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfilePropertyDefinition.TypeDefinition">
            <summary>
            Definição do tipo.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Profile.ProfileProviderException">
            <summary>
            Representa um erro do provedor de perfil.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileProviderException.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileProviderException.#ctor(System.String)">
            <summary>
            Cria uma instancia com a mensagem informada.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileProviderException.#ctor(System.String,System.Exception)">
            <summary>
            Cria uma instancia com a mensagem e innerException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileProviderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor usado na deserização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileProviderException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Método usado na serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Colosoft.Security.Profile.ProfileRoleSet">
            <summary>
            Representa um conjunto de papéis de permissão para os perfis.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileRoleSet.IsAllowed(System.Security.IPermission)">
            <summary>
            Verifica se a permissão informada é permitida no conjunto.
            </summary>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileRoleSet.GetMySchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Recupera o esquema XML do tipo.
            </summary>
            <param name="xs"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileRoleSet.GetSchema">
            <summary>
            Não utilizar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileRoleSet.ReadXml(System.Xml.XmlReader)">
            <summary>
            Lê um xml e deserializa o objeto
            </summary>
            <param name="reader">objeto leitor</param>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileRoleSet.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converte o objeto em XML
            </summary>
            <param name="writer">Objeto a ser escrito</param>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileRoleSet.Name">
            <summary>
            Nome do conjunto.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Profile.ProfileRoleSet.RolePermissionSets">
            <summary>
            Conjunto de permissões dos papéis.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Profile.ProfileSearchModeProvider">
            <summary>
            Classe que prover métoso que trabalham com os modos de pesquisa do perfil.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Profile.ProfileSearchModeProvider.GetDescriptions">
            <summary>
            Recupera a descrição dos modos de pesquias.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Security.Profile.ProfileSearchMode">
            <summary>
            Modos de pesquisa que podem ser associados com o perfil.
            </summary>
        </member>
        <member name="F:Colosoft.Security.Profile.ProfileSearchMode.All">
            <summary>
            Pesquisa todos os itens sem restrição.
            </summary>
        </member>
        <member name="F:Colosoft.Security.Profile.ProfileSearchMode.Source">
            <summary>
            Pesquisa somente os itens associados com a origem do perfil.
            </summary>
        </member>
        <member name="F:Colosoft.Security.Profile.ProfileSearchMode.Self">
            <summary>
            Pesquisa somente os itens cadastrados pelo usuário.
            </summary>
        </member>
        <member name="F:Colosoft.Security.Profile.ProfileSearchMode.Seller">
            <summary>
            Pesquisa somente os itens associados com o vendedor do perfil.
            </summary>
        </member>
        <member name="F:Colosoft.Security.Profile.ProfileSearchMode.Intermediate">
            <summary>
            Pesquisa somente os itens associados com o intermediador do perfil.
            </summary>
        </member>
        <member name="T:Colosoft.Security.ResetPasswordProcessResult">
            <summary>
            Representa o retorno da abertura de processo para a redefinição de senha
            </summary>
        </member>
        <member name="P:Colosoft.Security.ResetPasswordProcessResult.Success">
            <summary>
            Indica o sucesso da operação
            </summary>
        </member>
        <member name="P:Colosoft.Security.ResetPasswordProcessResult.Message">
            <summary>
            Mensagem que deve ser apresentada ao cliente
            </summary>
        </member>
        <member name="T:Colosoft.Security.RolePermissionNamespace">
            <summary>
            Namespace no xml da classe RolePermission
            </summary>
        </member>
        <member name="F:Colosoft.Security.RolePermissionNamespace.Data">
            <summary>
            Namespace definido para o XML
            </summary>
        </member>
        <member name="F:Colosoft.Security.RolePermissionNamespace.SchemaInstance">
            <summary>
            Namespace do arquivo de schema
            </summary>
        </member>
        <member name="M:Colosoft.Security.RolePermissionNamespace.ResolveRolePermissionSchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Resolve o esquema da consulta.
            </summary>
            <param name="xs"></param>
        </member>
        <member name="P:Colosoft.Security.RolePermissionNamespace.RolePermissionSchema">
            <summary>
            Instancia do esquema da consulta.
            </summary>
        </member>
        <member name="T:Colosoft.Security.RolePermissionSet">
            <summary>
            Representa um conjunto de permissões para um papel do sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Security.RolePermissionSet.PermissionsFromXml(System.Xml.XmlReader)">
            <summary>
            Recupera os dados das permissões pela leitura de um xml.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Colosoft.Security.RolePermissionSet.PermissionsFromXml(System.Security.SecurityElement)">
            <summary>
            Carrega os dados das permissões.
            </summary>
            <param name="securityElement"></param>
        </member>
        <member name="M:Colosoft.Security.RolePermissionSet.GetMySchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Recupera o esquema XML do tipo.
            </summary>
            <param name="xs"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.RolePermissionSet.WriteXml(System.Xml.XmlWriter,System.Security.SecurityElement)">
            <summary>
            Escreve o elemento de securança no XmlWriter.
            </summary>
            <param name="writer"></param>
            <param name="element"></param>
        </member>
        <member name="M:Colosoft.Security.RolePermissionSet.FromXml(System.Xml.XmlReader)">
            <summary>
            Recupera os dados do xml.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Security.RolePermissionSet.Role">
            <summary>
            Nome do papel.
            </summary>
        </member>
        <member name="P:Colosoft.Security.RolePermissionSet.Permissions">
            <summary>
            Permissões que garante acesso.
            </summary>
        </member>
        <member name="T:Colosoft.Security.Roles">
            <summary>
            Classe que gerencia os papéis dos sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Roles.Initialize">
            <summary>
            Initializa os dados do membership.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Roles.AddUsersToRoles(System.String[],System.String[])">
            <summary>
            Adiciona os usuário informados para os papéis informados.
            </summary>
            <param name="usernames"></param>
            <param name="roleNames"></param>
        </member>
        <member name="M:Colosoft.Security.Roles.DeleteRole(System.String)">
            <summary>
            Apaga o papel do sistema.
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Roles.GetRolesForUser(System.String)">
            <summary>
            Recupera todos os papéis associados com o usuário.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Security.Roles.DefaultProviderName">
            <summary>
            Nome do provedor padrão do sistema.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Roles.Provider">
            <summary>
            Provedor de papéis associado com a instancia.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Roles.Providers">
            <summary>
            Armazena a lista dos provedores carregados.
            </summary>
        </member>
        <member name="T:Colosoft.Security.SecurityExtensions">
            <summary>
            Classe que contém os métodos auxiliares da parte de segurança.
            </summary>
        </member>
        <member name="M:Colosoft.Security.SecurityExtensions.GetInfo(Colosoft.Security.Profile.IProfile)">
            <summary>
            Conversão de um perfil para as suas informações.
            </summary>
            <param name="profile"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.SecurityNamespaces.ResolveSecuritySchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Resolve o esquema da consulta.
            </summary>
            <param name="xs"></param>
        </member>
        <member name="P:Colosoft.Security.SecurityNamespaces.SecuritySchema">
            <summary>
            Instancia do esquema da consulta.
            </summary>
        </member>
        <member name="T:Colosoft.Security.SecurityParameter">
            <summary>
            Armazena os dados de um parametro usado na autenticação.
            </summary>
        </member>
        <member name="M:Colosoft.Security.SecurityParameter.#ctor">
            <summary>
            Construtor vazio.
            </summary>
        </member>
        <member name="M:Colosoft.Security.SecurityParameter.#ctor(System.String,System.String)">
            <summary>
            Cria uma nova instancia já com os valores do parametro.
            </summary>
            <param name="name">Nome do parametro.</param>
            <param name="value">Valor do parametro.</param>
        </member>
        <member name="P:Colosoft.Security.SecurityParameter.Name">
            <summary>
            Nome do parametro.
            </summary>
        </member>
        <member name="P:Colosoft.Security.SecurityParameter.Value">
            <summary>
            Valor do parametro.
            </summary>
        </member>
        <member name="M:Colosoft.Security.SecurityUtility.CheckParameter(System.String@,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String)">
            <summary>
            Verifica se o parametro é valido.
            </summary>
            <param name="param">Valor do parametro.</param>
            <param name="checkForNull">Verificar se o parametro é nulo.</param>
            <param name="checkIfEmpty">Verificar se o parametro é vazio.</param>
            <param name="checkForCommas">Verifica por virgulas no parametro.</param>
            <param name="maxSize">Tamanho máximo do parametro.</param>
            <param name="paramName">Nome do parametro.</param>
        </member>
        <member name="M:Colosoft.Security.SecurityUtility.CheckArrayParameter(System.String[]@,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String)">
            <summary>
            Verifica se o parametro é valido.
            </summary>
            <param name="param"></param>
            <param name="checkForNull"></param>
            <param name="checkIfEmpty"></param>
            <param name="checkForCommas"></param>
            <param name="maxSize"></param>
            <param name="paramName"></param>
        </member>
        <member name="T:Colosoft.Security.TokenConsultResult">
            <summary>
            Objeto com o resultado da consulta do token
            </summary>
        </member>
        <member name="M:Colosoft.Security.TokenConsultResult.GetProfileInfo">
            <summary>
            Recupera as informações do perfil associado.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Security.TokenConsultResult.Success">
            <summary>
            Se existe o token
            </summary>
        </member>
        <member name="P:Colosoft.Security.TokenConsultResult.Message">
            <summary>
            Mensagem associada com o resultado.
            </summary>
        </member>
        <member name="P:Colosoft.Security.TokenConsultResult.UserId">
            <summary>
            Identificador do usuário
            </summary>
        </member>
        <member name="P:Colosoft.Security.TokenConsultResult.UserName">
            <summary>
            Nome do usuário associado com o token.
            </summary>
        </member>
        <member name="P:Colosoft.Security.TokenConsultResult.ProfileName">
            <summary>
            Nome do perfil associado com o token.
            </summary>
        </member>
        <member name="P:Colosoft.Security.TokenConsultResult.ProfileId">
            <summary>
            Identificador do perfil associado.
            </summary>
        </member>
        <member name="P:Colosoft.Security.TokenConsultResult.ProfileSourceName">
            <summary>
            Nome do origem de autenticação do perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Security.TokenConsultResult.ProfileSourceUid">
            <summary>
            Identificador único da origem do perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Security.TokenConsultResult.ProfileSourceIsActive">
            <summary>
            Identifica se a origem do perfil está ativa.
            </summary>
        </member>
        <member name="T:Colosoft.Security.TokenPingResultStatus">
            <summary>
            Resultados possíveis de um ping.
            </summary>
        </member>
        <member name="F:Colosoft.Security.TokenPingResultStatus.Success">
            <summary>
            Sucesso.
            </summary>
        </member>
        <member name="F:Colosoft.Security.TokenPingResultStatus.Error">
            <summary>
            Ocorreu algum erro durante o processo.
            </summary>
        </member>
        <member name="F:Colosoft.Security.TokenPingResultStatus.InvalidToken">
            <summary>
            O token é inválido.
            </summary>
        </member>
        <member name="T:Colosoft.Security.TokenPingResultErrorInfo">
            <summary>
            Armazen as informações do erro.
            </summary>
        </member>
        <member name="M:Colosoft.Security.TokenPingResultErrorInfo.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Security.TokenPingResultErrorInfo.#ctor(System.Exception)">
            <summary>
            Constrói a instancia com o erro ocorrido.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Colosoft.Security.TokenPingResultErrorInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor usado na deserialização dos dados.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Security.TokenPingResultErrorInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Recupera os dados da instancia.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Security.TokenPingResultErrorInfo.GetMySchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Recupera o esquema que representa o tipo.
            </summary>
            <param name="xs"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.TokenPingResultErrorInfo.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Lê os dados serializados.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Colosoft.Security.TokenPingResultErrorInfo.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializa os dados para o Xml.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Colosoft.Security.TokenPingResultErrorInfo.ToString">
            <summary>
            Recupera o texto que representa a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Security.TokenPingResultErrorInfo.Type">
            <summary>
            Nome do tipo do erro.
            </summary>
        </member>
        <member name="P:Colosoft.Security.TokenPingResultErrorInfo.Message">
            <summary>
            Mensagem do erro.
            </summary>
        </member>
        <member name="P:Colosoft.Security.TokenPingResultErrorInfo.StackTrace">
            <summary>
            Pilha de rastreamento do erro.
            </summary>
        </member>
        <member name="P:Colosoft.Security.TokenPingResultErrorInfo.Inner">
            <summary>
            Instancia do erro interno.
            </summary>
        </member>
        <member name="T:Colosoft.Security.TokenPingResultMessage">
            <summary>
            Representa uma mensagem do resultado do ping.
            </summary>
        </member>
        <member name="M:Colosoft.Security.TokenPingResultMessage.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Security.TokenPingResultMessage.#ctor(Colosoft.IMessageFormattable)">
            <summary>
            Cria a instancia com a mensagem informada.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Colosoft.Security.TokenPingResultMessage.#ctor(Colosoft.IMessageFormattable,System.Exception)">
            <summary>
            Cria a instancia com o erro ocorrido.
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Colosoft.Security.TokenPingResultMessage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor usado na deserialização dos dados.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Security.TokenPingResultMessage.op_Implicit(System.Exception)~Colosoft.Security.TokenPingResultMessage">
            <summary>
            Conversor implicito para recupera a mensagem de um erro ocorrido.
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.TokenPingResultMessage.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Recupera os dados da instancia.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Security.TokenPingResultMessage.GetMySchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Recupera o esquema que representa o tipo.
            </summary>
            <param name="xs"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.TokenPingResultMessage.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Lê os dados serializados.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Colosoft.Security.TokenPingResultMessage.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializa os dados para o Xml.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Colosoft.Security.TokenPingResultMessage.ToString">
            <summary>
            Recupera o texto que representa a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Security.TokenPingResultMessage.Message">
            <summary>
            Mensagem.
            </summary>
        </member>
        <member name="P:Colosoft.Security.TokenPingResultMessage.Error">
            <summary>
            Erro caso tenha ocorrido.
            </summary>
        </member>
        <member name="T:Colosoft.Security.TokenPingResult">
            <summary>
            Representa o retorno do processo de ping do token.
            </summary>
        </member>
        <member name="M:Colosoft.Security.TokenPingResult.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Security.TokenPingResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor usado na deserialização dos dados.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Security.TokenPingResult.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Recupera os dados da instancia.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Security.TokenPingResult.GetMySchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Recupera o esquema que representa o tipo.
            </summary>
            <param name="xs"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.TokenPingResult.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Lê os dados serializados.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Colosoft.Security.TokenPingResult.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializa os dados xml.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Colosoft.Security.TokenPingResult.ServerTime">
            <summary>
            Horário do servidor.
            </summary>
        </member>
        <member name="P:Colosoft.Security.TokenPingResult.Status">
            <summary>
            Status da requisição de verificação.
            </summary>
        </member>
        <member name="P:Colosoft.Security.TokenPingResult.Message">
            <summary>
            Mensagem retornada pelo processo de verificação.
            </summary>
        </member>
        <member name="P:Colosoft.Security.TokenPingResult.Notifications">
            <summary>
            Notificações do usuário.
            </summary>
        </member>
        <member name="T:Colosoft.Security.TokenPingResult.PingMessage">
            <summary>
            Implemeñtação da mensagem do ping.
            </summary>
        </member>
        <member name="M:Colosoft.Security.TokenPingResult.PingMessage.#ctor(Colosoft.Security.IPingMessage)">
            <summary>
            Construtor
            </summary>
            <param name="pingMessage"></param>
        </member>
        <member name="M:Colosoft.Security.TokenPingResult.PingMessage.#ctor">
            <summary>
            Construtor
            </summary>
        </member>
        <member name="M:Colosoft.Security.TokenPingResult.PingMessage.GetMySchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Recupera o esquema que representa o tipo.
            </summary>
            <param name="xs"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.TokenPingResult.PingMessage.ReadXml(System.Xml.XmlReader)">
            <summary>
            Lê os dados serializados.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Colosoft.Security.TokenPingResult.PingMessage.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializa os dados.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Colosoft.Security.Tokens">
            <summary>
            Classe responsável pelo gerenciamento dos tokens do sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Tokens.Initialize">
            <summary>
            Initializa os dados do membership.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Tokens.Check(System.String)">
            <summary>
            Verifica se um token está ou não válido
            </summary>
            <param name="token">token</param>
            <returns>Objeto com o resultado da consulta</returns>
        </member>
        <member name="M:Colosoft.Security.Tokens.Ping(System.String)">
            <summary>
            Executa uma verificação do token no servidor.
            </summary>
            <param name="token">Token</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Tokens.MarkMessageAsRead(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Marca as mensagens como lidas.
            </summary>
            <param name="dispatcherIds">Identificadores dos despachos.</param>
        </member>
        <member name="M:Colosoft.Security.Tokens.SetProfile(System.String,System.Int32)">
            <summary>
            Define o perfil para o token.
            </summary>
            <param name="token">Token.</param>
            <param name="profileId">Informações do perfil.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Tokens.CloseUserTokens(System.Int32)">
            <summary>
            Fecha os tokens em aberto de um usuário.
            </summary>
            <param name="userId">Identificador do usuário</param>
        </member>
        <member name="M:Colosoft.Security.Tokens.CloseUserTokens(System.Int32,System.String)">
            <summary>
            Fecha os tokens em aberto de um usuário.
            </summary>
            <param name="userId">Identificador do usuário.</param>
            <param name="applicationName">Nome da aplicação associada.</param>
        </member>
        <member name="M:Colosoft.Security.Tokens.Reset">
            <summary>
            Reseta os provedores de token do sistema.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Tokens.TokenGetters">
            <summary>
            Recuperadores de token do sistem.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Tokens.DefaultProviderName">
            <summary>
            Nome do provedor padrão do sistema.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Tokens.Provider">
            <summary>
            Provedor de papéis associado com a instancia.
            </summary>
        </member>
        <member name="P:Colosoft.Security.Tokens.Providers">
            <summary>
            Armazena a lista dos provedores carregados.
            </summary>
        </member>
        <member name="T:Colosoft.Security.TokenSetProfileResult">
            <summary>
            Armazena o resultado quando o perfil for definido para o token.
            </summary>
        </member>
        <member name="P:Colosoft.Security.TokenSetProfileResult.Success">
            <summary>
            Identifica se a operação foi realizada com sucesso.
            </summary>
        </member>
        <member name="P:Colosoft.Security.TokenSetProfileResult.FailureMessage">
            <summary>
            Mensagem da falha caso tenha ocorrido.
            </summary>
        </member>
        <member name="T:Colosoft.Security.UserContextGetUserMode">
            <summary>
            Possíveis métodos de recuperação dos dados do usuário
            a partir do name do Identity no Principal.
            </summary>
        </member>
        <member name="F:Colosoft.Security.UserContextGetUserMode.GetByKey">
            <summary>
            Identifica se é para recuperar os dados do usuário com base na sua chave.
            </summary>
        </member>
        <member name="F:Colosoft.Security.UserContextGetUserMode.GetByName">
            <summary>
            Identifica se é para recuperar os dados do usuário com base no nome.
            </summary>
        </member>
        <member name="T:Colosoft.Security.UserContext">
            <summary>
            Armazena os dados do contexto do usuário autenticado no sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Security.UserContext.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Security.UserContext.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor usado na deserialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Colosoft.Security.UserContext.ConfigureThread(System.Threading.Thread)">
            <summary>
            Configura a thread;
            </summary>
            <param name="contextThread"></param>
        </member>
        <member name="M:Colosoft.Security.UserContext.ConfigureThread(System.Threading.Thread,System.Security.Principal.IPrincipal)">
            <summary>
            Configura a thread a thread informada com os parametros do contexto do usuário.
            </summary>
            <param name="contextThread"></param>
            <param name="principal"></param>
        </member>
        <member name="M:Colosoft.Security.UserContext.GetPrincipal(System.Threading.Thread)">
            <summary>
            Recupera o principal associado com a thread.
            </summary>
            <param name="thread"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.UserContext.SetIdentity(System.String,System.String,System.Boolean)">
            <summary>
            Define a entidade.
            </summary>
            <param name="userName"></param>
            <param name="token"></param>
            <param name="isAuthenticate"></param>
        </member>
        <member name="M:Colosoft.Security.UserContext.RaisePropertyChanged(System.String[])">
            <summary>
            Dispara a notificação de alteração de uma propriedade.
            </summary>
            <param name="propertyNames"></param>
        </member>
        <member name="M:Colosoft.Security.UserContext.Setup(System.Threading.Thread,System.Func{Colosoft.Security.UserContext,System.Security.Principal.IPrincipal})">
            <summary>
            Configura o contexto do usuário.
            </summary>
            <param name="thread"></param>
            <param name="principalGetter">Ponteiro do método usado para recuperar a instancia do principal.</param>
        </member>
        <member name="M:Colosoft.Security.UserContext.UnSetup">
            <summary>
            Remove a configuração.
            </summary>
        </member>
        <member name="M:Colosoft.Security.UserContext.SignOut">
            <summary>
            Libera o usuário do atual contexto.
            </summary>
        </member>
        <member name="M:Colosoft.Security.UserContext.SetAuth(System.String,System.String)">
            <summary>
            Define os parametros de autenticação.
            </summary>
            <param name="userName">Nome do usuário autenticado.</param>
            <param name="token">Token da autenticação.</param>
        </member>
        <member name="M:Colosoft.Security.UserContext.SetAuth(Colosoft.Security.IUser,System.String)">
            <summary>
            Define os parametros de autenticação.
            </summary>
            <param name="user">Instancia com os dados do usuário.</param>
            <param name="token">Token da autenticação.</param>
        </member>
        <member name="M:Colosoft.Security.UserContext.Authenticate(System.String,System.String,Colosoft.Security.SecurityParameter[])">
            <summary>
            Realiza a autenticação do usuário no sistema.
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="parameters">Parametros que serão usados na autenticação.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.UserContext.ValidateToken(System.String)">
            <summary>
            Valida os dados do token.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.UserContext.Ping">
            <summary>
            Executa uma verificação do token no servidor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.UserContext.MarkMessageAsRead(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Marca as mensagens como lidas.
            </summary>
            <param name="dispatcherIds">Identificadores dos despachos.</param>
        </member>
        <member name="M:Colosoft.Security.UserContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Recupera os dados serializados.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="E:Colosoft.Security.UserContext.PropertyChanged">
            <summary>
            Evento acionado quando um propriedade for alterada.
            </summary>
        </member>
        <member name="P:Colosoft.Security.UserContext.UserProcessing">
            <summary>
            Identifica se está processando os dados do usuário.
            </summary>
        </member>
        <member name="P:Colosoft.Security.UserContext.SupportGetUserByToken">
            <summary>
            Identifica se tem suporte em recupera os dados do usuário pelo token informado.
            </summary>
        </member>
        <member name="P:Colosoft.Security.UserContext.GetUserMode">
            <summary>
            Modo de recuperação dos dados do usuário. Padrão GetByKey.
            </summary>
        </member>
        <member name="P:Colosoft.Security.UserContext.ProfileContext">
            <summary>
            Contexto do perfil.
            </summary>
        </member>
        <member name="P:Colosoft.Security.UserContext.Current">
            <summary>
            Recupera a unica instancia do contexto do usuário do sistema.
            </summary>
        </member>
        <member name="P:Colosoft.Security.UserContext.Principal">
            <summary>
            Principal associado com a instancia.
            </summary>
        </member>
        <member name="P:Colosoft.Security.UserContext.User">
            <summary>
            Recupera a instancia do usuário logado no sistema.
            </summary>
        </member>
        <member name="P:Colosoft.Security.UserContext.Token">
            <summary>
            Token do usuário do contexto.
            </summary>
        </member>
        <member name="P:Colosoft.Security.UserContext.CurrentCultureInfo">
            <summary>
            Informações regionais do usuário.
            </summary>
        </member>
        <member name="T:Colosoft.Security.UserIdentity">
            <summary>
            Armazena os dados da identidade de o usuário do sistema.
            </summary>
        </member>
        <member name="F:Colosoft.Security.UserIdentity._identity">
            <summary>
            Instancia do IIdentity adaptada.
            </summary>
        </member>
        <member name="F:Colosoft.Security.UserIdentity._items">
            <summary>
            Dicionário de informações agregadas para a identificação.
            </summary>
        </member>
        <member name="M:Colosoft.Security.UserIdentity.#ctor(System.Security.Principal.IIdentity)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="identity">Instancia que será adaptada.</param>
        </member>
        <member name="M:Colosoft.Security.UserIdentity.Contains(System.String)">
            <summary>
            Verifica se existem o item com o nome informado.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.UserIdentity.Remove(System.String)">
            <summary>
            Apaga 
            </summary>
            <param name="name"></param>
            <returns>True caso o item tenha sido removido.</returns>
        </member>
        <member name="M:Colosoft.Security.UserIdentity.GetEnumerator">
            <summary>
            Recupera o enumerador dos itens da identidade.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Security.UserIdentity.User">
            <summary>
            Instancia do usuário relacionado.
            </summary>
        </member>
        <member name="P:Colosoft.Security.UserIdentity.Item(System.String)">
            <summary>
            Recupera o valor do item pelo nome informado.
            </summary>
            <param name="name">Nome do item que será recuperado.</param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Security.UserIdentity.ItemsCount">
            <summary>
            Quantidade de itens armazenados.
            </summary>
        </member>
        <member name="P:Colosoft.Security.UserIdentity.AuthenticationType">
            <summary>
            Tipo de autenticação.
            </summary>
        </member>
        <member name="P:Colosoft.Security.UserIdentity.IsAuthenticated">
            <summary>
            Identifica se a identidade está autenticada.
            </summary>
        </member>
        <member name="P:Colosoft.Security.UserIdentity.Name">
            <summary>
            Nome associado com a identidade.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.#cctor">
            <summary>
            Construtor usado para instancia as váriaveis da classe.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.#ctor(System.Boolean,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="ignoreCase">Identifica se é para ignorar a comparação das strings.</param>
            <param name="str">String do conjunto.</param>
            <param name="throwOnRelative">Identifica se é para disparar um excessão caso a expressão seja relativa.</param>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.#ctor(System.String)">
            <summary>
            Constrói um novo cojunto de expressões.
            </summary>
            <param name="str">Texto da expressões para inicializar a instancia.</param>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.#ctor(System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="ignoreCase"></param>
            <param name="throwOnRelative"></param>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.StaticProcessWholeString(System.String)">
            <summary>
            Processa a string inteira.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.StaticProcessSingleString(System.String)">
            <summary>
            Processa uma string simples.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.CanonicalizePath(System.String,System.Boolean)">
            <summary>
            Recupera o caminho correto.
            </summary>
            <param name="path">Caminho que será processado.</param>
            <param name="needFullPath">Identifica se é para recupera o caminho completo.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.CanonicalizePath(System.String)">
            <summary>
            Recupera o caminho correto.
            </summary>
            <param name="path">Caminho que será processado.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.CreateListFromExpressions(System.String[],System.Boolean)">
            <summary>
            Cria uma lista de items das expressões informadas
            </summary>
            <param name="str"></param>
            <param name="needFullPath"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.CreateList">
            <summary>
            Cria a lista do conjunto.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.CheckList">
            <summary>
            Verifica a lista do conjunto.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.ProcessWholeString(System.String)">
            <summary>
            Processa a string inteira.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.ProcessSingleString(System.String)">
            <summary>
            Processa uma string simples.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.CreateNewEmpty">
            <summary>
            Cria um conjunto vazio.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.Reduce">
            <summary>
            Reduz o conjunto.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.Split(System.String)">
            <summary>
            Quebra as expressões em partes.
            </summary>
            <param name="expressions"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.StringSubsetStringExpression(System.String,Colosoft.Security.Util.StringExpressionSet,System.Boolean)">
            <summary>
            Verifica se a string é um subconjunto de expressões informado.
            </summary>
            <param name="left">String que será usada na verificação.</param>
            <param name="right">Conjunto de expressões onde será feita a verificação.</param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.StringSubsetString(System.String,System.String,System.Boolean)">
            <summary>
            Verifica se a string é um subconjunto de uma string.
            </summary>
            <param name="left">String que será usada na verificação.</param>
            <param name="right">String onde será feita a verificação.</param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.StringSubsetStringExpressionPathDiscovery(System.String,Colosoft.Security.Util.StringExpressionSet,System.Boolean)">
            <summary>
            Verifica se a string é um subconjunto de um conjunto de expressões de um caminho descoberto.
            </summary>
            <param name="left">String que será usada na verificação.</param>
            <param name="right">Conjunto de expressões onde será feita a verificação.</param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.StringSubsetStringPathDiscovery(System.String,System.String,System.Boolean)">
            <summary>
            Verifica se a string é um subconjunto de uma string de um caminho descoberto.
            </summary>
            <param name="left">String que será usada na verificação.</param>
            <param name="right">String do caminho.</param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.AddSingleExpressionNoDuplicates(System.String)">
            <summary>
            Insere um expressão simples sem duplicatas.
            </summary>
            <param name="expression">Expressão que será adicionada.</param>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.GenerateString">
            <summary>
            Gera a String do conjunto.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.Copy">
            <summary>
            Cria um cópia do conjunto.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.AddExpressions(System.String)">
            <summary>
            Adiciona novas expressões.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.AddExpressions(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Adiciona várias expressões para o conjunto.
            </summary>
            <param name="expressions"></param>
            <param name="checkForDuplicates">True para verifica duplicatas.</param>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.AddExpressions(System.String[],System.Boolean,System.Boolean)">
            <summary>
            Adiciona várias expressões para o conjunto. 
            </summary>
            <param name="str">Expressões que serão adicionadas.</param>
            <param name="checkForDuplicates">True para verifica duplicatas.</param>
            <param name="needFullPath">True é for necessário o caminho completo.</param>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.IsEmpty">
            <summary>
            Verifica se o conjunto está vazio.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.Intersect(Colosoft.Security.Util.StringExpressionSet)">
            <summary>
            Recupera a intercessão com o conjunto informado.
            </summary>
            <param name="ses"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.Union(Colosoft.Security.Util.StringExpressionSet)">
            <summary>
            Realiza a união com o conjunto informado.
            </summary>
            <param name="ses"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.IsSubsetOf(Colosoft.Security.Util.StringExpressionSet)">
            <summary>
            Verifica se o conjunto informado é subconjunto do atual.
            </summary>
            <param name="ses">Conjunto que será verificado.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.IsSubsetOfPathDiscovery(Colosoft.Security.Util.StringExpressionSet)">
            <summary>
            Verifica se o conjunto informado é subconjunto do caminho descoberto.
            </summary>
            <param name="ses"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Util.StringExpressionSet.SetThrowOnRelative(System.Boolean)">
            <summary>
            Define se é para dispara a excessão caso o caminho seja relativo.
            </summary>
            <param name="throwOnRelative"></param>
        </member>
        <member name="T:Colosoft.Security.Util.XMLUtil">
            <summary>
            Classe que contém método que auxilia na utilização do XML.
            </summary>
        </member>
        <member name="M:Colosoft.Security.Util.XMLUtil.IsUnrestricted(System.Security.SecurityElement)">
            <summary>
            Verifica se o SecurityElement não tem restrição.
            </summary>
            <param name="el"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Security.Util.XMLUtil.AddClassAttribute(System.Security.SecurityElement,System.Type,System.String)">
            <summary>
            Adiciona um atributo de classe.
            </summary>
            <param name="element"></param>
            <param name="type"></param>
            <param name="typename"></param>
        </member>
        <member name="M:Colosoft.Security.Util.XMLUtil.IsPermissionElement(System.Security.IPermission,System.Security.SecurityElement)">
            <summary>
            Verifica se o elemento é um elemento de permissão.
            </summary>
            <param name="ip"></param>
            <param name="el"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Security.ValidateUserResult">
            <summary>
            Informações de resultado da autenticação
            </summary>
        </member>
        <member name="P:Colosoft.Security.ValidateUserResult.Status">
            <summary>
            Situação da autenticação.
            </summary>
        </member>
        <member name="P:Colosoft.Security.ValidateUserResult.Message">
            <summary>
            Mensagem a ser apresentada
            </summary>
        </member>
        <member name="P:Colosoft.Security.ValidateUserResult.User">
            <summary>
            Usuário autenticado em caso de sucesso
            </summary>
        </member>
        <member name="P:Colosoft.Security.ValidateUserResult.Captcha">
            <summary>
            Indica que a próxima tentativa de login deverá conter o captcha
            </summary>
        </member>
        <member name="P:Colosoft.Security.ValidateUserResult.ExpireDate">
            <summary>
            Data em que o password irá expirar
            </summary>
        </member>
        <member name="P:Colosoft.Security.ValidateUserResult.Token">
            <summary>
            Token que identifica a autenticação
            </summary>
        </member>
        <member name="P:Colosoft.Security.ValidateUserResult.IsProcess">
            <summary>
            Indica que é um processo
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.BinaryTransformer">
            <summary>
            Transformador de dados binários.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.BinaryTransformer.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.BinaryTransformer.GetByteFromHexRepresentation(System.String,System.Int32)">
            <summary>
            Recupera o byte da representação hexadecimal.
            </summary>
            <param name="text"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.BinaryTransformer.GetBytesFromHexRepresentation(System.String)">
            <summary>
            Recupera os bytes da representação Hexadecimal.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.BinaryTransformer.GetChar(System.Byte)">
            <summary>
            Recupera o character do meio byte.
            </summary>
            <param name="halfByte"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.BinaryTransformer.GetHalfByteFromHexRepresentation(System.String,System.Int32)">
            <summary>
            Recupera o meio byte da representa hexadecimal.
            </summary>
            <param name="text"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.BinaryTransformer.GetString(System.Byte[])">
            <summary>
            Recuper o texto dos dados informados.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.BinaryTransformer.GetString(System.Byte)">
            <summary>
            Recupera o texto do byte informado.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.BinaryTransformer.GetString(System.Text.StringBuilder,System.Byte)">
            <summary>
            Recupera o texto do valor.
            </summary>
            <param name="builder"></param>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.BinaryTransformer.GetString(System.Byte[],System.Text.Encoding)">
            <summary>
            Recupera o texto dos dados informados.
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.BinaryTransformer.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Recupera o texto dos dados informados.
            </summary>
            <param name="data"></param>
            <param name="start"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.BinaryTransformer.GetString(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Recupera o texto dos dados informados.
            </summary>
            <param name="data"></param>
            <param name="start"></param>
            <param name="length"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.BinaryTransformer.HasInvalidCharacters(System.String)">
            <summary>
            Verifica se possui caracteres inválidos.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.BinaryTransformer.TrimInvalidCharacters(System.String)">
            <summary>
            Remove os caracteres inválidos.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.BinaryTransformer.TryGetInteger(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Int32@)">
            <summary>
            Tenta recupera o valor inteiro.
            </summary>
            <param name="data"></param>
            <param name="start"></param>
            <param name="length"></param>
            <param name="encoding"></param>
            <param name="integer"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Serialization.CompactFormatterServices">
            <summary>
            Classe que auxilia com método de formatação de serviços.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.CompactFormatterServices.RegisterCompactType(System.Type)">
            <summary>
            Registra um tipo compacto.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Colosoft.Serialization.CompactFormatterServices.RegisterCompactType(System.Type,System.Int16)">
            <summary>
            Registra o tipo compacto.
            </summary>
            <param name="type">Tipo que será registrado.</param>
            <param name="typeHandle">Número do manipulador do tipo.</param>
        </member>
        <member name="M:Colosoft.Serialization.CompactFormatterServices.RegisterCustomCompactType(System.Type,System.Int16,System.String,System.Int16,System.Collections.Hashtable,System.Boolean)">
            <summary>
            Registra um tipo customizado compacto.
            </summary>
            <param name="type">Tipo que será registrado.</param>
            <param name="typeHandle"></param>
            <param name="cacheContext"></param>
            <param name="subTypeHandle"></param>
            <param name="attributeOrder"></param>
            <param name="portable"></param>
        </member>
        <member name="M:Colosoft.Serialization.CompactFormatterServices.UnregisterAllCustomCompactTypes(System.String)">
            <summary>
            Remove o registro de todos os tipos compactor customizados.
            </summary>
            <param name="cacheContext"></param>
        </member>
        <member name="M:Colosoft.Serialization.CompactFormatterServices.UnregisterCompactType(System.Type)">
            <summary>
            Remove o registro do tipo informado.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Colosoft.Serialization.CompactFormatterServices.UnregisterCustomCompactType(System.Type,System.String)">
            <summary>
            Remove o registro do tipo customizado informado.
            </summary>
            <param name="type"></param>
            <param name="cacheContext"></param>
        </member>
        <member name="T:Colosoft.Serialization.Formatters.CompactBinaryFormatter">
            <summary>
            Classe responsável pelos método de serialização e deserialização compactos.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Formatters.CompactBinaryFormatter.Deserialize(System.IO.Stream,System.String)">
            <summary>
            Deserializa o objeto que possui seus dados contidos na stream informada.
            </summary>
            <param name="stream">Stream onde estão os dados serializados.</param>
            <param name="cacheContext">Nome do contexto.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Formatters.CompactBinaryFormatter.Deserialize(Colosoft.Serialization.IO.CompactBinaryReader,System.String,System.Boolean)">
            <summary>
            Deserializa o objeto a partir do leitor.
            </summary>
            <param name="reader"></param>
            <param name="cacheContext"></param>
            <param name="skip">Identifica se é para saltar a deserialização.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Formatters.CompactBinaryFormatter.Deserialize(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Deserializa os dados da stream em um objeto.
            </summary>
            <param name="stream">Stream onde os dados estão armazenados.</param>
            <param name="cacheContext"></param>
            <param name="closeStream">True caso a stream seja fechada quando a operação finalizar.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Formatters.CompactBinaryFormatter.Deserialize(System.IO.Stream,System.String,System.Boolean,Colosoft.Runtime.MemoryManager)">
            <summary>
            Deserializa os dados da stream em um objeto.
            </summary>
            <param name="stream">Stream onde os dados estão armazenados.</param>
            <param name="cacheContext"></param>
            <param name="closeStream">True caso a stream seja fechada quando a operação finalizar.</param>
            <param name="memManager">Gerenciador de memória que será utilizado na operação.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Formatters.CompactBinaryFormatter.FromByteBuffer(System.Byte[],System.String)">
            <summary>
            Recupera um instancia a partir dos dados serializados no buffer informado.
            </summary>
            <param name="buffer"></param>
            <param name="cacheContext"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Formatters.CompactBinaryFormatter.Serialize(Colosoft.Serialization.IO.CompactBinaryWriter,System.Object,System.String)">
            <summary>
            Serializa a instancia no escritor.
            </summary>
            <param name="writer">Escritor onde os dados serão salvos.</param>
            <param name="graph">Instancia que será serializada.</param>
            <param name="cacheContext"></param>
        </member>
        <member name="M:Colosoft.Serialization.Formatters.CompactBinaryFormatter.Serialize(System.IO.Stream,System.Object,System.String)">
            <summary>
            Serializa a instancia na stream.
            </summary>
            <param name="stream">Stream onde os dados serão salvos.</param>
            <param name="graph">Instancia que será serializada.</param>
            <param name="cacheContext"></param>
        </member>
        <member name="M:Colosoft.Serialization.Formatters.CompactBinaryFormatter.Serialize(System.IO.Stream,System.Object,System.String,System.Boolean)">
            <summary>
            Serializa a instancia na stream.
            </summary>
            <param name="stream">Stream onde os dados serão salvos.</param>
            <param name="graph">Instancia que será serializada.</param>
            <param name="cacheContext"></param>
            <param name="closeStream">True caso deseja que a stream seja fechada no final a operação.</param>
        </member>
        <member name="M:Colosoft.Serialization.Formatters.CompactBinaryFormatter.Serialize(System.IO.Stream,System.Object,System.String,System.Boolean,Colosoft.Runtime.MemoryManager)">
            <summary>
            Serializa a instancia na stream.
            </summary>
            <param name="stream">Stream onde os dados serão salvos.</param>
            <param name="graph">Instancia que será serializada.</param>
            <param name="cacheContext"></param>
            <param name="closeStream">True caso deseja que a stream seja fechada no final a operação.</param>
            <param name="objManager"></param>
        </member>
        <member name="M:Colosoft.Serialization.Formatters.CompactBinaryFormatter.ToByteBuffer(System.Object,System.String)">
            <summary>
            Serializa a instancia informada e recupera um buffer com os dados.
            </summary>
            <param name="graph"></param>
            <param name="cacheContext"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Serialization.ICustomSerializable">
            <summary>
            Assinatura das classe que implementam uma serialização
            customizada.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.ICustomSerializable.DeserializeLocal(System.IO.BinaryReader)">
            <summary>
            Deserializa os dados.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Colosoft.Serialization.ICustomSerializable.SerializeLocal(System.IO.BinaryWriter)">
            <summary>
            Serializa os dados.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Colosoft.Serialization.IO.CompactBinaryReader">
            <summary>
            Implementação do leitor compacto para estruturas binárias.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.IO.CompactReader">
            <summary>
            Representa um letira de dados compacto.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Realiza a leitura dos dados que estão no buffer informado.
            </summary>
            <param name="buffer">Buffer de onde os dados serão lidos.</param>
            <param name="index">Indice inicial de onde os dados serão lidos.</param>
            <param name="count">Quantidade de bytes que serão lidos.</param>
            <returns>Quantidade de bytes lidos.</returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Realiza a leitura dos dados que estão no buffer informado.
            </summary>
            <param name="buffer">Buffer de onde os dados serão lidos.</param>
            <param name="index">Indice inicial de onde os dados serão lidos.</param>
            <param name="count">Quantidade de chars que serão lidos.</param>
            <returns>Quantidade de chars lidos.</returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadBoolean">
            <summary>
            Lê um valor <see cref="T:System.Boolean"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadByte">
            <summary>
            Lê um <see cref="T:System.Byte"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadBytes(System.Int32)">
            <summary>
            Lê a quantidade de bytes informada.
            </summary>
            <param name="count">Quantidade de bytes que serão lidos.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadChar">
            <summary>
            Lê um <see cref="T:System.Char"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadChars(System.Int32)">
            <summary>
            Lê a quantidade de <see cref="T:System.Char"/> informada.
            </summary>
            <param name="count">Quantidade de <see cref="T:System.Char"/> que serão lidas.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadDateTime">
            <summary>
            Lê um <see cref="T:System.DateTime"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadDateTimeOffset">
            <summary>
            Lê um <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadTimeSpan">
            <summary>
            Lê um <see cref="T:System.TimeSpan"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadDecimal">
            <summary>
            Lê um <see cref="T:System.Decimal"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadDouble">
            <summary>
            Lê um <see cref="T:System.Double"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadGuid">
            <summary>
            Lê um <see cref="T:System.Guid"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadInt16">
            <summary>
            Lê um <see cref="T:System.Int16"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadInt32">
            <summary>
            Lê um <see cref="T:System.Int32"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadInt64">
            <summary>
            Lê um <see cref="T:System.Int64"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadObject">
            <summary>
            Lê um <see cref="T:System.Object"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadObjectAs``1">
            <summary>
            Lê um objeto do tipo informado.
            </summary>
            <typeparam name="T">Tipo que será deserializado.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadObjectAs(System.Type)">
            <summary>
            Lê um objeto do tipo informado.
            </summary>
            <param name="type">Tipo que será deserializado.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadSByte">
            <summary>
            Lê um <see cref="T:System.SByte"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadSingle">
            <summary>
            Lê um <see cref="T:System.Single"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadString">
            <summary>
            Lê um <see cref="T:System.String"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadUInt16">
            <summary>
            Lê um <see cref="T:System.UInt16"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadUInt32">
            <summary>
            Lê um <see cref="T:System.UInt32"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.ReadUInt64">
            <summary>
            Lê um <see cref="T:System.UInt64"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.Read(System.Type)">
            <summary>
            Lê os dados do tipo informado.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.Skip(System.Type)">
            <summary>
            Lê os dados do tipo informado.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipBoolean">
            <summary>
            Salta um <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipByte">
            <summary>
            Salta um <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipBytes(System.Int32)">
            <summary>
            Salta a quantidade de bytes informada.
            </summary>
            <param name="count">Quantidade de bytes que serão saltados.</param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipChar">
            <summary>
            Salta um <see cref="T:System.Char"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipChars(System.Int32)">
            <summary>
            Salta a quantidade de <see cref="T:System.Char"/> informada.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipDateTime">
            <summary>
            Salta um <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipDateTimeOffset">
            <summary>
            Salta um <see cref="T:System.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipTimeSpan">
            <summary>
            Salta um <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipDecimal">
            <summary>
            Salta um <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipDouble">
            <summary>
            Salta um <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipGuid">
            <summary>
            Salta um <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipInt16">
            <summary>
            Salta um <see cref="T:System.Int16"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipInt32">
            <summary>
            Salta um <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipInt64">
            <summary>
            Salta um <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipObject">
            <summary>
            Salta um <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipObjectAs``1">
            <summary>
            Salta um objeto do tipo informado.
            </summary>
            <typeparam name="T">Tipo que será usado para saltar.</typeparam>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipObjectAs(System.Type)">
            <summary>
            Salta um objeto do tipo informado.
            </summary>
            <param name="type">Tipo que será usado para saltar.</param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipSByte">
            <summary>
            Salva um <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipSingle">
            <summary>
            Salta um <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipString">
            <summary>
            Salta um <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipUInt16">
            <summary>
            Salta um <see cref="T:System.UInt16"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipUInt32">
            <summary>
            Salta um <see cref="T:System.UInt32"/>
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactReader.SkipUInt64">
            <summary>
            Salta um <see cref="T:System.UInt64"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.#ctor(System.IO.Stream)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="input">Instancia do stream que será usado com base.</param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="input">Instancia do stream que será usado com base.</param>
            <param name="encoding">Enconding que será usado na gravação.</param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadBoolean">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadByte">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadBytes(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadChar">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadChars(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadDateTime">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadDateTimeOffset">
            <summary>
            Lê um <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadTimeSpan">
            <summary>
            Lê um <see cref="T:System.TimeSpan"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadDecimal">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadDouble">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadGuid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadInt16">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadInt32">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadInt64">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadObject">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadObjectAs``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadObjectAs(System.Type)">
            <summary>
            Lê um objeto do tipo informado.
            </summary>
            <param name="type">Tipo que será deserializado.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadSByte">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadSingle">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadUInt16">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadUInt32">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.ReadUInt64">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.IfSkip(System.Object,System.Object)">
            <summary>
            Verifica se o valor lido é um substituto identificando salto.
            </summary>
            <param name="readObjectValue"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipBoolean">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipByte">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipBytes(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipChar">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipChars(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipDateTime">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipDateTimeOffset">
            <summary>
            Salta um <see cref="T:System.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipTimeSpan">
            <summary>
            Salta um <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipDecimal">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipDouble">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipGuid">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipInt16">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipInt32">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipInt64">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipObjectAs``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipObjectAs(System.Type)">
            <summary>
            Salta um objeto do tipo informado.
            </summary>
            <param name="type">Tipo que será usado para saltar.</param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipSByte">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipSingle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipUInt16">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipUInt32">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.SkipUInt64">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryReader.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="closeStream">True para libera fechando a stream associada.</param>
        </member>
        <member name="P:Colosoft.Serialization.IO.CompactBinaryReader.BaseReader">
            <summary>
            Leitor base.
            </summary>
        </member>
        <member name="P:Colosoft.Serialization.IO.CompactBinaryReader.CacheContext">
            <summary>
            Nome do contexto associado.
            </summary>
        </member>
        <member name="P:Colosoft.Serialization.IO.CompactBinaryReader.Context">
            <summary>
            Contexto ser serialização.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.IO.CompactBinaryWriter">
            <summary>
            Implementação do escritor binário compacto.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.IO.CompactWriter">
            <summary>
            Representa um classe de escrita compacta.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.Boolean)">
            <summary>
            Esvreve um <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.Byte)">
            <summary>
            Escreve um <see cref="T:System.Byte"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.Char)">
            <summary>
            Escreve um <see cref="T:System.Char"/>.
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.DateTime)">
            <summary>
            Escreve um <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.DateTimeOffset)">
            <summary>
            Escreve um <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.TimeSpan)">
            <summary>
            Escreve um <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.Decimal)">
            <summary>
            Escreve um <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.Double)">
            <summary>
            Escreve um <see cref="T:System.Double"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.Int16)">
            <summary>
            Escreve um <see cref="T:System.Int16"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.Int32)">
            <summary>
            Escreve um <see cref="T:System.Int32"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.Int64)">
            <summary>
            Escreve um <see cref="T:System.Int64"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.Single)">
            <summary>
            Escreve um <see cref="T:System.Single"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.Byte[])">
            <summary>
            Escreve o buffer informado.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.Guid)">
            <summary>
            Escreve um <see cref="T:System.Guid"/>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.SByte)">
            <summary>
            Escreve um <see cref="T:System.SByte"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.Char[])">
            <summary>
            Escreve um <see cref="T:System.Char"/>.
            </summary>
            <param name="chars"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.String)">
            <summary>
            Escreve um <see cref="T:System.String"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.UInt16)">
            <summary>
            Escreve um <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.UInt32)">
            <summary>
            Escreve um <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.UInt64)">
            <summary>
            Escreve um <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.Type,System.Object)">
            <summary>
            Escreve o valor do tipo informado.
            </summary>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Escreve o buffer informado.
            </summary>
            <param name="buffer">Buffer onde estão os dados que serão escritos.</param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Escreve o buffer informado.
            </summary>
            <param name="chars"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.WriteObject(System.Object)">
            <summary>
            Escreve o objeto informado.
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.WriteObjectAs``1(``0)">
            <summary>
            Escreve o objeto do tipo informado.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="graph"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactWriter.WriteObjectAs(System.Type,System.Object)">
            <summary>
            Escreve o objeto do tipo informado.
            </summary>
            <param name="type"></param>
            <param name="graph"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.#ctor(System.IO.Stream)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="output">Stream base para a instancia.</param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="output">Stream base para a instancia.</param>
            <param name="encoding"><see cref="T:System.Text.Encoding"/> que será usado na serialização.</param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.Byte)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.Char)">
            <summary>
            
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.DateTime)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.DateTimeOffset)">
            <summary>
            Escreve um <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.TimeSpan)">
            <summary>
            Escreve um <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.Decimal)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.Int16)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.Int64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.Single)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.Guid)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.SByte)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.UInt32)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.Char[])">
            <summary>
            
            </summary>
            <param name="chars"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.UInt16)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.UInt64)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="chars"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.WriteObject(System.Object)">
            <summary>
            
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.WriteObjectAs``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="graph"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.WriteObjectAs(System.Type,System.Object)">
            <summary>
            Escreve o objeto do tipo informado.
            </summary>
            <param name="type"></param>
            <param name="graph"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactBinaryWriter.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="closeStream">True para fecha a stream quando a instancia for liberada.</param>
        </member>
        <member name="P:Colosoft.Serialization.IO.CompactBinaryWriter.BaseWriter">
            <summary>
            Escritor base.
            </summary>
        </member>
        <member name="P:Colosoft.Serialization.IO.CompactBinaryWriter.CacheContext">
            <summary>
            Nome do contexto do cache.
            </summary>
        </member>
        <member name="P:Colosoft.Serialization.IO.CompactBinaryWriter.Context">
            <summary>
            Contexto de serialização.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.IO.CompactSerializationException">
            <summary>
            Representa os exceptions da parte de serialização compacta.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactSerializationException.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactSerializationException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Colosoft.Serialization.IO.CompactSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construtor usado pela serialização.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Colosoft.Serialization.IO.SerializationContext">
            <summary>
            Representa um contexto de serialização.
            </summary>
        </member>
        <member name="F:Colosoft.Serialization.IO.SerializationContext.INVALID_COOKIE">
            <summary>
            Identifica um cookie inválido.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IO.SerializationContext.GetCookie(System.Object)">
            <summary>
            Recupera o número do cookie associado com o objeto informado.
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.SerializationContext.GetObject(System.Int32)">
            <summary>
            Recupera o objeto pelo número do cookie informado.
            </summary>
            <param name="key">Chave do cookie associado com objeto.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.IO.SerializationContext.RememberObject(System.Object)">
            <summary>
            Registra o objeto para ser relembrado.
            </summary>
            <param name="graph">Instancia que será gerenciada.</param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Serialization.IO.SerializationContext.CacheContext">
            <summary>
            Nome do contexto.
            </summary>
        </member>
        <member name="P:Colosoft.Serialization.IO.SerializationContext.MemManager">
            <summary>
            Gerenciador de memória associado.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.IStreamItem">
            <summary>
            Representa um item de stream.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.IStreamItem.Read(System.Int32,System.Int32)">
            <summary>
            Lê os dados do item.
            </summary>
            <param name="offset">Offset para recupera os dados.</param>
            <param name="length">Quantidade de dados que serão recuperados.</param>
            <returns>Dados lidos.</returns>
        </member>
        <member name="M:Colosoft.Serialization.IStreamItem.Write(Colosoft.Serialization.VirtualArray,System.Int32,System.Int32,System.Int32)">
            <summary>
            Escreve o buffer no item.
            </summary>
            <param name="buffer">buffer com os dados que serão inseridos.</param>
            <param name="srcOffset">Offset da origem dom buffer.</param>
            <param name="dstOffset">Offset de destino.</param>
            <param name="length">Quantidade de dados que serão escritors</param>
        </member>
        <member name="P:Colosoft.Serialization.IStreamItem.Length">
            <summary>
            Tamanho dos dados no stream.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.ArraySerializationSurrogate">
            <summary>
            Implementação do substituto de serialização para um vetor.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.ContextSensitiveSerializationSurrogate">
            <summary>
            Representa um substituto de serialização sensivel ao contexto.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.SerializationSurrogate">
            <summary>
            Implementação básica do substituto de serialização.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.ISerializationSurrogate">
            <summary>
            Representa um substituto de serialização.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ISerializationSurrogate.Read(Colosoft.Serialization.IO.CompactBinaryReader)">
            <summary>
            Recupera a instancia de um objeto contido no leitor informado.
            </summary>
            <param name="reader">Leitor onde estão os dados.</param>
            <returns>Instancia do objeto recuperado.</returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ISerializationSurrogate.Skip(Colosoft.Serialization.IO.CompactBinaryReader)">
            <summary>
            Salva os dados do objeto do leitor informado.
            </summary>
            <param name="reader">Leitor onde estão os dados.</param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ISerializationSurrogate.Write(Colosoft.Serialization.IO.CompactBinaryWriter,System.Object)">
            <summary>
            Salva os dados do objeto no escritor informado.
            </summary>
            <param name="writer"></param>
            <param name="graph">Instancia que será registrada no escritor.</param>
        </member>
        <member name="P:Colosoft.Serialization.Surrogates.ISerializationSurrogate.ActualType">
            <summary>
            Tipo atual associado.
            </summary>
        </member>
        <member name="P:Colosoft.Serialization.Surrogates.ISerializationSurrogate.SubTypeHandle">
            <summary>
            Identificador do manipulador do sub-tipo.
            </summary>
        </member>
        <member name="P:Colosoft.Serialization.Surrogates.ISerializationSurrogate.TypeHandle">
            <summary>
            Identificador do manipulador do tipo.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.SerializationSurrogate.#ctor(System.Type)">
            <summary>
            Cria uma nova instancia definindo o tipo que será tratado pela instancia.
            </summary>
            <param name="t">Tipo que será trato pela instancia.</param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.SerializationSurrogate.CreateInstance">
            <summary>
            Cria uma instancia do tipo associado.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.SerializationSurrogate.GetInstance(Colosoft.Runtime.MemoryManager)">
            <summary>
            Recupera a instancia associada do gerenciador informado.
            </summary>
            <param name="objManager">Gerenciador de objetos de onde a instancia será recuperada.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.SerializationSurrogate.Read(Colosoft.Serialization.IO.CompactBinaryReader)">
            <summary>
            Recupera a instancia de um objeto contido no leitor informado.
            </summary>
            <param name="reader">Leitor onde estão os dados.</param>
            <returns>Instancia do objeto recuperado.</returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.SerializationSurrogate.Skip(Colosoft.Serialization.IO.CompactBinaryReader)">
            <summary>
            Salva os dados do objeto do leitor informado.
            </summary>
            <param name="reader">Leitor onde estão os dados.</param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.SerializationSurrogate.Write(Colosoft.Serialization.IO.CompactBinaryWriter,System.Object)">
            <summary>
            Salva os dados do objeto no escritor informado.
            </summary>
            <param name="writer"></param>
            <param name="graph">Instancia que será registrada no escritor.</param>
        </member>
        <member name="P:Colosoft.Serialization.Surrogates.SerializationSurrogate.ActualType">
            <summary>
            Tipo associado.
            </summary>
        </member>
        <member name="P:Colosoft.Serialization.Surrogates.SerializationSurrogate.SubTypeHandle">
            <summary>
            Identificador do manipulador do sub-tipo.
            </summary>
        </member>
        <member name="P:Colosoft.Serialization.Surrogates.SerializationSurrogate.TypeHandle">
            <summary>
            Identificador do manipulador do tipo.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ContextSensitiveSerializationSurrogate.#ctor(System.Type)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="t">Tipo que será utilizado pela instancia.</param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ContextSensitiveSerializationSurrogate.SkipDirect(Colosoft.Serialization.IO.CompactBinaryReader,System.Object)">
            <summary>
            Salta os dados diretamente.
            </summary>
            <param name="reader"></param>
            <param name="graph"></param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ContextSensitiveSerializationSurrogate.WriteDirect(Colosoft.Serialization.IO.CompactBinaryWriter,System.Object)">
            <summary>
            Lê os dados diretamente.
            </summary>
            <param name="writer"></param>
            <param name="graph"></param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ContextSensitiveSerializationSurrogate.ReadDirect(Colosoft.Serialization.IO.CompactBinaryReader,System.Object)">
            <summary>
            Lê os dados diretamente.
            </summary>
            <param name="reader"></param>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ContextSensitiveSerializationSurrogate.Instantiate(Colosoft.Serialization.IO.CompactBinaryReader)">
            <summary>
            Cria um instancia do tipo associado.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ContextSensitiveSerializationSurrogate.Read(Colosoft.Serialization.IO.CompactBinaryReader)">
            <summary>
            Lê os dados do leitor e recupera um instancia preenchida do tipo associado.
            </summary>
            <param name="reader">Leitor onde estão os dados.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ContextSensitiveSerializationSurrogate.Skip(Colosoft.Serialization.IO.CompactBinaryReader)">
            <summary>
            Salva os dados do objeto do leitor informado.
            </summary>
            <param name="reader">Leitor onde estão os dados.</param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ContextSensitiveSerializationSurrogate.Write(Colosoft.Serialization.IO.CompactBinaryWriter,System.Object)">
            <summary>
            Salva os dados do objeto no escritor informado.
            </summary>
            <param name="writer"></param>
            <param name="graph">Instancia que será registrada no escritor.</param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ArraySerializationSurrogate.#ctor(System.Type)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ArraySerializationSurrogate.Instantiate(Colosoft.Serialization.IO.CompactBinaryReader)">
            <summary>
            Cria uma instancia.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ArraySerializationSurrogate.ReadDirect(Colosoft.Serialization.IO.CompactBinaryReader,System.Object)">
            <summary>
            Lê os dados para a instancia diretamente.
            </summary>
            <param name="reader"></param>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ArraySerializationSurrogate.SkipDirect(Colosoft.Serialization.IO.CompactBinaryReader,System.Object)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="graph"></param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ArraySerializationSurrogate.WriteDirect(Colosoft.Serialization.IO.CompactBinaryWriter,System.Object)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="graph"></param>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.BooleanArraySerializationSurrogate">
            <summary>
            Representa o substituto para a serialização de vetores de booleanos.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.BooleanArraySerializationSurrogate.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.BooleanSerializationSurrogate">
            <summary>
            Substituto para serialização de valores booleanos.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.BooleanSerializationSurrogate.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.ByteArraySerializationSurrogate">
            <summary>
            Implementação do substituto para a serialização do vetor de bytes.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ByteArraySerializationSurrogate.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.ByteSerializationSurrogate">
            <summary>
            Implementação do substituto para a serialização de um byte.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.CharArraySerializationSurrogate">
            <summary>
            Implementação do substituto de serialização do vetor de <see cref="T:System.Char"/>
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.CharSerializationSurrogate">
            <summary>
            Implementação do substituto de serialização de um <see cref="T:System.Char"/>
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.CustomArraySerializationSurrogate">
            <summary>
            Implementação do substituto de serialização para um vetor customizado.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.CustomArraySerializationSurrogate.#ctor(System.Type)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.CustomArraySerializationSurrogate.Instantiate(Colosoft.Serialization.IO.CompactBinaryReader)">
            <summary>
            Cria uma instancia do tipo.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.CustomArraySerializationSurrogate.ReadDirect(Colosoft.Serialization.IO.CompactBinaryReader,System.Object)">
            <summary>
            Lê os dados diretamente para a instancia informada.
            </summary>
            <param name="reader"></param>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.CustomArraySerializationSurrogate.SkipDirect(Colosoft.Serialization.IO.CompactBinaryReader,System.Object)">
            <summary>
            Salva os dados do tipo.
            </summary>
            <param name="reader"></param>
            <param name="graph"></param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.CustomArraySerializationSurrogate.WriteDirect(Colosoft.Serialization.IO.CompactBinaryWriter,System.Object)">
            <summary>
            Escreve diretamente os dados da instancia no escritor.
            </summary>
            <param name="writer"></param>
            <param name="graph"></param>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.DateTimeArraySerializationSurrogate">
            <summary>
            Implementação do subtituto de serialização para um vetor de <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.DateTimeOffsetSerializationSurrogate">
            <summary>
            Implementação do substituto de serialização para <see cref="T:System.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.DateTimeSerializationSurrogate">
            <summary>
            Implementação do substituto de serialização para <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.DecimalArraySerializationSurrogate">
            <summary>
            Implementação do substituto de serialização do vetor de <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.DecimalSerializationSurrogate">
            <summary>
            Implementação do substituto de serialização de <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.DoubleArraySerializationSurrogate">
            <summary>
            Implementação do substituto de serialização do vetor de <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.DoubleSerializationSurrogate">
            <summary>
            Implementação do substituto de serialização de <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.DynamicRefTypeSurrogate`1">
            <summary>
            Implementação do subtituto de serialização para a referencia de um tipo.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Colosoft.Serialization.Surrogates.DynamicRefTypeSurrogate`1._newMethod">
            <summary>
            Instancia do delegate padrão para o construtor.
            </summary>
        </member>
        <member name="F:Colosoft.Serialization.Surrogates.DynamicRefTypeSurrogate`1._readMethod">
            <summary>
            Delegate do método usado para ler os dados.
            </summary>
        </member>
        <member name="F:Colosoft.Serialization.Surrogates.DynamicRefTypeSurrogate`1._writeMethod">
            <summary>
            Delegate do método usado para escreve os dados.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.DynamicRefTypeSurrogate`1.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.DynamicRefTypeSurrogate`1.#ctor(Colosoft.Serialization.Surrogates.ReadObjectDelegate,Colosoft.Serialization.Surrogates.WriteObjectDelegate)">
            <summary>
            Cria uma instancia com o delegate dos métodos para leitura e escrita dos dados.
            </summary>
            <param name="read">Método usado para fazer a leitura dos dados.</param>
            <param name="write">Método usado para escreve os dados.</param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.DynamicRefTypeSurrogate`1.CommonConstruct">
            <summary>
            Cria o construtor comum.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.DynamicRefTypeSurrogate`1.CreateInstance">
            <summary>
            Cria um nova instancia do tipo.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.DynamicRefTypeSurrogate`1.Read(Colosoft.Serialization.IO.CompactBinaryReader)">
            <summary>
            Recupera uma instancia com base nos dados do leitor informado.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.DynamicRefTypeSurrogate`1.Skip(Colosoft.Serialization.IO.CompactBinaryReader)">
            <summary>
            Salva os dados do tipo.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.DynamicRefTypeSurrogate`1.Write(Colosoft.Serialization.IO.CompactBinaryWriter,System.Object)">
            <summary>
            Escreve os dados da instancia informado no escritor.
            </summary>
            <param name="writer"></param>
            <param name="graph"></param>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.DynamicSurrogateBuilder">
            <summary>
            Classe responsável pela construção de substitutos dinamicos.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.DynamicSurrogateBuilder.CreateReaderDelegate(System.Type)">
            <summary>
            Recupera o delegate do método responsável por lê a instancia do tipo passado.
            </summary>
            <param name="type">Tipo que será lido.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.DynamicSurrogateBuilder.CreateTypeSurrogate(System.Type,System.Collections.Hashtable)">
            <summary>
            Cria um tipo substituto para o tipo informado.
            </summary>
            <param name="type">Tipo que será criado para substituir.</param>
            <param name="attributeOrder">Hash com os atributos ordenados.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.DynamicSurrogateBuilder.GetAllFields(System.Type,System.Collections.Generic.List{System.Reflection.FieldInfo})">
            <summary>
            Recupera todos os campos do tipo informado.
            </summary>
            <param name="type"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.DynamicSurrogateBuilder.EmitReaderMethod(System.Type,System.Reflection.Emit.ILGenerator)">
            <summary>
            Recupera o método de leitura dos dados para o tipo.
            </summary>
            <param name="type"></param>
            <param name="il"></param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.DynamicSurrogateBuilder.EmitPortableReaderMethod(System.Type,System.Reflection.Emit.ILGenerator)">
            <summary>
            Recupera o método de leitura de forma portavel.
            </summary>
            <param name="type"></param>
            <param name="il"></param>
        </member>
        <member name="P:Colosoft.Serialization.Surrogates.DynamicSurrogateBuilder.Portable">
            <summary>
            True identifica se será usado de forma portavel.
            </summary>
        </member>
        <member name="P:Colosoft.Serialization.Surrogates.DynamicSurrogateBuilder.SubTypeHandle">
            <summary>
            Numero do manipulador de subtipo.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.ReadObjectDelegate">
            <summary>
            Representa os métodos usados para lê os dados de uma instancia a partir do leitor informado.
            </summary>
            <param name="reader"></param>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.WriteObjectDelegate">
            <summary>
            Representa os métodos usados para escrever os dados de uma instancia no escritor informado.
            </summary>
            <param name="writer"></param>
            <param name="graph"></param>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.DynamicValueTypeSurrogate`1">
            <summary>
            Classe que serve com base para criação de um substituto dinamico para uma struct.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Colosoft.Serialization.Surrogates.DynamicValueTypeSurrogate`1._newMethod">
            <summary>
            Instancia do delegate padrão para o construtor.
            </summary>
        </member>
        <member name="F:Colosoft.Serialization.Surrogates.DynamicValueTypeSurrogate`1._readMethod">
            <summary>
            Delegate do método usado para ler os dados.
            </summary>
        </member>
        <member name="F:Colosoft.Serialization.Surrogates.DynamicValueTypeSurrogate`1._writeMethod">
            <summary>
            Delegate do método usado para escreve os dados.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.DynamicValueTypeSurrogate`1.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.DynamicValueTypeSurrogate`1.#ctor(Colosoft.Serialization.Surrogates.ReadObjectDelegate,Colosoft.Serialization.Surrogates.WriteObjectDelegate)">
            <summary>
            Cria uma instancia com o delegate dos métodos para leitura e escrita dos dados.
            </summary>
            <param name="read">Método usado para fazer a leitura dos dados.</param>
            <param name="write">Método usado para escreve os dados.</param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.DynamicValueTypeSurrogate`1.CommonConstruct">
            <summary>
            Recupera o construtor comum.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.DynamicValueTypeSurrogate`1.Read(Colosoft.Serialization.IO.CompactBinaryReader)">
            <summary>
            Recupera uma instancia com base nos dados do leitor informado.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.DynamicValueTypeSurrogate`1.Write(Colosoft.Serialization.IO.CompactBinaryWriter,System.Object)">
            <summary>
            Escreve os dados da instancia informado no escritor.
            </summary>
            <param name="writer"></param>
            <param name="graph"></param>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.EnumSerializationSurrogate">
            <summary>
            Implementação do substituto de serialização de enums.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.EOFSerializationSurrogate">
            <summary>
            Implementação do substituto de serialização de EOF (fim de arquivo).
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.EOFSerializationSurrogate.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.EOFSerializationSurrogate.Read(Colosoft.Serialization.IO.CompactBinaryReader)">
            <summary>
            Lê os dados da instancia.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.EOFSerializationSurrogate.Skip(Colosoft.Serialization.IO.CompactBinaryReader)">
            <summary>
            Salva os dados da instancia.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.EOFSerializationSurrogate.Write(Colosoft.Serialization.IO.CompactBinaryWriter,System.Object)">
            <summary>
            Escreve os dados da instancia.
            </summary>
            <param name="writer"></param>
            <param name="graph"></param>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.GenericIDictionarySerializationSurrogate">
            <summary>
            Implementação do substituto de serialização para <see cref="T:System.Collections.IDictionary"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.GenericIDictionarySerializationSurrogate.#ctor(System.Type)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.GenericIListSerializationSurrogate">
            <summary>
            Implementação do substituto de serialização para lista genéricas.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.GenericIListSerializationSurrogate.#ctor(System.Type)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.GuidArraySerializationSurrogate">
            <summary>
            Implementação do substituto de serialização do vetor de <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.GuidSerializationSurrogate">
            <summary>
            Implementação do substituto de serialização de <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.ICompactSerializableSerializationSurrogate">
            <summary>
            Implementação do substituto de serializa para um instancia do tipo <see cref="T:Colosoft.Serialization.ICompactSerializable"/>.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ICompactSerializableSerializationSurrogate.#ctor(System.Type)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ICompactSerializableSerializationSurrogate.Instantiate(Colosoft.Serialization.IO.CompactBinaryReader)">
            <summary>
            Cria uma nova instancia para o objeto.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.IDictionarySerializationSurrogate">
            <summary>
            Implementação do substituto de serialização para <see cref="T:System.Collections.IDictionary"/>.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.IListSerializationSurrogate">
            <summary>
            Implementação do substituto de serialização para <see cref="T:System.Collections.IList"/>.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.Int16ArraySerializationSurrogate">
            <summary>
            Implementação do substituto de serialização para o vetor de <see cref="T:System.Int16"/>.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.Int16SerializationSurrogate">
            <summary>
            Implementação do substituto de serialização para <see cref="T:System.Int16"/>.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.NullSerializationSurrogate">
            <summary>
            Implementação
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.NullSerializationSurrogate.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.ObjectArraySerializationSurrogate">
            <summary>
            Implementação do substituto de serialização para vetor de objetos.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ObjectArraySerializationSurrogate.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ObjectArraySerializationSurrogate.Instantiate(Colosoft.Serialization.IO.CompactBinaryReader)">
            <summary>
            Cria a instancia do tipo associado.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ObjectArraySerializationSurrogate.ReadDirect(Colosoft.Serialization.IO.CompactBinaryReader,System.Object)">
            <summary>
            Lê os dados diretamente.
            </summary>
            <param name="reader"></param>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ObjectArraySerializationSurrogate.SkipDirect(Colosoft.Serialization.IO.CompactBinaryReader,System.Object)">
            <summary>
            Salta os dados do leitor.
            </summary>
            <param name="reader"></param>
            <param name="graph"></param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ObjectArraySerializationSurrogate.WriteDirect(Colosoft.Serialization.IO.CompactBinaryWriter,System.Object)">
            <summary>
            Escreve os dados diretamente.
            </summary>
            <param name="writer"></param>
            <param name="graph"></param>
        </member>
        <member name="F:Colosoft.Serialization.Surrogates.ObjectSerializationSurrogate._formatter">
            <summary>
            Instancia usada para serializar os dados de objetos.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ObjectSerializationSurrogate.#ctor(System.Type)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ObjectSerializationSurrogate.Read(Colosoft.Serialization.IO.CompactBinaryReader)">
            <summary>
            Lê os dados e cria uma instancia preenchida.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ObjectSerializationSurrogate.Skip(Colosoft.Serialization.IO.CompactBinaryReader)">
            <summary>
            Salta os dados do leitor.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.ObjectSerializationSurrogate.Write(Colosoft.Serialization.IO.CompactBinaryWriter,System.Object)">
            <summary>
            Serializa a instancia no escritor informado.
            </summary>
            <param name="writer"></param>
            <param name="graph"></param>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.SkipSerializationSurrogate">
            <summary>
            Implementação do substituto usado para salta a serialização.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.SkipSerializationSurrogate.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.SkipSerializationSurrogate.Read(Colosoft.Serialization.IO.CompactBinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.SkipSerializationSurrogate.Skip(Colosoft.Serialization.IO.CompactBinaryReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.SkipSerializationSurrogate.Write(Colosoft.Serialization.IO.CompactBinaryWriter,System.Object)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="graph"></param>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.DefaultConstructorDelegate">
            <summary>
            Assinatura dos métodos para chamada do construtor padrão de uma instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.SurrogateHelper">
            <summary>
            Classe com métodos que auxiliam os subtitutos de serialização.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.SurrogateHelper.CreateDefaultConstructorDelegate(System.Type)">
            <summary>
            Recupera o delegate para a criação padrão para o tipo.
            </summary>
            <param name="type">Tipo da instancia que será criada.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.SurrogateHelper.CreateGenericType(System.String,System.Type[])">
            <summary>
            Cria uma instancia para o tipo generico informado.
            </summary>
            <param name="name">Nome completo do tipo que será criado.</param>
            <param name="types">Tipos genericos associados.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.SurrogateHelper.CreateGenericTypeInstance(System.Type,System.Type[])">
            <summary>
            Cria uma instancia para o tipo generico informado.
            </summary>
            <param name="genericType">Instancia do tipo generico que será criado.</param>
            <param name="typeParams">Tipos genericos associados.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.Surrogates.SurrogateHelper.EmitDefaultCreatorMethod(System.Type,System.Reflection.Emit.ILGenerator)">
            <summary>
            Emite o método para criador padrão.
            </summary>
            <param name="type"></param>
            <param name="il"></param>
        </member>
        <member name="T:Colosoft.Serialization.Surrogates.TimeSpanSerializationSurrogate">
            <summary>
            Implementação do substituto de serialização para <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.TypeSurrogateSelector">
            <summary>
            Classe responsável pela seleção dos tipos substitutos.
            </summary>
        </member>
        <member name="F:Colosoft.Serialization.TypeSurrogateSelector.CUSTOM_TYPE_RANGE">
            <summary>
            Faixa do identificador do tipos customizados.
            </summary>
        </member>
        <member name="F:Colosoft.Serialization.TypeSurrogateSelector.defaultArraySurrogate">
            <summary>
            Instancia padrão do substituto de serialização de vetores.
            </summary>
        </member>
        <member name="F:Colosoft.Serialization.TypeSurrogateSelector.defaultSurrogate">
            <summary>
            Instancia padrão do substituto de serialização de objetos.
            </summary>
        </member>
        <member name="F:Colosoft.Serialization.TypeSurrogateSelector.typeSurrogateMap">
            <summary>
            Mapa dos tipos substitutos.
            </summary>
        </member>
        <member name="F:Colosoft.Serialization.TypeSurrogateSelector.userTypeHandleSurrogateMap">
            <summary>
            Mapa dos manipuladores dos tipos do usuário.
            </summary>
        </member>
        <member name="F:Colosoft.Serialization.TypeSurrogateSelector.userTypeSurrogateMap">
            <summary>
            Mapa dos substitutos dos tipos do usuário.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.TypeSurrogateSelector.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.TypeSurrogateSelector.GetSurrogateForObject(System.Object,System.String)">
            <summary>
            Recupera o substituto para o objeto informado.
            </summary>
            <param name="graph"></param>
            <param name="cacheContext"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.TypeSurrogateSelector.GetSurrogateForSubTypeHandle(System.Int16,System.Int16,System.String)">
            <summary>
            Recupera o substituto pelo ID do subtipo.
            </summary>
            <param name="handle"></param>
            <param name="subHandle"></param>
            <param name="cacheContext"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.TypeSurrogateSelector.GetSurrogateForType(System.Type,System.String)">
            <summary>
            Recupera o substituto para o tipo informado.
            </summary>
            <param name="type">Tipo associado com o substituto.</param>
            <param name="cacheContext">Contexto que será usado na recuperação.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.TypeSurrogateSelector.GetSurrogateForTypeHandle(System.Int16,System.String)">
            <summary>
            Recupera o substituto para tratar o tipo.
            </summary>
            <param name="handle"></param>
            <param name="cacheContext"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.TypeSurrogateSelector.RegisterBuiltinSurrogates">
            <summary>
            Registra os substitutos nativos.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.TypeSurrogateSelector.RegisterTypeSurrogate(Colosoft.Serialization.Surrogates.ISerializationSurrogate)">
            <summary>
            Registra o substituto no sistema.
            </summary>
            <param name="surrogate">Instancia do substituto que será registrado.</param>
            <returns>True ser o registro foi feito com sucesso.</returns>
        </member>
        <member name="M:Colosoft.Serialization.TypeSurrogateSelector.RegisterTypeSurrogate(Colosoft.Serialization.Surrogates.ISerializationSurrogate,System.Int16)">
            <summary>
            Registra o substituto no sistema.
            </summary>
            <param name="surrogate">Instancia do substituto que será registrado.</param>
            <param name="typehandle">Id do tipo.</param>
            <returns>rue ser o registro foi feito com sucesso.</returns>
        </member>
        <member name="M:Colosoft.Serialization.TypeSurrogateSelector.RegisterTypeSurrogate(Colosoft.Serialization.Surrogates.ISerializationSurrogate,System.Int16,System.String,System.Int16,System.Boolean)">
            <summary>
            Registra um tipo substituto.
            </summary>
            <param name="surrogate">Implementação do substituto.</param>
            <param name="typehandle">Id do tipo.</param>
            <param name="cacheContext">Contexto do cache.</param>
            <param name="subTypeHandle">Id do subtipo.</param>
            <param name="portable">Identifica se é portável.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.TypeSurrogateSelector.UnregisterAllSurrogates">
            <summary>
            Desregistra todos os substitutos.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.TypeSurrogateSelector.UnregisterAllSurrogates(System.String)">
            <summary>
            Remove todos os substitutos no contexto informado.
            </summary>
            <param name="cacheContext"></param>
        </member>
        <member name="M:Colosoft.Serialization.TypeSurrogateSelector.UnregisterTypeSurrogate(Colosoft.Serialization.Surrogates.ISerializationSurrogate)">
            <summary>
            Remove o registro do tipo de substituto.
            </summary>
            <param name="surrogate"></param>
        </member>
        <member name="M:Colosoft.Serialization.TypeSurrogateSelector.UnregisterTypeSurrogate(Colosoft.Serialization.Surrogates.ISerializationSurrogate,System.String)">
            <summary>
            Remove o registro do tipo de substituto.
            </summary>
            <param name="surrogate"></param>
            <param name="cacheContext"></param>
        </member>
        <member name="M:Colosoft.Serialization.TypeSurrogateSelector.UserTypeSurrogateExists(System.Type,System.String)">
            <summary>
            Verifica se existe algum substituto para o tipo do usuário no contexto.
            </summary>
            <param name="type">Tipo que será verificado.</param>
            <param name="cacheContext"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Serialization.VirtualArray">
            <summary>
            Representa um vetor virtual.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.VirtualArray.#ctor(System.Collections.IList)">
            <summary>
            Cria a instancia com os dados do vetor informado.
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Colosoft.Serialization.VirtualArray.#ctor(System.Int64)">
            <summary>
            Cria a instancia já definindo o tamanho inicial.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Colosoft.Serialization.VirtualArray.CopyData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copia o buffer de dados.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.VirtualArray.CopyData(Colosoft.Serialization.VirtualArray,Colosoft.Serialization.VirtualIndex,Colosoft.Serialization.VirtualArray,Colosoft.Serialization.VirtualIndex,System.Int32)">
            <summary>
            Faz uma cópia dos dados do vetor.
            </summary>
            <param name="src"></param>
            <param name="srcIndex"></param>
            <param name="dst"></param>
            <param name="dstIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:Colosoft.Serialization.VirtualArray.CopyData(Colosoft.Serialization.VirtualArray,Colosoft.Serialization.VirtualIndex,Colosoft.Serialization.VirtualArray,Colosoft.Serialization.VirtualIndex,System.Int32,System.Boolean)">
            <summary>
            Faz uma cópia dos dados do vetor.
            </summary>
            <param name="src"></param>
            <param name="srcIndex"></param>
            <param name="dst"></param>
            <param name="dstIndex"></param>
            <param name="count"></param>
            <param name="allowExpantion"></param>
        </member>
        <member name="M:Colosoft.Serialization.VirtualArray.GetValueAt(Colosoft.Serialization.VirtualIndex)">
            <summary>
            Recupera o valor na posição do indice informado.
            </summary>
            <param name="vIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.VirtualArray.SetValueAt(Colosoft.Serialization.VirtualIndex,System.Byte)">
            <summary>
            Define o valor na posição do indice informado.
            </summary>
            <param name="vIndex"></param>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Serialization.VirtualArray.Serialize(Colosoft.Serialization.IO.CompactWriter)">
            <summary>
            Serializa os dados da instancia.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Colosoft.Serialization.VirtualArray.Deserialize(Colosoft.Serialization.IO.CompactReader)">
            <summary>
            Deserializa os dados da instancia.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:Colosoft.Serialization.VirtualArray.BaseArray">
            <summary>
            Vetor base.
            </summary>
        </member>
        <member name="P:Colosoft.Serialization.VirtualArray.Size">
            <summary>
            Tamanho do vetor.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.VirtualIndex">
            <summary>
            Representa um indice virtual.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.VirtualIndex.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.VirtualIndex.#ctor(System.Int32)">
            <summary>
            Cria um instancia já com o valor padrão.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Colosoft.Serialization.VirtualIndex.Clone">
            <summary>
            Cria um clone da instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.VirtualIndex.CompareTo(System.Object)">
            <summary>
            Compara a instancia com outro objeto.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.VirtualIndex.Increment">
            <summary>
            Incrementa o indice.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.VirtualIndex.IncrementBy(System.Int32)">
            <summary>
            Incrementa a quantidade informada.
            </summary>
            <param name="count"></param>
        </member>
        <member name="P:Colosoft.Serialization.VirtualIndex.IndexValue">
            <summary>
            Valor do indice.
            </summary>
        </member>
        <member name="P:Colosoft.Serialization.VirtualIndex.XIndex">
            <summary>
            Valor de X;
            </summary>
        </member>
        <member name="P:Colosoft.Serialization.VirtualIndex.YIndex">
            <summary>
            Valor do Y.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.XmlHelper">
            <summary>
            Classe que auxilia na manipulação de Xml.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.AddXmlAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Adiciona um atributo para o nó informado.
            </summary>
            <param name="node">Instancia do nó onde o atributo será inserido.</param>
            <param name="attrName">Nome do atributo.</param>
            <param name="value">Valor do atributo.</param>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.ArrayOfByteFromXml(System.Xml.XmlReader)">
            <summary>
            Recupera um vetor de bytes do XML.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.ArrayOfByteFromXmlAttribute(System.Xml.XmlReader)">
            <summary>
            Recupera um vetor de bytes do atributo do XML.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.ArrayOfObjectFromXml(System.Xml.XmlReader)">
            <summary>
            Recupera um vetor de objeto do XML.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.EnumFromXmlAttribute(System.Xml.XmlReader,System.Type)">
            <summary>
            Recupera um enum do xml.
            </summary>
            <param name="reader"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.EnumFromXmlElement(System.Xml.XmlReader,System.Type)">
            <summary>
            Recupera o enum do elemento xml.
            </summary>
            <param name="reader"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.EnumToXmlAttribute(System.Xml.XmlWriter,System.String,System.Object,System.Type)">
            <summary>
            Define o valor do enum para o atributo XML.
            </summary>
            <param name="writer"></param>
            <param name="attr"></param>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.EnumToXmlElement(System.Xml.XmlWriter,System.String,System.Object,System.Type)">
            <summary>
            Define o valor do enum para o elemento XML.
            </summary>
            <param name="writer"></param>
            <param name="element"></param>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.GetCachedString(System.String)">
            <summary>
            Recupera a string armazenada no XML.
            </summary>
            <param name="fromXml"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.ObjectFromXmlElement(System.Xml.XmlReader)">
            <summary>
            Recupera um objeto do elemento XML.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.ObjectToXmlElement(System.Xml.XmlWriter,System.String,System.Object)">
            <summary>
            Define um objeto para o elemento XML.
            </summary>
            <param name="writer"></param>
            <param name="element"></param>
            <param name="o"></param>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.StringFromXmlAttribute(System.Xml.XmlReader)">
            <summary>
            Recupera uma string do atributo XML.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.StringFromXmlElement(System.Xml.XmlReader)">
            <summary>
            Recupera uma string do elemento XML.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.StringToXmlAttribute(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Define a string para o atributo xml.
            </summary>
            <param name="writer"></param>
            <param name="attr"></param>
            <param name="str"></param>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.StringToXmlElement(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Define a string para o elemento XML.
            </summary>
            <param name="writer"></param>
            <param name="element"></param>
            <param name="str"></param>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.ToDateOnly(System.String)">
            <summary>
            Converter a string contendo a data para DateTime.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.ToDateTime(System.String)">
            <summary>
            Converter a string cpara DateTime.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.ToString(System.DateTime)">
            <summary>
            Recupera a string a partir do DateTime.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.ToString(System.Uri)">
            <summary>
            Recupera a string da URI.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.ToStringDateOnly(System.DateTime)">
            <summary>
            Converte um DateTime para uma string.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.ToUri(System.String)">
            <summary>
            Converte o string para um Uri.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.ToXml(System.Xml.XmlWriter,System.String,System.Byte[])">
            <summary>
            Converte o vetor de bytes para um elemento xml.
            </summary>
            <param name="writer"></param>
            <param name="element"></param>
            <param name="array"></param>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.ToXml(System.Xml.XmlWriter,System.String,System.Object[])">
            <summary>
            Converte o vetor de objetos para um elemento xml.
            </summary>
            <param name="writer"></param>
            <param name="element"></param>
            <param name="array"></param>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.ToXmlAttribute(System.Xml.XmlWriter,System.String,System.Byte[])">
            <summary>
            Define o vetor de bytes para o atributo XML.
            </summary>
            <param name="writer"></param>
            <param name="attr"></param>
            <param name="array"></param>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.ToXmlElement(System.Xml.XmlWriter,System.String,System.Xml.XmlNode)">
            <summary>
            Converte o nó em um elemento XML.
            </summary>
            <param name="writer"></param>
            <param name="elementName"></param>
            <param name="node"></param>
        </member>
        <member name="M:Colosoft.Serialization.XmlHelper.XmlNodeFromXmlElement(System.Xml.XmlReader)">
            <summary>
            Recupera o nó xml do elemento XML.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Serialization.XmlHelper.ZeroLengthArrayOfByte">
            <summary>
            Representa um vetor vazio.
            </summary>
        </member>
        <member name="T:Colosoft.Serialization.XmlNoNamespaceWriter">
            <summary>
            Modified XML writer that writes (almost) no namespaces out with pretty formatting
            http://blogs.msdn.com/b/kaevans/archive/2004/08/02/206432.aspx
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.XmlNoNamespaceWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Colosoft.Serialization.XmlNoNamespaceWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            Escreve o inicio do elemento.
            </summary>
            <param name="prefix"></param>
            <param name="localName"></param>
            <param name="ns"></param>
        </member>
        <member name="M:Colosoft.Serialization.XmlNoNamespaceWriter.WriteStartAttribute(System.String,System.String,System.String)">
            <summary>
            Escreve o início do atributo;.
            </summary>
            <param name="prefix"></param>
            <param name="localName"></param>
            <param name="ns"></param>
        </member>
        <member name="M:Colosoft.Serialization.XmlNoNamespaceWriter.WriteString(System.String)">
            <summary>
            Escreve o texto.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Colosoft.Serialization.XmlNoNamespaceWriter.WriteEndAttribute">
            <summary>
            Escreve o fin do atributo.
            </summary>
        </member>
        <member name="M:Colosoft.Serialization.XmlNoNamespaceWriter.WriteQualifiedName(System.String,System.String)">
            <summary>
            Escreve o nome qualificado.
            </summary>
            <param name="localName"></param>
            <param name="ns"></param>
        </member>
        <member name="T:Colosoft.ServerData">
            <summary>
            Recupera dados do servidor
            </summary>
        </member>
        <member name="M:Colosoft.ServerData.GetDateTime">
            <summary>
            Recupera data e hora do servidor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ServerData.GetDateTimeOffSet">
            <summary>
            Recupera data, hora e offset
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ServerData.GetDate">
            <summary>
            Recupera data
            </summary>
            <returns></returns>
        </member>
        <member name="T:Colosoft.ServiceLocatorValidator">
            <summary>
            Validador do <see cref="T:Microsoft.Practices.ServiceLocation.ServiceLocator"/>.
            </summary>
        </member>
        <member name="M:Colosoft.ServiceLocatorValidator.Validate">
            <summary>
            Verifica se o <see cref="T:Microsoft.Practices.ServiceLocation.ServiceLocator"/> é valido.
            Caso contrário dispara uma exception.
            </summary>
        </member>
        <member name="T:Colosoft.SystemConfigurationExtensions">
            <summary>
            Classe com métodos para auxiliar na leitura da configuração do sistema.
            </summary>
        </member>
        <member name="M:Colosoft.SystemConfigurationExtensions.Get(Colosoft.Configuration.ISystemConfiguration,System.String,System.Int32)">
            <summary>
            Recupera o valor da configuração no caminho informado.
            </summary>
            <param name="configuration">Instancia da configuração do sistema.</param>
            <param name="path">Caminho com os dados da configuração.</param>
            <param name="defaultValue">Valor padrão caso não tenho recupera o valor.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.SystemConfigurationExtensions.Get(Colosoft.Configuration.ISystemConfiguration,System.String,System.Int16)">
            <summary>
            Recupera o valor da configuração no caminho informado.
            </summary>
            <param name="configuration">Instancia da configuração do sistema.</param>
            <param name="path">Caminho com os dados da configuração.</param>
            <param name="defaultValue">Valor padrão caso não tenho recupera o valor.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.SystemConfigurationExtensions.Get(Colosoft.Configuration.ISystemConfiguration,System.String,System.Int64)">
            <summary>
            Recupera o valor da configuração no caminho informado.
            </summary>
            <param name="configuration">Instancia da configuração do sistema.</param>
            <param name="path">Caminho com os dados da configuração.</param>
            <param name="defaultValue">Valor padrão caso não tenho recupera o valor.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.SystemConfigurationExtensions.Get(Colosoft.Configuration.ISystemConfiguration,System.String,System.Boolean)">
            <summary>
            Recupera o valor da configuração no caminho informado.
            </summary>
            <param name="configuration">Instancia da configuração do sistema.</param>
            <param name="path">Caminho com os dados da configuração.</param>
            <param name="defaultValue">Valor padrão caso não tenho recupera o valor.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.SystemConfigurationExtensions.Get(Colosoft.Configuration.ISystemConfiguration,System.String,System.DateTime,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Recupera o valor da configuração no caminho informado.
            </summary>
            <param name="configuration">Instancia da configuração do sistema.</param>
            <param name="path">Caminho com os dados da configuração.</param>
            <param name="defaultValue">Valor padrão caso não tenho recupera o valor.</param>
            <param name="provider">Provedor de formatação.</param>
            <param name="style">Estilo da tada.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.SystemConfigurationExtensions.Get(Colosoft.Configuration.ISystemConfiguration,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Recupera o valor da configuração no caminho informado.
            </summary>
            <param name="configuration">Instancia da configuração do sistema.</param>
            <param name="path">Caminho com os dados da configuração.</param>
            <param name="provider">Provedor de formatação.</param>
            <param name="style">Estilo da tada.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.SystemConfigurationExtensions.Get(Colosoft.Configuration.ISystemConfiguration,System.String,System.Double,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Recupera o valor da configuração no caminho informado.
            </summary>
            <param name="configuration">Instancia da configuração do sistema.</param>
            <param name="path">Caminho com os dados da configuração.</param>
            <param name="defaultValue">Valor padrão caso não tenho recupera o valor.</param>
            <param name="style">Estilo numérico do valor.</param>
            <param name="provider">Cultura que será usada na conversão.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.SystemConfigurationExtensions.Get(Colosoft.Configuration.ISystemConfiguration,System.String,System.Single,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Recupera o valor da configuração no caminho informado.
            </summary>
            <param name="configuration">Instancia da configuração do sistema.</param>
            <param name="path">Caminho com os dados da configuração.</param>
            <param name="defaultValue">Valor padrão caso não tenho recupera o valor.</param>
            <param name="style">Estilo numérico do valor.</param>
            <param name="provider">Cultura que será usada na conversão.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.SystemConfigurationExtensions.Get(Colosoft.Configuration.ISystemConfiguration,System.String,System.Decimal,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Recupera o valor da configuração no caminho informado.
            </summary>
            <param name="configuration">Instancia da configuração do sistema.</param>
            <param name="path">Caminho com os dados da configuração.</param>
            <param name="defaultValue">Valor padrão caso não tenho recupera o valor.</param>
            <param name="style">Estilo numérico do valor.</param>
            <param name="provider">Cultura que será usada na conversão.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.SystemConfigurationExtensions.Get(Colosoft.Configuration.ISystemConfiguration,System.String)">
            <summary>
            Recupera o valor da configuração no caminho informado.
            </summary>
            <param name="configuration">Instancia da configuração do sistema.</param>
            <param name="path">Caminho com os dados da configuração.</param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Text.CultureAwareComparer">
            <summary>
            Implementação do comparador que ignora cultura.
            </summary>
        </member>
        <member name="T:Colosoft.Text.MessageFormattableComparer">
            <summary>
            Classe usada na compara das mensagens formatáveis.
            </summary>
        </member>
        <member name="M:Colosoft.Text.MessageFormattableComparer.#cctor">
            <summary>
            Construtor geral.
            </summary>
        </member>
        <member name="M:Colosoft.Text.MessageFormattableComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Cria uma instancia do comparador usando a cultura informada.
            </summary>
            <param name="culture"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.MessageFormattableComparer.Equals(System.Object,System.Object)">
            <summary>
            Verifica se as instancias informadas são iguais.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.MessageFormattableComparer.Equals(Colosoft.IMessageFormattable,Colosoft.IMessageFormattable)">
            <summary>
            Verifica se as instancias informadas são iguais.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.MessageFormattableComparer.Compare(System.Object,System.Object)">
            <summary>
            Compara os objetos informados
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.MessageFormattableComparer.Compare(Colosoft.IMessageFormattable,Colosoft.IMessageFormattable)">
            <summary>
            Compara as insntancias informadas.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.MessageFormattableComparer.GetHashCode(System.Object)">
            <summary>
            Recupera o hashcode do objeto informado.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.MessageFormattableComparer.GetHashCode(Colosoft.IMessageFormattable)">
            <summary>
            Recupera o Hashcode da instancia informada.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Text.MessageFormattableComparer.CurrentCulture">
            <summary>
            Comparador da cultura atual.
            </summary>
        </member>
        <member name="P:Colosoft.Text.MessageFormattableComparer.CurrentCultureIgnoreCase">
            <summary>
            Comparador da cultura atual, com ignore case.
            </summary>
        </member>
        <member name="P:Colosoft.Text.MessageFormattableComparer.InvariantCulture">
            <summary>
            Comparador invariante de cultura.
            </summary>
        </member>
        <member name="P:Colosoft.Text.MessageFormattableComparer.InvariantCultureIgnoreCase">
            <summary>
            Comparador invariante de cultura com ignore case.
            </summary>
        </member>
        <member name="P:Colosoft.Text.MessageFormattableComparer.Ordinal">
            <summary>
            Comparador ordinal.
            </summary>
        </member>
        <member name="P:Colosoft.Text.MessageFormattableComparer.OrdinalIgnoreCase">
            <summary>
            Comparador ordinal com ignore case.
            </summary>
        </member>
        <member name="M:Colosoft.Text.CultureAwareComparer.#ctor(System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="culture"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:Colosoft.Text.CultureAwareComparer.Compare(Colosoft.IMessageFormattable,Colosoft.IMessageFormattable)">
            <summary>
            Compara as instancias informadas.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.CultureAwareComparer.Equals(System.Object)">
            <summary>
            Verifica se a instancia é equivalente a atual.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.CultureAwareComparer.Equals(Colosoft.IMessageFormattable,Colosoft.IMessageFormattable)">
            <summary>
            Compara as instancias informadas.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.CultureAwareComparer.GetHashCode">
            <summary>
            Recupera o hashcode da instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.CultureAwareComparer.GetHashCode(Colosoft.IMessageFormattable)">
            <summary>
            Recupera o hashcode da mensagem inforamda.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Text.Encoding">
            <summary>
            Classe que fornece os encodings que podem ser usados no sistema.
            </summary>
        </member>
        <member name="P:Colosoft.Text.Encoding.Default">
            <summary>
            Encoding padrão do sistema.
            </summary>
        </member>
        <member name="T:Colosoft.Text.JoinMessageFormattable">
            <summary>
            Implementação da junção de mensagens.
            </summary>
        </member>
        <member name="M:Colosoft.Text.JoinMessageFormattable.#ctor(Colosoft.IMessageFormattable,System.String,Colosoft.IMessageFormattable)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="leftMessage">Instancia da mensagem a esquerda.</param>
            <param name="separator">Seperador da mensagem.</param>
            <param name="rightMessage">Instancia da mensagem da direita.</param>
        </member>
        <member name="M:Colosoft.Text.JoinMessageFormattable.Format">
            <summary>
            Formata a mensagem.
            </summary>
            <returns>Texto da mensagem formatada.</returns>
        </member>
        <member name="M:Colosoft.Text.JoinMessageFormattable.Format(System.Globalization.CultureInfo)">
            <summary>
            Formata a mensagem na cultura informada.
            </summary>
            <param name="culture">Cultura que será usada na formatação.</param>
            <returns>Texto da mensagem formatada.</returns>
        </member>
        <member name="M:Colosoft.Text.JoinMessageFormattable.Format(System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Formata a mensagem na cultura informada usando os parametros.
            </summary>
            <param name="culture">Cultura que será usada na formatação.</param>
            <param name="parameters">Parametros que serão usados na formatação.</param>
            <returns>Texto da mensagem formatada.</returns>
        </member>
        <member name="M:Colosoft.Text.JoinMessageFormattable.Join(System.String,Colosoft.IMessageFormattable)">
            <summary>
            Junta a mensagem com outra.
            </summary>
            <param name="separator">Separador que será usado.</param>
            <param name="message">Mensagem que será anexada.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.JoinMessageFormattable.Matches(System.Globalization.CultureInfo)">
            <summary>
            Retorna um valor indicando se a linguagem da descrição 
            da suporte a cultura informada.
            </summary>
            <param name="culture">Instancia da cultura que será comparado com a linguagem da mensagem.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.JoinMessageFormattable.Equals(Colosoft.IMessageFormattable)">
            <summary>
            Verifica se é igual a instancia informada.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.JoinMessageFormattable.Clone">
            <summary>
            Clona os dados da instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Text.OrdinalComparer">
            <summary>
            Implementação do comparador Oridinal das mensagens formatáveis.
            </summary>
        </member>
        <member name="M:Colosoft.Text.OrdinalComparer.#ctor(System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="culture"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:Colosoft.Text.OrdinalComparer.Compare(Colosoft.IMessageFormattable,Colosoft.IMessageFormattable)">
            <summary>
            Compar as instancias informadas.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.OrdinalComparer.Equals(System.Object)">
            <summary>
            Verifica se é a mesma instancia do comparador.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.OrdinalComparer.Equals(Colosoft.IMessageFormattable,Colosoft.IMessageFormattable)">
            <summary>
            Verifica se as instancias informadas são iguais.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.OrdinalComparer.GetHashCode">
            <summary>
            Recupera o hashcode do comparador.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.OrdinalComparer.GetHashCode(Colosoft.IMessageFormattable)">
            <summary>
            Recupera o hashcode da mensagem informada.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Text.StringEqualityComparer">
            <summary>
            Implementação do comparador de string.
            </summary>
        </member>
        <member name="M:Colosoft.Text.StringEqualityComparer.GetComparer(System.StringComparison)">
            <summary>
            Recupera o comparador.
            </summary>
            <param name="comparison"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.StringEqualityComparer.#ctor(System.StringComparison)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="comparison"></param>
        </member>
        <member name="M:Colosoft.Text.StringEqualityComparer.Equals(System.String,System.String)">
            <summary>
            Compara as duas instancias.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.StringEqualityComparer.GetHashCode(System.String)">
            <summary>
            Recupera o HashCode da instancia informada.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Text.StringEqualityComparer.Comparison">
            <summary>
            Tipo de comparação utilizado.
            </summary>
        </member>
        <member name="T:Colosoft.Text.StringExtensions">
            <summary>
            Extensões para strings.
            </summary>
        </member>
        <member name="M:Colosoft.Text.StringExtensions.NormalizeStringForUrl(System.String)">
            <summary>
            Normaliza a string para uma url.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.StringExtensions.DelimitWith``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Joins the specified items into a string separated by the specified separator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="separator">The separator.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.StringExtensions.DelimitWith``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Joins the specified items into a string separated by the specified separator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="separator">The separator.</param>
            <param name="format">The item format string.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.StringExtensions.DelimitWith``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.String)">
            <summary>
            Joins the specified items into a string separated by the specified separator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="separator">The separator.</param>
            <param name="format">The item format string.</param>
            <param name="prefix">The prefix.</param>
            <param name="suffix">The suffix.</param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Text.TextDataFormat">
            <summary>
            Possíveis formatos de dados de texto.
            </summary>
        </member>
        <member name="F:Colosoft.Text.TextDataFormat.Text">
            <summary>
            Formato de texto padrão.
            </summary>
        </member>
        <member name="F:Colosoft.Text.TextDataFormat.UnicodeText">
            <summary>
            Formato de texto unicod.
            </summary>
        </member>
        <member name="F:Colosoft.Text.TextDataFormat.Rtf">
            <summary>
            Formato de texto Rtf.
            </summary>
        </member>
        <member name="F:Colosoft.Text.TextDataFormat.Html">
            <summary>
            Formato de texto HTML.
            </summary>
        </member>
        <member name="F:Colosoft.Text.TextDataFormat.CommaSeparatedValue">
            <summary>
            Valor separado por vírgula.
            </summary>
        </member>
        <member name="T:Colosoft.Text.TextMessageFormattable">
            <summary>
            Implementação de uma mensagem de texto formatada.
            </summary>
        </member>
        <member name="M:Colosoft.Text.TextMessageFormattable.#ctor(System.String,System.Object[])">
            <summary>
            Construtor padrão.
            </summary>
            <param name="text"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Colosoft.Text.TextMessageFormattable.Join(System.String,Colosoft.IMessageFormattable)">
            <summary>
            Junta a mensagem com outra.
            </summary>
            <param name="separator">Separador que será usado.</param>
            <param name="message">Mensagem que será anexada.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.TextMessageFormattable.Colosoft#IMessageFormattable#Format">
            <summary>
            Formata a mensagem.
            </summary>
            <returns>Texto da mensagem formatada.</returns>
        </member>
        <member name="M:Colosoft.Text.TextMessageFormattable.Colosoft#IMessageFormattable#Format(System.Globalization.CultureInfo)">
            <summary>
            Formata a mensagem na cultura informada.
            </summary>
            <param name="culture">Cultura que será usada na formatação.</param>
            <returns>Texto da mensagem formatada.</returns>
        </member>
        <member name="M:Colosoft.Text.TextMessageFormattable.Format(System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Formata a mensagem na cultura informada usando os parametros.
            </summary>
            <param name="culture">Cultura que será usada na formatação.</param>
            <param name="parameters">Parametros que serão usados na formatação.</param>
            <returns>Texto da mensagem formatada.</returns>
        </member>
        <member name="M:Colosoft.Text.TextMessageFormattable.Matches(System.Globalization.CultureInfo)">
            <summary>
            Retorna um valor indicando se a linguagem da descrição 
            da suporte a cultura informada.
            </summary>
            <param name="culture">Instancia da cultura que será comparado com a linguagem da mensagem.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.TextMessageFormattable.Equals(Colosoft.IMessageFormattable)">
            <summary>
            Compara as instancia da mensagem informado.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.TextMessageFormattable.ToString">
            <summary>
            Recupera o texto da mensagem.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Text.TextMessageFormattable.Clone">
            <summary>
            Clona a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Text.TextMessageFormattable.Text">
            <summary>
            Texto da formatação.
            </summary>
        </member>
        <member name="P:Colosoft.Text.TextMessageFormattable.Parameters">
            <summary>
            Parametro que serão usados na formatação.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.AsyncOperation">
            <summary>
            Representa uma operação assincrona.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.AsyncOperation.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.AsyncOperation.#ctor(System.Int32)">
            <summary>
            Cria uma nova instancia.
            </summary>
            <param name="maxCount">Quantidade máxima de operações suportadas.</param>
        </member>
        <member name="M:Colosoft.Threading.AsyncOperation.Begin">
            <summary>
            Inicia um operação.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.AsyncOperation.End">
            <summary>
            Finaliza uma operação.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.AsyncOperation.WaitForCompletion">
            <summary>
            Espera finalizar.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.AsyncOperation.WaitForCompletion(System.Int32)">
            <summary>
            Espera finalizar.
            </summary>
            <param name="millisecondsTimeout">Tempo de espera.</param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Threading.AsyncOperation.Exception">
            <summary>
            Erro ocorrido.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.AsyncProcessor">
            <summary>
            Representa um processador de tarefas assincronas.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.IAsyncProcessor">
            <summary>
            Assinatura das classes que funcionam como processadores assincronos.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.IAsyncProcessor.Enqueue(Colosoft.Threading.IAsyncTask)">
            <summary>
            Adiciona uma nova tarefa para ser realizada.
            </summary>
            <param name="evnt">Instancia da tarefa.</param>
        </member>
        <member name="M:Colosoft.Threading.IAsyncProcessor.EnqueueLowPriority(Colosoft.Threading.IAsyncTask)">
            <summary>
            Adiciona uma nova tarefa com baixa prioridade.
            </summary>
            <param name="evnt">Instancia da tarefa.</param>
        </member>
        <member name="M:Colosoft.Threading.IAsyncProcessor.Start">
            <summary>
            Inicializa o processador.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.IAsyncProcessor.Stop">
            <summary>
            Para o processador.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.AsyncProcessor.#ctor(System.String,Colosoft.Logging.ILogger)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="name">Nome do processador.</param>
            <param name="logger">Logger associado com a instancia.</param>
        </member>
        <member name="M:Colosoft.Threading.AsyncProcessor.Enqueue(Colosoft.Threading.IAsyncTask)">
            <summary>
            Adiciona uma nova tarefa para ser realizada.
            </summary>
            <param name="evnt">Instancia da tarefa.</param>
        </member>
        <member name="M:Colosoft.Threading.AsyncProcessor.EnqueueLowPriority(Colosoft.Threading.IAsyncTask)">
            <summary>
            Adiciona uma nova tarefa com baixa prioridade.
            </summary>
            <param name="evnt">Instancia da tarefa.</param>
        </member>
        <member name="M:Colosoft.Threading.AsyncProcessor.Run">
            <summary>
            Método acionado pelo robo do processador.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.AsyncProcessor.Start">
            <summary>
            Inicializa o processador.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.AsyncProcessor.Stop">
            <summary>
            Para o processador.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.AsyncProcessor.Logger">
            <summary>
            Logger associado.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.AsyncResult">
            <summary>
            Implementação da resultado de uma operação assincrona.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.AsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="userCallback"></param>
            <param name="stateObject"></param>
        </member>
        <member name="M:Colosoft.Threading.AsyncResult.Finalize">
            <summary>
            Destrutor.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.AsyncResult.Validate(System.IAsyncResult)">
            <summary>
            Valida o IAsyncResult que é compatível com o AsyncResult e dispara
            uma exception caso exista.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:Colosoft.Threading.AsyncResult.Completed(System.Exception,System.Boolean)">
            <summary>
            Registra que a operação foi executado com sucesso.
            </summary>
            <param name="asyncException"></param>
            <param name="completedSynchronously"></param>
        </member>
        <member name="M:Colosoft.Threading.AsyncResult.Dispose">
            <summary>
            Libera instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.AsyncResult.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Colosoft.Threading.AsyncResult.AsyncState">
            <summary>
            Estado.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.AsyncResult.AsyncWaitHandle">
            <summary>
            Manipulador de espera.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.AsyncResult.CompletedSynchronously">
            <summary>
            Identifica se será completado de forma sincronizada.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.AsyncResult.IsCompleted">
            <summary>
            Identifica se foi executado
            </summary>
        </member>
        <member name="P:Colosoft.Threading.AsyncResult.Exception">
            <summary>
            Instancia do erro ocorrido.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.AsyncResult`1">
            <summary>
            Implementação genérica e padrão para <see cref="T:System.IAsyncResult"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Colosoft.Threading.AsyncResult`1.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="cb"></param>
            <param name="state"></param>
        </member>
        <member name="M:Colosoft.Threading.AsyncResult`1.#ctor(System.AsyncCallback,System.Object,System.Boolean)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="cb"></param>
            <param name="state"></param>
            <param name="completed"></param>
        </member>
        <member name="M:Colosoft.Threading.AsyncResult`1.Validate(System.IAsyncResult)">
            <summary>
            Valida o IAsyncResult que é compatível com o AsyncResult e dispara
            uma exception caso exista.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:Colosoft.Threading.AsyncResult`1.Complete(`0,System.Boolean)">
            <summary>
            Registra que a operação foi executado com sucesso.
            </summary>
            <param name="result"></param>
            <param name="completedSynchronously"></param>
        </member>
        <member name="M:Colosoft.Threading.AsyncResult`1.HandleException(System.Exception,System.Boolean)">
            <summary>
            Notifica um erro ocorrido.
            </summary>
            <param name="e"></param>
            <param name="completedSynchronously"></param>
        </member>
        <member name="M:Colosoft.Threading.AsyncResult`1.SignalCompletion">
            <summary>
            Sinaliza a finalização da execução.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.AsyncResult`1.InvokeCallback(System.Object)">
            <summary>
            Chama o método de retorno.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Colosoft.Threading.AsyncResult`1.Dispose">
            <summary>
            Libera instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.AsyncResult`1.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Colosoft.Threading.AsyncResult`1.AsyncState">
            <summary>
            Estado do resultado.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.AsyncResult`1.AsyncWaitHandle">
            <summary>
            Handle associado.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.AsyncResult`1.CompletedSynchronously">
            <summary>
            Identifica se foi sincronizado completamente.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.AsyncResult`1.IsCompleted">
            <summary>
            Identifica se foi completado.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.AsyncResult`1.Exception">
            <summary>
            Exception ocorrida.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.AsyncResult`1.Result">
            <summary>
            Instancia do resultado.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.AsyncTask">
            <summary>
            Implementação base de uma tarefa assincrona.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.IAsyncTask">
            <summary>
            Assinatura de uma classe de processo.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.IAsyncTask.Process">
            <summary>
            Método acionado para processar a tarefa.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.AsyncTask.#ctor(System.Action)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="method">Métod que será acionado pela tarefa.</param>
        </member>
        <member name="M:Colosoft.Threading.AsyncTask.Process">
            <summary>
            Processa a tarefa.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.DefaultDispatcher">
            <summary>
            Dispatcher padrão.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.IDispatcher">
            <summary>
            Fornece serviços para gerenciar a fila de itens de trabalho para uma Thread.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.IDispatcher.CheckAccess">
            <summary>
            Verifica se a thread de chamada é a thread associada com o dispatcher.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.IDispatcher.VerifyAccess">
            <summary>
            Verifica se a thraed de chamada é a thread associada com o dispatcher.
            </summary>
            <exception cref="T:System.InvalidOperationException">Caso a thread de chamada não seja a mesma que a Thread vinculada.</exception>
        </member>
        <member name="M:Colosoft.Threading.IDispatcher.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Executa o delegate de forma assíncrona com os argumentos especificados na linha que o Dispatcher foi criado.
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.IDispatcher.BeginInvoke(System.Action)">
            <summary>
            Executa o delegate de forma assíncrona.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.IDispatcher.BeginInvoke(Colosoft.Threading.DispatcherPriority,System.Delegate)">
            <summary>
            Executa o delegate de forma assíncrona na prioridade especificada no segmento Dispatcher está associado.
            </summary>
            <param name="priority"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.IDispatcher.BeginInvoke(System.Delegate,Colosoft.Threading.DispatcherPriority,System.Object[])">
            <summary>
            Executa o delegate de forma assíncrona com os argumentos especificados, na prioridade especificada, no segmento que o Dispatcher foi criado.
            </summary>
            <param name="method"></param>
            <param name="priority"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.IDispatcher.BeginInvoke(Colosoft.Threading.DispatcherPriority,System.Delegate,System.Object)">
            <summary>
            Executa o delegate de forma assíncrona na prioridade especificada e com o argumento especificado no segmento do Dispatcher está associado.
            </summary>
            <param name="priority"></param>
            <param name="method"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.IDispatcher.BeginInvoke(Colosoft.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
            <summary>
            Executa o delegate de forma assíncrona na prioridade especificada e com a matriz especificada de argumentos na discussão do Dispatcher está associado.
            </summary>
            <param name="priority"></param>
            <param name="method"></param>
            <param name="arg"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.IDispatcher.Invoke(System.Delegate,Colosoft.Threading.DispatcherPriority,System.Object[])">
            <summary>
            Executa um delegate de forma assincrona.
            </summary>
            <param name="method">Delegate do método que será executado.</param>
            <param name="priority"></param>
            <param name="args">Parametros do método que será executado.</param>
            <returns>
            O valor de retorno do delegate que está sendo 
            chamado ou nulo se o delegate não tem valor de retorno.
            </returns>
        </member>
        <member name="M:Colosoft.Threading.IDispatcher.Invoke(System.Delegate,System.Object[])">
            <summary>
            Executa um delegate de forma assincrona.
            </summary>
            <param name="method">Delegate do método que será executado.</param>
            <param name="args">Parametros do método que será executado.</param>
            <returns>
            O valor de retorno do delegate que está sendo 
            chamado ou nulo se o delegate não tem valor de retorno.
            </returns>
        </member>
        <member name="M:Colosoft.Threading.IDispatcher.Invoke``1(System.Func{``0})">
            <summary>
            Executa a sincronização com a thread do despachante.
            </summary>
            <param name="func">Func que será acionada.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.IDispatcher.Invoke(System.Action)">
            <summary>
            Executa a <see cref="T:System.Action"/> sincronização com a thread do despachante.
            </summary>
            <param name="action">Action que será executada.</param>
        </member>
        <member name="M:Colosoft.Threading.IDispatcher.DoEvents">
            <summary>
            Processa os eventos pendentes no sistema.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.IDispatcher.Thread">
            <summary>
            Thread relacionada com o dispatcher.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.DefaultDispatcher.CheckAccess">
            <summary>
            Verifica se a thread de chamada é a thread associada com o dispatcher.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.DefaultDispatcher.VerifyAccess">
            <summary>
            Verifica se a thraed de chamada é a thread associada com o dispatcher.
            </summary>
            <exception cref="T:System.InvalidOperationException">Caso a thread de chamada não seja a mesma que a Thread vinculada.</exception>
        </member>
        <member name="M:Colosoft.Threading.DefaultDispatcher.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Executa o delegate de forma assíncrona com os argumentos especificados na linha que o Dispatcher foi criado.
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.DefaultDispatcher.BeginInvoke(System.Action)">
            <summary>
            Executa o delegate de forma assíncrona.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.DefaultDispatcher.BeginInvoke(Colosoft.Threading.DispatcherPriority,System.Delegate)">
            <summary>
            Executa o delegate de forma assíncrona na prioridade especificada no segmento Dispatcher está associado.
            </summary>
            <param name="priority"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.DefaultDispatcher.BeginInvoke(System.Delegate,Colosoft.Threading.DispatcherPriority,System.Object[])">
            <summary>
            Executa o delegate de forma assíncrona com os argumentos especificados, na prioridade especificada, no segmento que o Dispatcher foi criado.
            </summary>
            <param name="method"></param>
            <param name="priority"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.DefaultDispatcher.BeginInvoke(Colosoft.Threading.DispatcherPriority,System.Delegate,System.Object)">
            <summary>
            Executa o delegate de forma assíncrona na prioridade especificada e com o argumento especificado no segmento do Dispatcher está associado.
            </summary>
            <param name="priority"></param>
            <param name="method"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.DefaultDispatcher.BeginInvoke(Colosoft.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
            <summary>
            Executa o delegate de forma assíncrona na prioridade especificada e com a matriz especificada de argumentos na discussão do Dispatcher está associado.
            </summary>
            <param name="priority"></param>
            <param name="method"></param>
            <param name="arg"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.DefaultDispatcher.Invoke(System.Delegate,System.Object[])">
            <summary>
            Executa um delegate de forma assincrona.
            </summary>
            <param name="method">Delegate do método que será executado.</param>
            <param name="args">Parametros do método que será executado.</param>
            <returns>
            O valor de retorno do delegate que está sendo 
            chamado ou nulo se o delegate não tem valor de retorno.
            </returns>
        </member>
        <member name="M:Colosoft.Threading.DefaultDispatcher.Invoke(System.Delegate,Colosoft.Threading.DispatcherPriority,System.Object[])">
            <summary>
            Executa um delegate de forma assincrona.
            </summary>
            <param name="method">Delegate do método que será executado.</param>
            <param name="priority"></param>
            <param name="args">Parametros do método que será executado.</param>
            <returns>
            O valor de retorno do delegate que está sendo 
            chamado ou nulo se o delegate não tem valor de retorno.
            </returns>
        </member>
        <member name="M:Colosoft.Threading.DefaultDispatcher.Invoke``1(System.Func{``0})">
            <summary>
            Executa a sincronização com a thread do despachante.
            </summary>
            <param name="func">Func que será acionada.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.DefaultDispatcher.Invoke(System.Action)">
            <summary>
            Executa um delegate de forma assincrona.
            </summary>
            <param name="action">Delegate do método que será executado.</param>
        </member>
        <member name="M:Colosoft.Threading.DefaultDispatcher.DoEvents">
            <summary>
            Processa os eventos pendentes no sistema.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.DefaultDispatcher.Thread">
            <summary>
            Thread relacionada com o dispatcher.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.Dispatcher">
            <summary>
            Dispatcher padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.#ctor(System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.Finalize">
            <summary>
            Destrutor.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.Robot">
            <summary>
            Método do robo.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.CheckAccess">
            <summary>
            Verifica se a thread de chamada é a thread associada com o dispatcher.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.VerifyAccess">
            <summary>
            Verifica se a thraed de chamada é a thread associada com o dispatcher.
            </summary>
            <exception cref="T:System.InvalidOperationException">Caso a thread de chamada não seja a mesma que a Thread vinculada.</exception>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Executa o delegate de forma assíncrona com os argumentos especificados na linha que o Dispatcher foi criado.
            </summary>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.BeginInvoke(System.Action)">
            <summary>
            Executa o delegate de forma assíncrona.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.BeginInvoke(Colosoft.Threading.DispatcherPriority,System.Delegate)">
            <summary>
            Executa o delegate de forma assíncrona na prioridade especificada no segmento Dispatcher está associado.
            </summary>
            <param name="priority"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.BeginInvoke(System.Delegate,Colosoft.Threading.DispatcherPriority,System.Object[])">
            <summary>
            Executa o delegate de forma assíncrona com os argumentos especificados, na prioridade especificada, no segmento que o Dispatcher foi criado.
            </summary>
            <param name="method"></param>
            <param name="priority"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.BeginInvoke(Colosoft.Threading.DispatcherPriority,System.Delegate,System.Object)">
            <summary>
            Executa o delegate de forma assíncrona na prioridade especificada e com o argumento especificado no segmento do Dispatcher está associado.
            </summary>
            <param name="priority"></param>
            <param name="method"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.BeginInvoke(Colosoft.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
            <summary>
            Executa o delegate de forma assíncrona na prioridade especificada e com a matriz especificada de argumentos na discussão do Dispatcher está associado.
            </summary>
            <param name="priority"></param>
            <param name="method"></param>
            <param name="arg"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])">
            <summary>
            Executa um delegate de forma assincrona.
            </summary>
            <param name="method">Delegate do método que será executado.</param>
            <param name="args">Parametros do método que será executado.</param>
            <returns>
            O valor de retorno do delegate que está sendo 
            chamado ou nulo se o delegate não tem valor de retorno.
            </returns>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.Invoke(System.Delegate,Colosoft.Threading.DispatcherPriority,System.Object[])">
            <summary>
            Executa um delegate de forma assincrona.
            </summary>
            <param name="method">Delegate do método que será executado.</param>
            <param name="priority"></param>
            <param name="args">Parametros do método que será executado.</param>
            <returns>
            O valor de retorno do delegate que está sendo 
            chamado ou nulo se o delegate não tem valor de retorno.
            </returns>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.Invoke``1(System.Func{``0})">
            <summary>
            Executa a sincronização com a thread do despachante.
            </summary>
            <param name="func">Func que será acionada.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.Invoke(System.Action)">
            <summary>
            Executa um delegate de forma assincrona.
            </summary>
            <param name="action">Delegate do método que será executado.</param>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.DoEvents">
            <summary>
            Processa os eventos pendentes no sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Colosoft.Threading.Dispatcher.Name">
            <summary>
            Nome da thread do dispatcher.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.Dispatcher.Thread">
            <summary>
            Thread relacionada com o dispatcher.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.Dispatcher.DispatcherTask">
            <summary>
            Representa uma tarefa do dispatcher.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.DispatcherTask.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.DispatcherTask.Execute">
            <summary>
            Executa a tarefa.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.Dispatcher.DispatcherTask.GetResult">
            <summary>
            Recupera o resultado da tarefa  executada.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Colosoft.Threading.Dispatcher.DispatcherTask.Executed">
            <summary>
            Evento acionado quando a tarefa for executada.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.DispatcherManager">
            <summary>
            Classe para acessar o gerenciador de dispatchers do sistema.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.DispatcherManager.Instance">
            <summary>
            Instancia do gerenciador que é utilizada pelo sistema.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.DispatcherManager.Dispatcher">
            <summary>
            Instancia do dispatcher padrão do sistema.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.EventQueue">
            <summary>
            Implementação de uma fila de eventos.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.EventQueue.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.EventQueue.Clear">
            <summary>
            Limpa a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.EventQueue.Peek">
            <summary>
            Recupera o evento que está na frente da fila.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.EventQueue.Pop">
            <summary>
            Recupera e remove o primeiro elemento da fila.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.EventQueue.Push(System.Object)">
            <summary>
            Adiciona o elemento na fila.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Threading.EventQueue.IsEmpty">
            <summary>
            Verifica se a fila está vazia.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.EventQueue.EventQueueComparer">
            <summary>
            Implementação de um comparador para a fila de eventos.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.EventQueue.EventQueueComparer.Compare(System.Object,System.Object)">
            <summary>
            Compara a instancias.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Threading.DispatcherOperationStatus">
            <summary>
            Situações da operação do expedidor.
            </summary>
        </member>
        <member name="F:Colosoft.Threading.DispatcherOperationStatus.Pending">
            <summary>
            Pendente.
            </summary>
        </member>
        <member name="F:Colosoft.Threading.DispatcherOperationStatus.Aborted">
            <summary>
            Abortado.
            </summary>
        </member>
        <member name="F:Colosoft.Threading.DispatcherOperationStatus.Completed">
            <summary>
            Completa.
            </summary>
        </member>
        <member name="F:Colosoft.Threading.DispatcherOperationStatus.Executing">
            <summary>
            Executando.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.DispatcherPriority">
            <summary>
            Prioridades do expedidor.
            </summary>
        </member>
        <member name="F:Colosoft.Threading.DispatcherPriority.ApplicationIdle">
            <summary>
            Prioridade de aplicação inativa.
            </summary>
        </member>
        <member name="F:Colosoft.Threading.DispatcherPriority.Background">
            <summary>
            Prioridade de plano de fundo.
            </summary>
        </member>
        <member name="F:Colosoft.Threading.DispatcherPriority.ContextIdle">
            <summary>
            Prioridade de contexto inativo.
            </summary>
        </member>
        <member name="F:Colosoft.Threading.DispatcherPriority.DataBind">
            <summary>
            Prioridade de databinding.
            </summary>
        </member>
        <member name="F:Colosoft.Threading.DispatcherPriority.Inactive">
            <summary>
            Prioridade de inativo.
            </summary>
        </member>
        <member name="F:Colosoft.Threading.DispatcherPriority.Input">
            <summary>
            Prioridade de entrada.
            </summary>
        </member>
        <member name="F:Colosoft.Threading.DispatcherPriority.Invalid">
            <summary>
            Inválida.
            </summary>
        </member>
        <member name="F:Colosoft.Threading.DispatcherPriority.Loaded">
            <summary>
            Prioridade de carregado,
            </summary>
        </member>
        <member name="F:Colosoft.Threading.DispatcherPriority.Normal">
            <summary>
            Prioridade normal.
            </summary>
        </member>
        <member name="F:Colosoft.Threading.DispatcherPriority.Render">
            <summary>
            Prioridade de renderização.
            </summary>
        </member>
        <member name="F:Colosoft.Threading.DispatcherPriority.Send">
            <summary>
            Prioridade de envio.
            </summary>
        </member>
        <member name="F:Colosoft.Threading.DispatcherPriority.SystemIdle">
            <summary>
            Prioridade de sistema inativo.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.IDispatcherManager">
            <summary>
            Assinatura do gerenciador dos despatchers do sistema.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.IDispatcherManager.FromThread(System.Threading.Thread)">
            <summary>
            Recupera o <see cref="T:Colosoft.Threading.IDispatcher"/> da thread informada.
            </summary>
            <param name="thread">Thread de onde será obtido do dispatcher.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.IDispatcherManager.DoEvents">
            <summary>
            Processa todo as mensagens de tela que estão na fila de mensagens.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.IDispatcherOperation">
            <summary>
            Representa uma operação do expedidor.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.IDispatcherOperation.Abort">
            <summary>
            Aborta a execução.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.IDispatcherOperation.Wait">
            <summary>
            Aguarda a operação completar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.IDispatcherOperation.Wait(System.TimeSpan)">
            <summary>
            Aguarda a operação completar em um tempo determinado.
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="E:Colosoft.Threading.IDispatcherOperation.Aborted">
            <summary>
            Evento acionado quando a operação for abortada.
            </summary>
        </member>
        <member name="E:Colosoft.Threading.IDispatcherOperation.Completed">
            <summary>
            Evento acionado quando a operação for completada.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.IDispatcherOperation.Dispatcher">
            <summary>
            Instancia do expedidor onde a operação foi postada.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.IDispatcherOperation.Priority">
            <summary>
            Prioridade da operação.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.IDispatcherOperation.Result">
            <summary>
            Resultado da operação depois de completada.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.IDispatcherOperation.Status">
            <summary>
            Situação atual da operação.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.ITask`2">
            <summary>
            Define a interface de uma Task.
            </summary>
            <typeparam name="TResult">Tipo do resultado da Task.</typeparam>
            <typeparam name="TState">Tipo do estado da Task.</typeparam>
        </member>
        <member name="T:Colosoft.Threading.ITask">
            <summary>
            Define a interface de uma Task.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.ITask.CancelOrAbort">
            <summary>
            Cancela ou aborta esta Task.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.ITask.ThrowIfCancellationRequested">
            <summary>
            Lança uma <see cref="T:System.OperationCanceledException"/> se esta Task teve o cancelamento solicitado.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.ITask.Wait(System.Int32)">
            <summary>
            Aguarda a Task concluir a execução.
            </summary>
            <param name="millisecondsTimeout">O número de milissegundos de espera, ou Infinite (-1) para esperar indefinidamente.</param>
            <returns>Verdadeiro se a Task é completada no tempo alocado; Caso contrário, falso.</returns>
        </member>
        <member name="M:Colosoft.Threading.ITask.Wait(System.TimeSpan)">
            <summary>
            Aguarda a Task concluir a execução.
            </summary>
            <param name="timeout">O número de milissegundos de espera, ou Infinite (-1) para esperar indefinidamente.</param>
            <returns>Verdadeiro se a Task é completada no tempo alocado; Caso contrário, falso.</returns>
        </member>
        <member name="P:Colosoft.Threading.ITask.AsyncState">
            <summary>
            Obtém o estado fornecido a Task quando foi criada ou null se não foi fornecida.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.ITask.Exception">
            <summary>
            Obtém a <see cref="T:System.AggregateException"/> que causou a Task o encerramento prematuro.
            Se a Task foi concluída com êxito ou ainda não foi lançada quaisquer exceção, retornará null.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.ITask.Id">
            <summary>
            Obtém uma identificação única para essa instância de Task.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.ITask.IsAborted">
            <summary>
            Obtém se esta Task foi abortada.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.ITask.IsCanceled">
            <summary>
            Obtém se esta Task foi cancelada.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.ITask.IsCanceledOrAborted">
            <summary>
            Obtém se esta Task foi cancelada ou abortada.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.ITask.IsCompleted">
            <summary>
            Obtém se esta Task foi concluída.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.ITask.IsFaulted">
            <summary>
            Obtém se a Task concluída devido a uma exceção não tratada.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.ITask.Status">
            <summary>
            Obtém o status desta Task.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.ITask`2.AsyncState">
            <summary>
            Obtém o estado fornecido a Task quando foi criada ou null se não foi fornecida.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.ITask`2.Config">
            <summary>
            Obtém a configuração da Task.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.ITask`2.Result">
            <summary>
            Obtém o valor do resultado desta Task.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.IThreadRunnable">
            <summary>
            Assinatura das classes de thread que possuem
            a caracteristica de execução.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.IThreadRunnable.Run">
            <summary>
            Executa o processo da thread.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.QueuedEvent">
            <summary>
            Representa o evento enfilerado.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.QueuedEvent.#ctor(Colosoft.Threading.TimeScheduler.Task)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="task">Tarefa que associada.</param>
        </member>
        <member name="M:Colosoft.Threading.QueuedEvent.ReQueue">
            <summary>
            Reinfilera o evento.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Threading.QueuedEvent.ElapsedTime">
            <summary>
            Tempo restante.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.QueuedEvent.Interval">
            <summary>
            Intervalo de execução.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.QueuedEvent.SchedTime">
            <summary>
            Horário programado.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.SimpleMonitor">
            <summary>
            Classe usada para monitorar o acesso de entrada em zonas criticas.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.SimpleMonitor.Finalize">
            <summary>
            Destrutor da classe
            </summary>
        </member>
        <member name="M:Colosoft.Threading.SimpleMonitor.RaisePropertyChanged(System.String)">
            <summary>
            Dispara que uma propriedade for alterada.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Colosoft.Threading.SimpleMonitor.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.SimpleMonitor.Enter">
            <summary>
            Identifica a entrada de algum operação.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.SimpleMonitor.InnerEnter">
            <summary>
            Identifica a entrada de algum operação.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.SimpleMonitor.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="E:Colosoft.Threading.SimpleMonitor.PropertyChanged">
            <summary>
            Evento acionado quando alguma propriedade sofrer alterações.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.SimpleMonitor.BusyCount">
            <summary>
            Quantidade de solicitação do monitor.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.SimpleMonitor.Busy">
            <summary>
            Identifica se a instancia está ocupada.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.Task">
            <summary>
            Implementa metodos para uma Task.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.Task.#cctor">
            <summary>
            Inicializa variáveis estáticas.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.Task.CancelOrAbortAll">
            <summary>
            Cancela ou aborta todas as Tasks.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.Task.Factory">
            <summary>
            Fornece suporte para a criação e programação de Task objetos.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.Task.Factory.New``2(Colosoft.Threading.Task.Config{``0,``1})">
            <summary>
            Cria uma nova Task.
            </summary>
            <param name="config">Configuração da Task.</param>
            <typeparam name="TResult">Tipo do resultado da Task.</typeparam>
            <typeparam name="TState">Tipo do estado da Task.</typeparam>
        </member>
        <member name="M:Colosoft.Threading.Task.Factory.StartNew``2(Colosoft.Threading.Task.Config{``0,``1},``1,System.Boolean,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Cria e executa uma nova Task.
            </summary>
            <param name="config">Configuração da Task.</param>
            <param name="state">Os dados a serem utilizados pela Task.</param>
            <param name="runSynchronously">Executa a Task de forma síncrona.</param>
            <param name="scheduler">O <see cref="T:System.Threading.Tasks.TaskScheduler"/> ao qual é associada e executada essa Task.</param>
            <typeparam name="TResult">Tipo do resultado da Task.</typeparam>
            <typeparam name="TState">Tipo do estado da Task.</typeparam>
        </member>
        <member name="M:Colosoft.Threading.Task.Factory.Restart``2(Colosoft.Threading.ITask{``0,``1},``1,System.Boolean,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Cancela a Task e cria e executa uma nova Task.
            </summary>
            <param name="task">Task a ser cancelada e criada novamente.</param>
            <param name="state">Os dados a serem utilizados pela Task.</param>
            <param name="runSynchronously">Executa a Task de forma síncrona.</param>
            <param name="scheduler">O <see cref="T:System.Threading.Tasks.TaskScheduler"/> ao qual é associada e executada essa Task.</param>
            <typeparam name="TResult">Tipo do resultado da Task.</typeparam>
            <typeparam name="TState">Tipo do estado da Task.</typeparam>
        </member>
        <member name="T:Colosoft.Threading.Task.Config`2">
            <summary>
            Configuração da Task.
            </summary>
            <typeparam name="TResult">Tipo do resultado da Task.</typeparam>
            <typeparam name="TState">Tipo do estado da Task.</typeparam>
        </member>
        <member name="M:Colosoft.Threading.Task.Config`2.#ctor(System.Func{Colosoft.Threading.ITask{`0,`1},`0},System.Action{Colosoft.Threading.ITask{`0,`1}},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
            <summary>
            Cria um novo objeto <c>Config</c>.
            </summary>
            <param name="runFunction">A função a ser executada na Task. A propriedade <c>Result</c> da Task será definido para o resultado desta função.</param>
            <param name="continueAction">Uma ação a ser executada de acordo com a condição especificada em continuationOptions, após a Task ser concluída.</param>
            <param name="creationOptions">Opções para personalizar o comportamento da Task.</param>
            <param name="continuationOptions">Opções para quando a continuação está agendada e como ele se comporta.</param>
        </member>
        <member name="F:Colosoft.Threading.Task.Config`2.RunFunction">
            <summary>
            A função a ser executada na Task. A propriedade <c>Result</c> da Task será definido para o resultado desta função.
            </summary>
        </member>
        <member name="F:Colosoft.Threading.Task.Config`2.ContinueAction">
            <summary>
            Uma ação a ser executada de acordo com a condição especificada em continuationOptions, após a Task ser concluída.
            </summary>
        </member>
        <member name="F:Colosoft.Threading.Task.Config`2.CreationOptions">
            <summary>
            Opções para personalizar o comportamento da Task.
            </summary>
        </member>
        <member name="F:Colosoft.Threading.Task.Config`2.ContinuationOptions">
            <summary>
            Opções para quando a continuação está agendada e como ele se comporta.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.Task.Data`2">
            <summary>
            Os dados a serem utilizados pela Task.
            </summary>
            <typeparam name="TResult">Tipo do resultado da Task.</typeparam>
            <typeparam name="TState">Tipo do estado da Task.</typeparam>
        </member>
        <member name="T:Colosoft.Threading.Task._Task`2">
            <summary>
            Representa uma operação assíncrona que pode retornar um valor.
            </summary>
            <typeparam name="TResult">Tipo do resultado da Task.</typeparam>
            <typeparam name="TState">Tipo do estado da Task.</typeparam>
        </member>
        <member name="M:Colosoft.Threading.Task._Task`2.#ctor(Colosoft.Threading.Task.Config{`0,`1},System.Threading.CancellationTokenSource)">
            <summary>
            Cria um novo objeto <c>Task</c>.
            </summary>
            <param name="config">Configuração da Task.</param>
            <param name="tokenSource">O <see cref="T:System.Threading.CancellationTokenSource"/> a ser atribuída à nova Task.</param>
        </member>
        <member name="M:Colosoft.Threading.Task._Task`2.#ctor(Colosoft.Threading.Task.Config{`0,`1},Colosoft.Threading.Task.Data{`0,`1},Colosoft.Threading.ITask{`0,`1},System.Threading.CancellationTokenSource,System.Threading.Tasks.TaskScheduler,System.Boolean)">
            <summary>
            Cria um novo objeto <c>Task</c>.
            </summary>
            <param name="config">Configuração da Task.</param>
            <param name="data">Os dados a serem utilizados pela Task.</param>
            <param name="prev">A Task anterior.</param>
            <param name="tokenSource">O <see cref="T:System.Threading.CancellationTokenSource"/> a ser atribuída à nova Task.</param>
            <param name="scheduler">O <see cref="T:System.Threading.Tasks.TaskScheduler"/> ao qual é associada e executada essa Task.</param>
            <param name="runSynchronously">Executa a Task de forma síncrona.</param>
        </member>
        <member name="M:Colosoft.Threading.Task._Task`2.CancelOrAbort">
            <summary>
            Cancela ou aborta esta Task.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.Task._Task`2.ThrowIfCancellationRequested">
            <summary>
            Lança uma <see cref="T:System.OperationCanceledException"/> se esta Task teve o cancelamento solicitado.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.Task._Task`2.AsyncState">
            <summary>
            Obtém o estado fornecido a Task quando foi criada ou null se não foi fornecida.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.Task._Task`2.IsAborted">
            <summary>
            Obtém se esta Task foi abortada.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.Task._Task`2.IsCanceledOrAborted">
            <summary>
            Obtém se esta Task foi cancelada ou abortada.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.ThreadClass">
            <summary>
            Adaptação de uma thread.
            </summary>
        </member>
        <member name="F:Colosoft.Threading.ThreadClass._threadField">
            <summary>
            Instancia adaptada.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.ThreadClass.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.ThreadClass.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:Colosoft.Threading.ThreadClass.#ctor(System.Threading.ThreadStart)">
            <summary>
            
            </summary>
            <param name="Start"></param>
        </member>
        <member name="M:Colosoft.Threading.ThreadClass.#ctor(System.Threading.ThreadStart,System.String)">
            <summary>
            
            </summary>
            <param name="Start"></param>
            <param name="Name"></param>
        </member>
        <member name="M:Colosoft.Threading.ThreadClass.Abort">
            <summary>
            Aborta a execução.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.ThreadClass.Abort(System.Object)">
            <summary>
            Aborta a exeução.
            </summary>
            <param name="stateInfo">Informações do estado.</param>
        </member>
        <member name="M:Colosoft.Threading.ThreadClass.Current">
            <summary>
            Recupera a instancia da atual thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.ThreadClass.Interrupt">
            <summary>
            Interronpe a execução.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.ThreadClass.Join">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.Threading.ThreadClass.Join(System.Int64)">
            <summary>
            
            </summary>
            <param name="miliSeconds"></param>
        </member>
        <member name="M:Colosoft.Threading.ThreadClass.Join(System.Int64,System.Int32)">
            <summary>
            
            </summary>
            <param name="miliSeconds"></param>
            <param name="nanoSeconds"></param>
        </member>
        <member name="M:Colosoft.Threading.ThreadClass.Run">
            <summary>
            Método de execução da thread.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.ThreadClass.Start">
            <summary>
            Inicializa a execução.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.ThreadClass.ToString">
            <summary>
            Recupera o texto que representa a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Threading.ThreadClass.IsAlive">
            <summary>
            Identifica se a thread está ativa.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.ThreadClass.IsBackground">
            <summary>
            Identifica se a thread está executando em background.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.ThreadClass.IsInterrupted">
            <summary>
            Identifica se a thread foi interrompida.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.ThreadClass.Name">
            <summary>
            Nome da thread.
            </summary>
        </member>
        <member name="P:Colosoft.Threading.ThreadClass.Priority">
            <summary>
            Prioridade de thread.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.ThreadSafeServiceContainer">
            <summary>
            Implementação de um container de serviço ThreadSage
            </summary>
        </member>
        <member name="M:Colosoft.Threading.ThreadSafeServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
            <summary>
            Adiciona um serviço.
            </summary>
            <param name="serviceType">Tipo do serviço.</param>
            <param name="callback">Callback para a criação do serviço.</param>
        </member>
        <member name="M:Colosoft.Threading.ThreadSafeServiceContainer.AddService(System.Type,System.Object)">
            <summary>
            Adiciona um serviço.
            </summary>
            <param name="serviceType">Tipo do serviço.</param>
            <param name="serviceInstance">Instancia do serviço.</param>
        </member>
        <member name="M:Colosoft.Threading.ThreadSafeServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
            <summary>
            Adiciona o serviço.
            </summary>
            <param name="serviceType">Tipo do serviço.</param>
            <param name="callback">Callback para criação.</param>
            <param name="promote"></param>
        </member>
        <member name="M:Colosoft.Threading.ThreadSafeServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
            <summary>
            Adiciona o serviço.
            </summary>
            <param name="serviceType"></param>
            <param name="serviceInstance"></param>
            <param name="promote"></param>
        </member>
        <member name="M:Colosoft.Threading.ThreadSafeServiceContainer.FlushServices">
            <summary>
            Libera os serviços.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.ThreadSafeServiceContainer.GetService(System.Type)">
            <summary>
            Recupera o serviço pelo tipo informado.
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.ThreadSafeServiceContainer.RemoveService(System.Type)">
            <summary>
            Remove o serviço para o tipo informado.
            </summary>
            <param name="serviceType"></param>
        </member>
        <member name="M:Colosoft.Threading.ThreadSafeServiceContainer.RemoveService(System.Type,System.Boolean)">
            <summary>
            Remove o serviço para o tipo informado.
            </summary>
            <param name="serviceType">Tipo do serviço.</param>
            <param name="promote"></param>
        </member>
        <member name="M:Colosoft.Threading.ThreadSafeServiceContainer.Dispose(System.Boolean)">
            <summary>
            Libera a instancia. 
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Threading.ThreadSafeServiceContainer.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.TimeScheduler">
            <summary>
            Implementa um horário programa de execução.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.TimeScheduler.#ctor">
            <summary>
            Construtor padrão. Inicializa com intervalo de 2000 miliseguntos.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.TimeScheduler.#ctor(System.Int64)">
            <summary>
            Cria a instancia definindo o intervalo para supender.
            </summary>
            <param name="suspendInterval">Intervalor de suspensão.</param>
        </member>
        <member name="M:Colosoft.Threading.TimeScheduler.Run">
            <summary>
            Método de execução.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.TimeScheduler.InternalStart">
            <summary>
            Método usado para dar inicio ao processamento.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.TimeScheduler.InternalStop">
            <summary>
            Método usado para finalizar o processamente.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.TimeScheduler.InternalStopping">
            <summary>
            Método acionado quando o processa está sendo finalizado.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.TimeScheduler.InternalSuspend">
            <summary>
            Suspende o processamento.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.TimeScheduler.InternalUnsuspend">
            <summary>
            Desfaz a tarefa de suspender.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.TimeScheduler.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Colosoft.Threading.TimeScheduler.AddTask(Colosoft.Threading.TimeScheduler.Task)">
            <summary>
            Adiciona uma nova tarefa.
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Colosoft.Threading.TimeScheduler.AddTask(Colosoft.Threading.TimeScheduler.Task,System.Boolean)">
            <summary>
            Adiciona uma nova tarefa.
            </summary>
            <param name="task">Instancia da tarefa.</param>
            <param name="relative">True identifica se é uma tarefa relativa.</param>
        </member>
        <member name="M:Colosoft.Threading.TimeScheduler.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.TimeScheduler.Start">
            <summary>
            Inicia o processamento.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.TimeScheduler.Stop">
            <summary>
            Para o processamento.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.TimeScheduler.State">
            <summary>
            Possíveis estados.
            </summary>
        </member>
        <member name="T:Colosoft.Threading.TimeScheduler.Task">
            <summary>
            Assinatura da classe que represente uma tarfa.
            </summary>
        </member>
        <member name="M:Colosoft.Threading.TimeScheduler.Task.GetNextInterval">
            <summary>
            Recupera o próximo intervalo.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.TimeScheduler.Task.IsCancelled">
            <summary>
            Verifica se foi cancelada.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Threading.TimeScheduler.Task.Run">
            <summary>
            Método de execução.
            </summary>
        </member>
        <member name="T:Colosoft.TranslateAttribute">
            <summary>
            Representa um atributo para traduz os dados de
            algum membro.
            </summary>
        </member>
        <member name="M:Colosoft.TranslateAttribute.#ctor(System.Type)">
            <summary>
            Cria a instancia com o tipo do provedor de tradução.
            </summary>
            <param name="providerType"></param>
        </member>
        <member name="P:Colosoft.TranslateAttribute.ProviderType">
            <summary>
            Tipo do provedor de tradução associado.
            </summary>
        </member>
        <member name="T:Colosoft.EmptyDescriptionAttribute">
            <summary>
            Representa a descrição de quando o valor for vazio.
            </summary>
        </member>
        <member name="M:Colosoft.EmptyDescriptionAttribute.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.EmptyDescriptionAttribute.#ctor(System.String)">
            <summary>
            Cria a instancia com a descrição informada.
            </summary>
            <param name="description"></param>
        </member>
        <member name="P:Colosoft.EmptyDescriptionAttribute.Description">
            <summary>
            Descrição associada.
            </summary>
        </member>
        <member name="T:Colosoft.Translator">
            <summary>
            Classe que prove método de extensão para traução.
            </summary>
        </member>
        <member name="M:Colosoft.Translator.GetTranslates``1">
            <summary>
            Recupera as traduções do tipo informado.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Translator.GetTranslates(System.Type)">
            <summary>
            Carrega as traduções do tipo de enum informado.
            </summary>
            <param name="type">Tipo do enum que será traduzido.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Translator.GetTranslates(System.Type,System.Object)">
            <summary>
            Carrega as traduções do tipo de enum informado.
            </summary>
            <param name="type">Tipo do enum que será traduzido.</param>
            <param name="groupKey">Chave do grupo de traduções.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Translator.GetTranslatesFromTypeName(System.String)">
            <summary>
            Carrega as traduções do tipo de enum informado.
            </summary>
            <param name="typeName">Tipo do enum que será traduzido.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Translator.GetTranslatesFromTypeName(System.String,System.Object)">
            <summary>
            Carrega as traduções do tipo de enum informado.
            </summary>
            <param name="typeName">Tipo do enum que será traduzido.</param>
            <param name="groupKey">Chave do grupo de traduções.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Translator.Translate(System.Object)">
            <summary>
            Traduz o valor do enumerador.
            </summary>
            <param name="value">Valor que será traduzido.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Translator.Translate(System.Object,System.Object)">
            <summary>
            Traduz o valor do enumerador.
            </summary>
            <param name="value"></param>
            <param name="groupKey">Chave do grupo de traduções.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Translator.GetIndividualFlags(System.Enum)">
            <summary>
            Enumerates through the individual set bits in a flag enum.
            </summary>
            <param name="flags">The flags enum value.</param>
            <returns>An enumeration of just the <i>set</i> bits in the flags enum.</returns>
        </member>
        <member name="T:Colosoft.TypeDefinition">
            <summary>
            Implementação básica da interface <see cref="T:Colosoft.ITypeDefinition"/>.
            </summary>
        </member>
        <member name="M:Colosoft.TypeDefinition.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.TypeDefinition.#ctor(System.String,System.String,System.String)">
            <summary>
            Cria uma nova instancia já definindo os valores iniciais para a instancia.
            </summary>
            <param name="typeNamespace">Espaço de nome do tipo.</param>
            <param name="typeName">Nome do tipo.</param>
            <param name="typeAssembly">Assembly do tipo.</param>
        </member>
        <member name="M:Colosoft.TypeDefinition.Get``1">
            <summary>
            Recupera a definição do tipo informado por T.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Colosoft.TypeDefinition.Get(System.Type)">
            <summary>
            Recupera a definição do tipo informado.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.TypeDefinition.ToString">
            <summary>
            Recupera o texto que representa a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.TypeDefinition.TypeName">
            <summary>
            Nome do tipo.
            </summary>
        </member>
        <member name="P:Colosoft.TypeDefinition.TypeNamespace">
            <summary>
            Espaço de novo do tipo.
            </summary>
        </member>
        <member name="P:Colosoft.TypeDefinition.TypeAssembly">
            <summary>
            Nome do assembly do tipo.
            </summary>
        </member>
        <member name="T:Colosoft.TypeExtensions">
            <summary>
            Método de extensão para a classe Type
            </summary>
        </member>
        <member name="F:Colosoft.TypeExtensions.PredefinedTypes">
            <summary>
            Tipos predefinidos considerados no sistema.
            </summary>
        </member>
        <member name="M:Colosoft.TypeExtensions.IsPredefinedType(System.Type)">
            <summary>
            Verifica se o tipo informado é pré-definido.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Verifica se o tipo informado é um System.Nullable wrapper
            </summary>
            <param name="type">Tipo a ser verificado.</param>
            <returns>True if the type is a System.Nullable wrapper</returns>
        </member>
        <member name="M:Colosoft.TypeExtensions.GetNonNullableType(System.Type)">
            <summary>
            Recupera o tipo não Nullable.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.TypeExtensions.GetRootType(System.Type)">
            <summary>
            Obtém o tipo de dados base. Para tipos que sejam <see cref="T:System.Nullable"/>
            retorna o tipo puro associado.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.TypeExtensions.MatchName(System.Type,System.String)">
            <summary>
            Identifica se o nome do tipo está na lista separada por ':' fornecida.
            </summary>
            <param name="instance"></param>
            <param name="nameList"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.TypeExtensions.IsIntegerType(System.Type)">
            <summary>
            Identifica se o tipo se refere a um dos tipos inteiros do CLR.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.TypeExtensions.IsDateType(System.Type)">
            <summary>
            Identifica se o tipo se refere a um dos tipos de data do CLR.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.TypeExtensions.IsFloatingPointType(System.Type)">
            <summary>
            Identifica se o tipo se refere a um dos tipos de ponto flutuante do CLR.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.TypeExtensions.GetName(System.Type)">
            <summary>
            Recupera o nome do tipo informado.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.TypeExtensions.IsNumericType(System.Type)">
            <summary>
            Verifica se é um tipo numérico.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.TypeExtensions.IsSignedIntegralType(System.Type)">
            <summary>
            Verifica se é um tipo integral com sinal.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.TypeExtensions.IsUnsignedIntegralType(System.Type)">
            <summary>
            Verifica se é um tipo integração sem sinal.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.TypeExtensions.GetNumericTypeKind(System.Type)">
            <summary>
            Recupera o tipo numérico.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:System.UriExtensions">
            <summary>
            Classe com os métodos para auxiliar a manipulação de Uri.
            </summary>
        </member>
        <member name="M:System.UriExtensions.IsPackVirtualStorage(System.Uri)">
            <summary>
            Indica que uma URI é uma pacote do tipo VirtualStorage.
            </summary>
            <param name="uri">URI a ser analisada.</param>
            <returns>Retorna verdadeiro se a URI é um pacote do tipo VirtualStorage</returns>
        </member>
        <member name="M:System.UriExtensions.IsPackApplication(System.Uri)">
            <summary>
            Indica que uma URI é um pacote do tipo aplicação.
            </summary>
            <param name="uri">URI a ser analisada.</param>
            <returns>Retorna verdadeiro se a URI é um pacote do tipo aplicação.</returns>
        </member>
        <member name="M:System.UriExtensions.IsPackSiteOfOrigin(System.Uri)">
            <summary>
            Indica que uma URI é um pacote do tipo local de origem.
            </summary>
            <param name="uri">URI a ser analisada.</param>
            <returns>Retorna verdadeiro se a URI é um pacote do local de origem.</returns>
        </member>
        <member name="M:System.UriExtensions.IsPackZip(System.Uri)">
            <summary>
            Indica que uma URI é um pacote do tipo Zip.
            </summary>
            <param name="uri">URI a ser analisada.</param>
            <returns>Retorna verdadeiro se a URI é um pacote do tipo Zip.</returns>
        </member>
        <member name="M:System.UriExtensions.GetStream(System.Uri,System.Reflection.Assembly)">
            <summary>
            Obtém uma Stream do recurso a partir da sua URI.
            </summary>
            <param name="uri">URI do recurso.</param>
            <param name="assembly">Assembly padrão.</param>
            <returns>Stream do recurso.</returns>
            <example>
            File System: "file:///C:/Folder/Resource.bin"
            File in Site: "http://www.website.com/Resource.bin"
            File in FTP: "ftp://ftp.ftpserver.com/Resource.bin"
            Absolute Pack - Resource File: "pack://application:,,,/Folder/File.bin"
            Absolute Pack - Content File: "pack://application:,,,/Folder/File.bin"
            Absolute Pack - Site of Origin File: "pack://siteoforigin:,,,/Folder/File.bin"
            Absolute Pack - Zip File: "pack://zip:,,,C:\\Folder\\Package.package/Folder/File.bin"
            Relative - (Resource -> Pack Content -> Pack Resource -> Pack Site of Origin) Resource: "/Folder/Resource.bin"
            Relative - (Resource -> Pack Content -> Pack Resource -> Pack Site of Origin) Zip File: "pack://zip:,,,Folder\\Resource.package/Folder/File.bin"
            </example>
        </member>
        <member name="M:System.UriExtensions.FileUri(System.Uri,System.Reflection.Assembly)">
            <summary>
            Obtém o URI para um arquivo a partir do URI do recurso. Se necessário será criado um arquivo temporário.
            </summary>
            <param name="uri">URI do recurso.</param>
            <param name="assembly">Assembly padrão.</param>
            <returns>URI para o arquivo.</returns>
        </member>
        <member name="T:Colosoft.Util.ArrayUtil">
            <summary>
            Classe que auxilia na manipulação de vetores.
            </summary>
        </member>
        <member name="M:Colosoft.Util.ArrayUtil.Equals(System.Byte[],System.Byte[])">
            <summary>
            Compara os vetores.
            </summary>
            <param name="a1"></param>
            <param name="a2"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Util.ArrayUtil.Equals(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Compara os vetores.
            </summary>
            <param name="a1"></param>
            <param name="a2"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Util.ArrayUtil.GetHashCode(System.Byte[])">
            <summary>
            Recupera o hash do vetor.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Util.BadChecksumException">
            <summary>
            Representa um checksum inválido.
            </summary>
        </member>
        <member name="M:Colosoft.Util.BadChecksumException.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="T:Colosoft.Util.Checksum">
            <summary>
            Checksum
            </summary>
        </member>
        <member name="M:Colosoft.Util.Checksum.GetMD5Provider">
            <summary>
            Recupera o provedor MD5.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Util.Checksum.CalculateMD5(System.IO.Stream)">
            <summary>
            Calcula o Hash MD5 da stream informada.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Util.Checksum.CalculateMD5(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calcula o Hash
            </summary>
            <param name="buffer"></param>
            <param name="offset">Offset que será usado no buffer.</param>
            <param name="count">Quantidade de bytes que serão lidos do buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Util.Checksum.CalculateMD5(System.String)">
            <summary>
            Calcula o Hash MD5 do arquivo informado.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Util.DelphiFunctions">
            <summary>
            Funções nativas do Delphi traduzidas para C#
            </summary>
        </member>
        <member name="M:Colosoft.Util.DelphiFunctions.Pred(System.Char)">
            <summary>
            Decrementa um valor ordinal
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Util.DelphiFunctions.Succ(System.Char)">
            <summary>
            Incrementa um valor ordinal
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Util.DelphiFunctions.Dec(System.Char@)">
            <summary>
            Decrementa o ordinal do parâmetro 'input' com o valor 1
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Colosoft.Util.DelphiFunctions.Dec(System.Char@,System.Int32)">
            <summary>
            Decremeta o ordinal do parâmetro 'input' respentando o valor do parâmetro 'value'
            </summary>
            <param name="input"></param>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Util.DelphiFunctions.Inc(System.Char@)">
            <summary>
            Incrementa o ordinal do parâmetro 'input' com o valor 1
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Colosoft.Util.DelphiFunctions.Inc(System.Char@,System.Int32)">
            <summary>
            Incrementa o ordinal do parâmetro 'input' respeitando o valor do parâmetro 'value'
            </summary>
            <param name="input"></param>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Util.DelphiFunctions.SetLength(System.String@,System.Int32)">
            <summary>
            Seta o length de uma string
            </summary>
            <param name="text"></param>
            <param name="value"></param>
        </member>
        <member name="T:Colosoft.Util.ISequence">
            <summary>
            Faz o cálculo de código de ordenação por letras
            </summary>
        </member>
        <member name="M:Colosoft.Util.ISequence.GetSequence(System.String,System.String)">
            <summary>
            Retorna a sequência
            </summary>
            <param name="prev">Código anterior</param>
            <param name="next">Código posterior</param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Util.ListChangedEventArgs`1">
            <summary>
            Argumento dos eventos da lista
            </summary>
            <typeparam name="T">Tipo de elemento da lista</typeparam>
        </member>
        <member name="F:Colosoft.Util.ListChangedEventArgs`1.index">
            <summary>
            Indice do elemento
            </summary>
        </member>
        <member name="F:Colosoft.Util.ListChangedEventArgs`1.item">
            <summary>
            Ítem
            </summary>
        </member>
        <member name="M:Colosoft.Util.ListChangedEventArgs`1.#ctor(System.Int32,`0)">
            <summary>
            Construtor do argumento
            </summary>
            <param name="index">Indice</param>
            <param name="item">Ítem</param>
        </member>
        <member name="T:Colosoft.Util.BeforeInsertItemEventArge`1">
            <summary>
            Argumentos dos eventos que ocorrem antes da inserção de itens na lista
            </summary>
            <typeparam name="T">Tipo do ítem a ser inserido</typeparam>
        </member>
        <member name="F:Colosoft.Util.BeforeInsertItemEventArge`1.Item">
            <summary>
            Item a ser inserido
            </summary>
        </member>
        <member name="F:Colosoft.Util.BeforeInsertItemEventArge`1.CanInsert">
            <summary>
            Se pode ou não fazer a inserção do ítem
            </summary>
        </member>
        <member name="M:Colosoft.Util.BeforeInsertItemEventArge`1.#ctor(`0)">
            <summary>
            Construtor do argumento
            </summary>
            <param name="item">item que será inserido</param>
        </member>
        <member name="T:Colosoft.Util.BeforeInsertItemEventHandler`1">
            <summary>
            Evento que ocorre antes de inserir um ítem na lista
            </summary>
            <typeparam name="T">Tipo do item a ser inserido</typeparam>
            <param name="sender">Lista de origem</param>
            <param name="e">Argumentos do evento</param>
        </member>
        <member name="T:Colosoft.Util.ItemAddedEventHandler`1">
            <summary>
            Evento que ocorre quando um elemento é adicionado à lista
            </summary>
            <param name="sender">Lista de origem</param>
            <param name="e">Argumentos do evento</param>
            <typeparam name="T">Tipo de elemento da lista</typeparam>
        </member>
        <member name="T:Colosoft.Util.ItemRemovedEventHandler`1">
            <summary>
            Evento que ocorre quando um elemento é removido da lista
            </summary>
            <param name="sender">Lista de origem</param>
            <param name="e">Argumentos do evento</param>
            <typeparam name="T">Tipo de elemento da lista</typeparam>
        </member>
        <member name="T:Colosoft.Util.ListChangedEventHandler`1">
            <summary>
            Evento que ocorre quando um elemento é adicionado ou removido da lista
            </summary>
            <param name="sender">Lista de origem</param>
            <param name="e">Argumentos do evento</param>
            <typeparam name="T">Tipo de elemento da lista</typeparam>
        </member>
        <member name="T:Colosoft.Util.ListClearedEventHandler`1">
            <summary>
            Evento que ocorre quando a lista é limpad
            </summary>
            <param name="sender">Lista de origem</param>
            <param name="e">Argumentos do evento</param>
            <typeparam name="T">Tipo de elemento da lista</typeparam>
        </member>
        <member name="T:Colosoft.Util.ObservableList`1">
            <summary>
            Lista que aciona evento quando os ítens são alterados
            </summary>
            <typeparam name="T">Tipo de elemento da lista</typeparam>
        </member>
        <member name="M:Colosoft.Util.ObservableList`1.#ctor">
            <summary>
            Construto da classe
            </summary>
        </member>
        <member name="M:Colosoft.Util.ObservableList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Cosntrutor da classe com inicialização de um IList que será observado
            </summary>
            <param name="list">IList a observar</param>
        </member>
        <member name="M:Colosoft.Util.ObservableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Cosntrutor da classe com inicialização de um IEnumerable que será observado
            </summary>
            <param name="collection">Enumerador</param>
        </member>
        <member name="M:Colosoft.Util.ObservableList`1.OnBeforeInsert(Colosoft.Util.BeforeInsertItemEventArge{`0})">
            <summary>
            Evento chamado antes de inserir um ítem na lista
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Colosoft.Util.ObservableList`1.OnItemAdded(Colosoft.Util.ListChangedEventArgs{`0})">
            <summary>
            Evento de ítem adicionado
            </summary>
            <param name="e">Argumentos</param>
        </member>
        <member name="M:Colosoft.Util.ObservableList`1.OnItemRemoved(Colosoft.Util.ListChangedEventArgs{`0})">
            <summary>
            Evento de ítem removido
            </summary>
            <param name="e">Argumento</param>
        </member>
        <member name="M:Colosoft.Util.ObservableList`1.OnListChanged(Colosoft.Util.ListChangedEventArgs{`0})">
            <summary>
            Evento de lista alterada
            </summary>
            <param name="e">Argumento</param>
        </member>
        <member name="M:Colosoft.Util.ObservableList`1.OnListCleared(System.EventArgs)">
            <summary>
            Evento de lista limpa
            </summary>
            <param name="e">Argumentos</param>
        </member>
        <member name="M:Colosoft.Util.ObservableList`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Chama evento de quando uma coleção é alterada
            </summary>
            <param name="e">Argumentos</param>
        </member>
        <member name="M:Colosoft.Util.ObservableList`1.IndexOf(`0)">
            <summary>
            Retorna o índice de um item
            </summary>
            <param name="item">Ítem</param>
            <returns>Índice do item</returns>
        </member>
        <member name="M:Colosoft.Util.ObservableList`1.Insert(System.Int32,`0)">
            <summary>
            Insere um ítem no índice especificado
            </summary>
            <param name="index">Índice</param>
            <param name="item">Ítem</param>
        </member>
        <member name="M:Colosoft.Util.ObservableList`1.RemoveAt(System.Int32)">
            <summary>
            Remove o ítem da posição especificada
            </summary>
            <param name="index">Índice</param>
        </member>
        <member name="M:Colosoft.Util.ObservableList`1.Add(`0)">
            <summary>
            Adiciona um ítem à lista
            </summary>
            <param name="item">ítem</param>
        </member>
        <member name="M:Colosoft.Util.ObservableList`1.Clear">
            <summary>
            Limpa a lista
            </summary>
        </member>
        <member name="M:Colosoft.Util.ObservableList`1.Contains(`0)">
            <summary>
            Verifica se a lista contém determinado ítem
            </summary>
            <param name="item">ítem</param>
            <returns>Verdadeiro-Tem o ítem Falso-Não tem o ítem</returns>
        </member>
        <member name="M:Colosoft.Util.ObservableList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copia a lista para um array
            </summary>
            <param name="array">Array</param>
            <param name="arrayIndex">Índice inicial do array</param>
        </member>
        <member name="M:Colosoft.Util.ObservableList`1.Remove(`0)">
            <summary>
            Remove um ítem da lista
            </summary>
            <param name="item">Ítem a ser removido</param>
            <returns>Sucesso da operação</returns>
        </member>
        <member name="M:Colosoft.Util.ObservableList`1.GetEnumerator">
            <summary>
            Retorna o enumerador
            </summary>
            <returns>enumerador</returns>
        </member>
        <member name="M:Colosoft.Util.ObservableList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retorna o enumerador
            </summary>
            <returns>enumerador</returns>
        </member>
        <member name="E:Colosoft.Util.ObservableList`1.ListChanged">
            <summary>
            Ocorre sempre que a lista é alterada
            </summary>
        </member>
        <member name="E:Colosoft.Util.ObservableList`1.ItemRemoved">
            <summary>
            Ocorre quando um ítem é removido
            </summary>
        </member>
        <member name="E:Colosoft.Util.ObservableList`1.ItemAdded">
            <summary>
            Ocorre quando um ítem é adicionado à lista
            </summary>
        </member>
        <member name="E:Colosoft.Util.ObservableList`1.ListCleared">
            <summary>
            Ocorre quando a lista é limpa
            </summary>
        </member>
        <member name="E:Colosoft.Util.ObservableList`1.BeforeInsert">
            <summary>
            Ocorre antes de adicionar um elemanto na lista
            </summary>
        </member>
        <member name="E:Colosoft.Util.ObservableList`1.CollectionChanged">
            <summary>
            Ocorre sempre que a coleção de dados é alterada
            </summary>
        </member>
        <member name="P:Colosoft.Util.ObservableList`1.Item(System.Int32)">
            <summary>
            Retorna o elemento da posição específicada
            </summary>
            <param name="index">Índice</param>
            <returns>Ítem</returns>
        </member>
        <member name="P:Colosoft.Util.ObservableList`1.Count">
            <summary>
            Retorna a quantidade de ítens da lista
            </summary>
        </member>
        <member name="P:Colosoft.Util.ObservableList`1.IsReadOnly">
            <summary>
            Indica se a lista é ou não apenas para leitura
            </summary>
        </member>
        <member name="T:Colosoft.Util.PathUtil">
            <summary>
            Classe que auxilia na utilização de path.
            </summary>
        </member>
        <member name="T:Colosoft.Util.Sequence">
            <summary>
            Classe que calcula o sequence de campos texto
            </summary>
        </member>
        <member name="M:Colosoft.Util.Sequence.GetSequence(System.String,System.String)">
            <summary>
            Retorna a sequência
            </summary>
            <param name="prev">Código anterior</param>
            <param name="next">Código posterior</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Util.Sequence.DecSequence(System.String@)">
            <summary>
            Decrementa a sequencia
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Util.Sequence.IncSequence(System.String@)">
            <summary>
            Incrementa a sequencia
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Util.Sequence.SplitSequence(System.String,System.String)">
            <summary>
            Divide sequencia
            </summary>
            <param name="prev"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Util.Sequence.#ctor">
            <summary>
            Construtor padrao
            </summary>
        </member>
        <member name="T:Colosoft.Validation.NativeValidator`1">
            <summary>
            Classe que representa os dados de um validador nativo do sistema.
            </summary>
            <typeparam name="T">Tipo do argumento que será validado.</typeparam>
        </member>
        <member name="M:Colosoft.Validation.NativeValidator`1.#ctor(`0,System.String)">
            <summary>
            Inicializa uma nova instancia da classe <see cref="T:Colosoft.Validation.NativeValidator`1"/>.
            </summary>
            <param name="value"></param>
            <param name="name"></param>
        </member>
        <member name="P:Colosoft.Validation.NativeValidator`1.Name">
            <summary>
            Recupera e define o nome do argumento que será validado.
            </summary>
        </member>
        <member name="P:Colosoft.Validation.NativeValidator`1.Value">
            <summary>
            Recupera e define o valor do argumento que será validado.
            </summary>
        </member>
        <member name="T:Colosoft.ValidatorOfTExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.ValidatorOfTExtensions.IsOfType``1(Colosoft.Validation.NativeValidator{``0},System.Type)">
            <summary>
            Aplica a validação para verificar se o objeto é o tipo experado.
            </summary>
            <typeparam name="T">Tipo do argumento que será validado.</typeparam>
            <param name="target">Instancia do objeto que será validado.</param>
            <param name="desiredType">O <see cref="T:System.Type"/> para verifica se o tipo é compatível.</param>
            <exception cref="T:System.InvalidCastException">Caso o target não seja do tipo especificado pelo parametro <paramref name="desiredType"/>.</exception>
        </member>
        <member name="M:Colosoft.ValidatorOfTExtensions.NotEmpty(Colosoft.Validation.NativeValidator{System.String})">
            <summary>
            Aplica a validação para verifica se a string não é vazia. 
            </summary>
            <param name="target">Instancia do objeto que será validado.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Caso o tamanho da string seja zero.</exception>
        </member>
        <member name="M:Colosoft.ValidatorOfTExtensions.NotNull``1(Colosoft.Validation.NativeValidator{``0})">
            <summary>
            Aplica a validação para verifica se a instancia informada não é nula.
            </summary>
            <typeparam name="T">Tipo do argumento que será validado.</typeparam>
            <param name="target">Instancia do objeto que será validado.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Caso a instancia seja nula.</exception>
        </member>
        <member name="M:Colosoft.ValidatorOfTExtensions.NotEmptyCollection``1(Colosoft.Validation.NativeValidator{``0})">
            <summary>
            Aplica a validação para verificar se o vetor informado está vazio.
            </summary>
            <typeparam name="T">Tipo do vetor que será validado.</typeparam>
            <param name="target">Instancia do objeto que será validado.</param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.ValidatorOfTExtensions.CheckForOutOfRange(Colosoft.Validation.NativeValidator{System.Int32},System.Int32)">
            <summary>
            Aplica a validação para verificar se o valor menor que o intervalo minimo.
            </summary>
            <param name="target"></param>
            <param name="minimum"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.RequireExtension">
            <summary>
            
            </summary>
        </member>
        <member name="M:Colosoft.RequireExtension.Require``1(``0,System.String)">
            <summary>
            Recupera o validador para a instancia informada.
            </summary>
            <typeparam name="T">Tipo do argumento que será validado.</typeparam>
            <param name="target"></param>
            <param name="name"></param>
            <returns>Um objeto <see cref="T:Colosoft.Validation.NativeValidator`1"/>.</returns>
        </member>
        <member name="T:Colosoft.WarningMessage">
            <summary>
            Representa uma menságem de aviso.
            </summary>
        </member>
        <member name="M:Colosoft.WarningMessage.#ctor(Colosoft.IMessageFormattable,Colosoft.IMessageFormattable)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="title">Título.</param>
            <param name="message">Mensagem.</param>
        </member>
        <member name="P:Colosoft.WarningMessage.Title">
            <summary>
            Título.
            </summary>
        </member>
        <member name="P:Colosoft.WarningMessage.Message">
            <summary>
            Mensagem.
            </summary>
        </member>
        <member name="T:Colosoft.Web.BinaryStreamStack">
            <summary>
                Provides character based and byte based stream-like read operations over multiple
                streams and provides methods to add data to the front of the buffer.
            </summary>
        </member>
        <member name="F:Colosoft.Web.BinaryStreamStack.streams">
            <summary>
                Holds the streams to read from, the stream on the top of the
                stack will be read first.
            </summary>
        </member>
        <member name="M:Colosoft.Web.BinaryStreamStack.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Colosoft.Web.BinaryStreamStack"/> class with the default
                encoding of UTF8.
            </summary>
        </member>
        <member name="M:Colosoft.Web.BinaryStreamStack.#ctor(System.Text.Encoding)">
            <summary>
                Initializes a new instance of the <see cref="T:Colosoft.Web.BinaryStreamStack"/> class.
            </summary>
            <param name="encoding">
                The encoding to use for character based operations.
            </param>
        </member>
        <member name="M:Colosoft.Web.BinaryStreamStack.HasData">
            <summary>
                Returns true if there is any data left to read.
            </summary>
            <returns>
                True or false.
            </returns>
        </member>
        <member name="M:Colosoft.Web.BinaryStreamStack.Peek">
            <summary>
                Returns the reader on the top of the stack but does not remove it.
            </summary>
            <returns>
                The <see cref="T:System.IO.BinaryReader"/>.
            </returns>
        </member>
        <member name="M:Colosoft.Web.BinaryStreamStack.Pop">
            <summary>
                Returns the reader on the top of the stack and removes it
            </summary>
            <returns>
                The <see cref="T:System.IO.BinaryReader"/>.
            </returns>
        </member>
        <member name="M:Colosoft.Web.BinaryStreamStack.Push(System.Byte[])">
            <summary>
                Pushes data to the front of the stack. The most recently pushed data will
                be read first.
            </summary>
            <param name="data">
                The data to add to the stack.
            </param>
        </member>
        <member name="M:Colosoft.Web.BinaryStreamStack.Read">
            <summary>
                Reads a single byte as an integer from the stack. Returns -1 if no
                data is left to read.
            </summary>
            <returns>
                The <see cref="T:System.Byte"/> that was read.
            </returns>
        </member>
        <member name="M:Colosoft.Web.BinaryStreamStack.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads the specified number of bytes from the stack, starting from a specified point in the byte array.
            </summary>
            <param name="buffer">
                The buffer to read data into.
            </param>
            <param name="index">
                The index of buffer to start reading into.
            </param>
            <param name="count">
                The number of bytes to read into the buffer.
            </param>
            <returns>
                The number of bytes read into buffer. This might be less than the number of bytes requested if that many bytes are not available,
                or it might be zero if the end of the stream is reached.
            </returns>
        </member>
        <member name="M:Colosoft.Web.BinaryStreamStack.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
                Reads the specified number of characters from the stack, starting from a specified point in the byte array.
            </summary>
            <param name="buffer">
                The buffer to read data into.
            </param>
            <param name="index">
                The index of buffer to start reading into.
            </param>
            <param name="count">
                The number of characters to read into the buffer.
            </param>
            <returns>
                The number of characters read into buffer. This might be less than the number of bytes requested if that many bytes are not available,
                or it might be zero if the end of the stream is reached.
            </returns>
        </member>
        <member name="M:Colosoft.Web.BinaryStreamStack.ReadByteLine">
            <summary>
                Reads the specified number of characters from the stack, starting from a specified point in the byte array.
            </summary>
            <returns>
                A byte array containing all the data up to but not including the next newline in the stack.
            </returns>
        </member>
        <member name="M:Colosoft.Web.BinaryStreamStack.ReadByteLine(System.Boolean@)">
            <summary>
                Reads a line from the stack delimited by the newline for this platform. The newline
                characters will not be included in the stream
            </summary>
            <param name="hitStreamEnd">
                This will be set to true if we did not end on a newline but instead found the end of
                our data.
            </param>
            <returns>
                The <see cref="T:System.String"/> containing the line.
            </returns>
        </member>
        <member name="M:Colosoft.Web.BinaryStreamStack.ReadLine">
            <summary>
                Reads a line from the stack delimited by the newline for this platform. The newline
                characters will not be included in the stream
            </summary>
            <returns>
                The <see cref="T:System.String"/> containing the line.
            </returns>
        </member>
        <member name="M:Colosoft.Web.BinaryStreamStack.ReadLine(System.Boolean@)">
            <summary>
                Reads a line from the stack delimited by the newline for this platform. The newline
                characters will not be included in the stream
            </summary>
            <param name="hitStreamEnd">
                This will be set to true if we did not end on a newline but instead found the end of
                our data.
            </param>
            <returns>
                The <see cref="T:System.String"/> containing the line.
            </returns>
        </member>
        <member name="M:Colosoft.Web.BinaryStreamStack.NextStream">
            <summary>
                Removes the current reader from the stack and ensures it is correctly
                destroyed and then returns the next available reader. If no reader
                is available this method returns null.
            </summary>
            <returns>
                The next <see cref="T:System.IO.BinaryReader">reader</see>.
            </returns>
        </member>
        <member name="P:Colosoft.Web.BinaryStreamStack.CurrentEncoding">
            <summary>
                Gets or sets the current encoding.
            </summary>
        </member>
        <member name="T:Colosoft.Web.ByteArrayContentParameter">
            <summary>
            Representa um conteúdo que é vetor de bytes.
            </summary>
        </member>
        <member name="T:Colosoft.Web.MultipartFormDataParameter">
            <summary>
            Representa um parametro do formdata.
            </summary>
        </member>
        <member name="M:Colosoft.Web.MultipartFormDataParameter.#ctor(System.String)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="name">Nome do parametro.</param>
        </member>
        <member name="M:Colosoft.Web.MultipartFormDataParameter.TryComputeLength(System.Int64@)">
            <summary>
            Tenta calcular o tamanho do parametro.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Web.MultipartFormDataParameter.WriteContent(System.IO.Stream)">
            <summary>
            Registra o conteúdo na stream informada.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="P:Colosoft.Web.MultipartFormDataParameter.Name">
            <summary>
            Nome do parametro.
            </summary>
        </member>
        <member name="P:Colosoft.Web.MultipartFormDataParameter.Charset">
            <summary>
            Charset do conteúdo.
            </summary>
        </member>
        <member name="P:Colosoft.Web.MultipartFormDataParameter.ContentType">
            <summary>
            Tipo de conteúdo.
            </summary>
        </member>
        <member name="M:Colosoft.Web.ByteArrayContentParameter.#ctor(System.String,System.Byte[])">
            <summary>
            Cria a instancia com o conteúdo.
            </summary>
            <param name="name"></param>
            <param name="content"></param>
        </member>
        <member name="M:Colosoft.Web.ByteArrayContentParameter.#ctor(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Cria a isntancia com o conteúdo.
            </summary>
            <param name="name"></param>
            <param name="content"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Colosoft.Web.ByteArrayContentParameter.TryComputeLength(System.Int64@)">
            <summary>
            Tenta calcular o tamanho do conteúdo.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Web.ByteArrayContentParameter.WriteContent(System.IO.Stream)">
            <summary>
            Escreve o conteúdo.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:Colosoft.Web.CompressionType">
            <summary>
            Possíveis tipo de compressão.
            </summary>
        </member>
        <member name="F:Colosoft.Web.CompressionType.None">
            <summary>
            Nenhum.
            </summary>
        </member>
        <member name="F:Colosoft.Web.CompressionType.GZip">
            <summary>
            Zip
            </summary>
        </member>
        <member name="T:Colosoft.Web.FilePart">
            <summary>
                Represents a single file extracted from a multipart/form-data
                stream.
            </summary>
        </member>
        <member name="M:Colosoft.Web.FilePart.#ctor(System.String,System.String,System.IO.Stream)">
            <summary>
                Initializes a new instance of the <see cref="T:Colosoft.Web.FilePart"/> class.
            </summary>
            <param name="name">
                The name of the input field used for the upload.
            </param>
            <param name="fileName">
                The name of the file.
            </param>
            <param name="data">
                The file data.
            </param>
        </member>
        <member name="M:Colosoft.Web.FilePart.#ctor(System.String,System.String,System.IO.Stream,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Colosoft.Web.FilePart"/> class.
            </summary>
            <param name="name">
                The name of the input field used for the upload.
            </param>
            <param name="fileName">
                The name of the file.
            </param>
            <param name="data">
                The file data.
            </param>
            <param name="contentType">
                The content type.
            </param>
            <param name="contentDisposition">
                The content disposition.
            </param>
        </member>
        <member name="P:Colosoft.Web.FilePart.Data">
            <summary>
                Gets the data.
            </summary>
        </member>
        <member name="P:Colosoft.Web.FilePart.FileName">
            <summary>
                Gets or sets the file name.
            </summary>
        </member>
        <member name="P:Colosoft.Web.FilePart.Name">
            <summary>
                Gets or sets the name.
            </summary>
        </member>
        <member name="P:Colosoft.Web.FilePart.ContentType">
            <summary>
                Gets or sets the content-type. Defaults to text/plain if unspecified.
            </summary>
        </member>
        <member name="P:Colosoft.Web.FilePart.ContentDisposition">
            <summary>
                Gets or sets the content-disposition. Defaults to form-data if unspecified.
            </summary>
        </member>
        <member name="T:Colosoft.Web.HttpUtility">
            <summary>
            Classe com método para auxiliar na manipulação do http.
            </summary>
        </member>
        <member name="M:Colosoft.Web.HttpUtility.HexToInt(System.Char)">
            <summary>
            Converte um valor hexadecimal para inteiro.
            </summary>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Web.HttpUtility.IntToHex(System.Int32)">
            <summary>
            Converter um inteiro para hexdecimal.
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Web.HttpUtility.UrlDecodeStringFromStringInternal(System.String,System.Text.Encoding)">
            <summary>
            Decodifica a URL.
            </summary>
            <param name="s"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Web.HttpUtility.UrlEncodeBytesToBytesInternal(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Codifiac a string para URL.
            </summary>
            <param name="bytes"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="alwaysCreateReturnValue"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Web.HttpUtility.IsSafe(System.Char)">
            <summary>
            Verifica se é um caracter seguro.
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Web.HttpUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Realiza o encode da url para pbytes.
            </summary>
            <param name="bytes"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Web.HttpUtility.UrlEncode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Realiza o encode da url.
            </summary>
            <param name="bytes"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Web.HttpUtility.UrlEncodeToBytes(System.String,System.Text.Encoding)">
            <summary>
            Realiza o encode da url.
            </summary>
            <param name="str"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Web.HttpUtility.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            Realiza o encode da url.
            </summary>
            <param name="str"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Web.HttpUtility.UrlEncode(System.String)">
            <summary>
            Realiza o encode da url.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Web.HttpUtility.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            Decodifica a url.
            </summary>
            <param name="str"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Web.HttpUtility.UrlDecode(System.String)">
            <summary>
            Decodifica a url.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Web.IRequestParameter">
            <summary>
            Assinatura de um parametro para uma requisição.
            </summary>
        </member>
        <member name="M:Colosoft.Web.IRequestParameter.WriteOutput(System.IO.Stream)">
            <summary>
            Escreve a saída do parametro na stream.
            </summary>
            <param name="outputStream"></param>
        </member>
        <member name="P:Colosoft.Web.IRequestParameter.ContentLength">
            <summary>
            Tamanho do conteúdo que será postado.
            </summary>
        </member>
        <member name="P:Colosoft.Web.IRequestParameter.ContentType">
            <summary>
            Tipo de conteúdo que o parametro representa na requisicao.
            </summary>
        </member>
        <member name="T:Colosoft.Web.MultipartFormDataContent">
            <summary>
            Representa um contúdo multipart.
            </summary>
        </member>
        <member name="M:Colosoft.Web.MultipartFormDataContent.#ctor">
            <summary>
            Construtor padrão.
            </summary>
        </member>
        <member name="M:Colosoft.Web.MultipartFormDataContent.#ctor(System.String)">
            <summary>
            Cria a instancia com o sub tipo.
            </summary>
            <param name="subtype"></param>
        </member>
        <member name="M:Colosoft.Web.MultipartFormDataContent.#ctor(System.String,System.String)">
            <summary>
            Cria a instancia como subtipo e o delimitador.
            </summary>
            <param name="subtype"></param>
            <param name="boundary"></param>
        </member>
        <member name="M:Colosoft.Web.MultipartFormDataContent.WriteOutput(System.IO.Stream)">
            <summary>
            Escreve a saída.
            </summary>
            <param name="outputStream"></param>
        </member>
        <member name="M:Colosoft.Web.MultipartFormDataContent.Colosoft#Web#IRequestParameter#WriteOutput(System.IO.Stream)">
            <summary>
            Escreve a saída do parametro.
            </summary>
            <param name="outputStream"></param>
        </member>
        <member name="P:Colosoft.Web.MultipartFormDataContent.DefaultEncoding">
            <summary>
            Codificação que será utilizada.
            </summary>
        </member>
        <member name="P:Colosoft.Web.MultipartFormDataContent.ContentLength">
            <summary>
            Tamanho do conteúdo.
            </summary>
        </member>
        <member name="P:Colosoft.Web.MultipartFormDataContent.ContentType">
            <summary>
            Tipo do conteúdo.
            </summary>
        </member>
        <member name="T:Colosoft.Web.MultipartFormDataParser">
            <summary>
                Provides methods to parse a
                <see href="http://www.ietf.org/rfc/rfc2388.txt">
                    <c>multipart/form-data</c>
                </see>
                stream into it's parameters and file data.
            </summary>
            <remarks>
                <para>
                    A parameter is defined as any non-file data passed in the multipart stream. For example
                    any form fields would be considered a parameter.
                </para>
                <para>
                    The parser determines if a section is a file or not based on the presence or absence
                    of the filename argument for the Content-Type header. If filename is set then the section
                    is assumed to be a file, otherwise it is assumed to be parameter data.
                </para>
            </remarks>
            <example>
                <code lang="C#"> 
                  Stream multipartStream = GetTheMultipartStream();
                  string boundary = GetTheBoundary();
                  var parser = new MultipartFormDataParser(multipartStream, boundary, Encoding.UTF8);
             
                  // Grab the parameters (non-file data). Key is based on the name field
                  var username = parser.Parameters["username"].Data;
                  var password = parser.parameters["password"].Data;
                  
                  // Grab the first files data
                  var file = parser.Files.First();
                  var filename = file.FileName;
                  var filestream = file.Data;
              </code>
                <code lang="C#">
                // In the context of WCF you can get the boundary from the HTTP
                // request
                public ResponseClass MyMethod(Stream multipartData)
                {
                    // First we need to get the boundary from the header, this is sent
                    // with the HTTP request. We can do that in WCF using the WebOperationConext:
                    var type = WebOperationContext.Current.IncomingRequest.Headers["Content-Type"];
            
                    // Now we want to strip the boundary out of the Content-Type, currently the string
                    // looks like: "multipart/form-data; boundary=---------------------124123qase124"
                    var boundary = type.Substring(type.IndexOf('=')+1);
            
                    // Now that we've got the boundary we can parse our multipart and use it as normal
                    var parser = new MultipartFormDataParser(data, boundary, Encoding.UTF8);
            
                    ...
                }
              </code>
            </example>
        </member>
        <member name="F:Colosoft.Web.MultipartFormDataParser.DefaultBufferSize">
            <summary>
                The default buffer size.
            </summary>
        </member>
        <member name="M:Colosoft.Web.MultipartFormDataParser.#ctor(System.IO.Stream)">
            <summary>
                Initializes a new instance of the <see cref="T:Colosoft.Web.MultipartFormDataParser"/> class
                with an input stream. Boundary will be automatically detected based on the
                first line of input.
            </summary>
            <param name="stream">
                The stream containing the multipart data
            </param>
        </member>
        <member name="M:Colosoft.Web.MultipartFormDataParser.#ctor(System.IO.Stream,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Colosoft.Web.MultipartFormDataParser"/> class
                with the boundary and input stream.
            </summary>
            <param name="stream">
                The stream containing the multipart data
            </param>
            <param name="boundary">
                The multipart/form-data boundary. This should be the value
                returned by the request header.
            </param>
        </member>
        <member name="M:Colosoft.Web.MultipartFormDataParser.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
                Initializes a new instance of the <see cref="T:Colosoft.Web.MultipartFormDataParser"/> class
                with the input stream and stream encoding. Boundary is automatically
                detected.
            </summary>
            <param name="stream">
                The stream containing the multipart data
            </param>
            <param name="encoding">
                The encoding of the multipart data
            </param>
        </member>
        <member name="M:Colosoft.Web.MultipartFormDataParser.#ctor(System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>
                Initializes a new instance of the <see cref="T:Colosoft.Web.MultipartFormDataParser"/> class
                with the boundary, input stream and stream encoding.
            </summary>
            <param name="stream">
                The stream containing the multipart data
            </param>
            <param name="boundary">
                The multipart/form-data boundary. This should be the value
                returned by the request header.
            </param>
            <param name="encoding">
                The encoding of the multipart data
            </param>
        </member>
        <member name="M:Colosoft.Web.MultipartFormDataParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Colosoft.Web.MultipartFormDataParser"/> class
                with the stream, input encoding and buffer size. Boundary is automatically
                detected.
            </summary>
            <param name="stream">
                The stream containing the multipart data
            </param>
            <param name="encoding">
                The encoding of the multipart data
            </param>
            <param name="binaryBufferSize">
                The size of the buffer to use for parsing the multipart form data. This must be larger
                then (size of boundary + 4 + # bytes in newline).
            </param>
        </member>
        <member name="M:Colosoft.Web.MultipartFormDataParser.#ctor(System.IO.Stream,System.String,System.Text.Encoding,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Colosoft.Web.MultipartFormDataParser"/> class
                with the boundary, stream, input encoding and buffer size.
            </summary>
            <param name="stream">
                The stream containing the multipart data
            </param>
            <param name="boundary">
                The multipart/form-data boundary. This should be the value
                returned by the request header.
            </param>
            <param name="encoding">
                The encoding of the multipart data
            </param>
            <param name="binaryBufferSize">
                The size of the buffer to use for parsing the multipart form data. This must be larger
                then (size of boundary + 4 + # bytes in newline).
            </param>
        </member>
        <member name="M:Colosoft.Web.MultipartFormDataParser.HasParameter(System.String)">
            <summary>
            Returns true if the parameter has any values. False otherwise
            </summary>
            <param name="name">The name of the parameter</param>
            <returns>True if the parameter exists. False otherwise</returns>
        </member>
        <member name="M:Colosoft.Web.MultipartFormDataParser.GetParameterValue(System.String)">
            <summary>
            Returns the value of a parameter or null if it doesn't exist. 
            
            You should only use this method if you're sure the parameter has only one value. 
            
            If you need to support multiple values use GetParameterValues.
            </summary>
            <param name="name">The name of the parameter</param>
            <returns>The value of the parameter</returns>
        </member>
        <member name="M:Colosoft.Web.MultipartFormDataParser.GetParameterValues(System.String)">
            <summary>
            Returns the values of a parameter or an empty enumerable if the parameter doesn't exist.
            </summary>
            <param name="name">The name of the parameter</param>
            <returns>The values of the parameter</returns>
        </member>
        <member name="P:Colosoft.Web.MultipartFormDataParser.Files">
            <summary>
                Gets the mapping of parameters parsed files. The name of a given field
                maps to the parsed file data.
            </summary>
        </member>
        <member name="P:Colosoft.Web.MultipartFormDataParser.Parameters">
            <summary>
                Gets the parameters. Several ParameterParts may share the same name.
            </summary>
        </member>
        <member name="T:Colosoft.Web.MultipartParseException">
            <summary>
                Represents a parsing problem occurring within the MultipartFormDataParser
            </summary>
        </member>
        <member name="M:Colosoft.Web.MultipartParseException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Colosoft.Web.MultipartParseException"/> class.
            </summary>
            <param name="message">
                The message.
            </param>
        </member>
        <member name="T:Colosoft.Web.ParameterPart">
            <summary>
                Represents a single parameter extracted from a multipart/form-data
                stream.
            </summary>
            <remarks>
                For our purposes a "parameter" is defined as any non-file data
                in the multipart/form-data stream.
            </remarks>
        </member>
        <member name="M:Colosoft.Web.ParameterPart.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Colosoft.Web.ParameterPart"/> class.
            </summary>
            <param name="name">
                The name.
            </param>
            <param name="data">
                The data.
            </param>
        </member>
        <member name="P:Colosoft.Web.ParameterPart.Data">
            <summary>
                Gets the data.
            </summary>
        </member>
        <member name="P:Colosoft.Web.ParameterPart.Name">
            <summary>
                Gets or sets the name.
            </summary>
        </member>
        <member name="T:Colosoft.Web.PayloadParameter">
            <summary>
            Implementacao do parametro da requisicao Payload.
            </summary>
        </member>
        <member name="M:Colosoft.Web.PayloadParameter.#ctor(System.String)">
            <summary>
            Construtor padrao.
            </summary>
            <param name="content">Conteúdo do parametro.</param>
        </member>
        <member name="M:Colosoft.Web.PayloadParameter.Colosoft#Web#IRequestParameter#WriteOutput(System.IO.Stream)">
            <summary>
            Escreve a saída do parametro.
            </summary>
            <param name="outputStream"></param>
        </member>
        <member name="P:Colosoft.Web.PayloadParameter.Content">
            <summary>
            Conteúdo do parametro.
            </summary>
        </member>
        <member name="P:Colosoft.Web.PayloadParameter.Colosoft#Web#IRequestParameter#ContentLength">
            <summary>
            Tamanho do conteudo que sera postado.
            </summary>
        </member>
        <member name="P:Colosoft.Web.PayloadParameter.Colosoft#Web#IRequestParameter#ContentType">
            <summary>
            Tipo de conteúdo.
            </summary>
        </member>
        <member name="T:Colosoft.Web.PostParameter">
            <summary>
            Representa um parametro que sera postado em um requisicao.
            </summary>
        </member>
        <member name="M:Colosoft.Web.PostParameter.#ctor(System.String,System.String)">
            <summary>
            Construtor padrao.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Colosoft.Web.PostParameter.ToString">
            <summary>
            Recupera o texto que representa a instancia.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Web.PostParameter.Name">
            <summary>
            Nome do parametro.
            </summary>
        </member>
        <member name="P:Colosoft.Web.PostParameter.Value">
            <summary>
            Valor do parametro
            </summary>
        </member>
        <member name="T:Colosoft.Web.PostParameterCollection">
            <summary>
            Colecao dos parametros.
            </summary>
        </member>
        <member name="M:Colosoft.Web.PostParameterCollection.Colosoft#Web#IRequestParameter#WriteOutput(System.IO.Stream)">
            <summary>
            Escreve a saída do parametro.
            </summary>
            <param name="outputStream"></param>
        </member>
        <member name="M:Colosoft.Web.PostParameterCollection.WriteOutput(System.IO.Stream)">
            <summary>
            Escreve a saída do parametro.
            </summary>
            <param name="outputStream"></param>
        </member>
        <member name="P:Colosoft.Web.PostParameterCollection.DefaultEncoding">
            <summary>
            Codificação que será utilizada.
            </summary>
        </member>
        <member name="P:Colosoft.Web.PostParameterCollection.ContentLength">
            <summary>
            Tamanho do conteudo que sera postado.
            </summary>
        </member>
        <member name="P:Colosoft.Web.PostParameterCollection.Colosoft#Web#IRequestParameter#ContentType">
            <summary>
            Tipo de conteúdo.
            </summary>
        </member>
        <member name="T:Colosoft.Web.RebufferableBinaryReader">
            <summary>
                Provides methods to interpret and read a stream as either character or binary
                data similar to a <see cref="T:System.IO.BinaryReader"/> and provides the ability to push
                data onto the front of the stream.
            </summary>
        </member>
        <member name="F:Colosoft.Web.RebufferableBinaryReader.bufferSize">
            <summary>
                The size of the buffer to use when reading new data.
            </summary>
        </member>
        <member name="F:Colosoft.Web.RebufferableBinaryReader.encoding">
            <summary>
                The encoding to use for character based operations
            </summary>
        </member>
        <member name="F:Colosoft.Web.RebufferableBinaryReader.stream">
            <summary>
                The stream to read raw data from.
            </summary>
        </member>
        <member name="F:Colosoft.Web.RebufferableBinaryReader.streamStack">
            <summary>
                The stream stack to store buffered data.
            </summary>
        </member>
        <member name="M:Colosoft.Web.RebufferableBinaryReader.#ctor(System.IO.Stream)">
            <summary>
                Initializes a new instance of the <see cref="T:Colosoft.Web.RebufferableBinaryReader"/> class.
                Default encoding of UTF8 will be used.
            </summary>
            <param name="input">
                The input stream to read from.
            </param>
        </member>
        <member name="M:Colosoft.Web.RebufferableBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
                Initializes a new instance of the <see cref="T:Colosoft.Web.RebufferableBinaryReader"/> class.
            </summary>
            <param name="input">
                The input stream to read from.
            </param>
            <param name="encoding">
                The encoding to use for character based operations.
            </param>
        </member>
        <member name="M:Colosoft.Web.RebufferableBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Colosoft.Web.RebufferableBinaryReader"/> class.
            </summary>
            <param name="input">
                The input stream to read from.
            </param>
            <param name="encoding">
                The encoding to use for character based operations.
            </param>
            <param name="bufferSize">
                The buffer size to use for new buffers.
            </param>
        </member>
        <member name="M:Colosoft.Web.RebufferableBinaryReader.Buffer(System.Byte[])">
            <summary>
                Adds data to the front of the stream. The most recently buffered data will
                be read first.
            </summary>
            <param name="data">
                The data to buffer.
            </param>
        </member>
        <member name="M:Colosoft.Web.RebufferableBinaryReader.Buffer(System.String)">
            <summary>
                Adds the string to the front of the stream. The most recently buffered data will
                be read first.
            </summary>
            <param name="data">
                The data.
            </param>
        </member>
        <member name="M:Colosoft.Web.RebufferableBinaryReader.Read">
            <summary>
                Reads a single byte as an integer from the stream. Returns -1 if no
                data is left to read.
            </summary>
            <returns>
                The <see cref="T:System.Byte"/> that was read.
            </returns>
        </member>
        <member name="M:Colosoft.Web.RebufferableBinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads the specified number of bytes from the stream, starting from a
                specified point in the byte array.
            </summary>
            <param name="buffer">
                The buffer to read data into.
            </param>
            <param name="index">
                The index of buffer to start reading into.
            </param>
            <param name="count">
                The number of bytes to read into the buffer.
            </param>
            <returns>
                The number of bytes read into buffer. This might be less than the number of bytes requested if that many bytes are not available,
                or it might be zero if the end of the stream is reached.
            </returns>
        </member>
        <member name="M:Colosoft.Web.RebufferableBinaryReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
                Reads the specified number of characters from the stream, starting from a
                specified point in the byte array.
            </summary>
            <param name="buffer">
                The buffer to read data into.
            </param>
            <param name="index">
                The index of buffer to start reading into.
            </param>
            <param name="count">
                The number of characters to read into the buffer.
            </param>
            <returns>
                The number of characters read into buffer. This might be less than the number of
                characters requested if that many characters are not available,
                or it might be zero if the end of the stream is reached.
            </returns>
        </member>
        <member name="M:Colosoft.Web.RebufferableBinaryReader.ReadByteLine">
            <summary>
                Reads a series of bytes delimited by the byte encoding of newline for this platform.
                the newline bytes will not be included in the return data.
            </summary>
            <returns>
                A byte array containing all the data up to but not including the next newline in the stack.
            </returns>
        </member>
        <member name="M:Colosoft.Web.RebufferableBinaryReader.ReadLine">
            <summary>
                Reads a line from the stack delimited by the newline for this platform. The newline
                characters will not be included in the stream
            </summary>
            <returns>
                The <see cref="T:System.String"/> containing the line or null if end of stream.
            </returns>
        </member>
        <member name="M:Colosoft.Web.RebufferableBinaryReader.GetBomOffset(System.Byte[])">
            <summary>
                Determines the byte order marking offset (if any) from the
                given buffer.
            </summary>
            <param name="buffer">
                The buffer to examine.
            </param>
            <returns>
                The <see cref="T:System.Int32"/> representing the length of the byte order marking.
            </returns>
        </member>
        <member name="M:Colosoft.Web.RebufferableBinaryReader.StreamData">
            <summary>
                Reads more data from the stream into the stream stack.
            </summary>
            <returns>
                The number of bytes read into the stream stack as an <see cref="T:System.Int32"/>
            </returns>
        </member>
        <member name="T:Colosoft.Web.RequestResult">
            <summary>
             Armazena os dados de uma requisicao.
             </summary>
        </member>
        <member name="M:Colosoft.Web.RequestResult.#ctor(System.Net.HttpWebResponse,System.Net.HttpStatusCode,System.String,System.Text.Encoding,System.IO.Stream)">
            <summary>
            Construtor padrao.
            </summary>
            <param name="response"></param>
            <param name="statusCode"></param>
            <param name="statusDescription"></param>
            <param name="encoding"></param>
            <param name="responseStream"></param>
        </member>
        <member name="M:Colosoft.Web.RequestResult.GetResponseStream">
            <summary>
            Recupera a stream da resposta.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Web.RequestResult.Dispose">
            <summary>
            Libera a instancia.
            </summary>
        </member>
        <member name="M:Colosoft.Web.RequestResult.Dispose(System.Boolean)">
            <summary>
            Libera a instancia.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Colosoft.Web.RequestResult.Response">
            <summary>
            Resposta do servidor.
            </summary>
        </member>
        <member name="P:Colosoft.Web.RequestResult.StatusCode">
            <summary>
            Codigo da situacao da requisicao.
            </summary>
        </member>
        <member name="P:Colosoft.Web.RequestResult.StatusDescription">
            <summary>
            Descricao da situacao da requisicao.
            </summary>
        </member>
        <member name="P:Colosoft.Web.RequestResult.Data">
            <summary>
            Dados da resposta.
            </summary>
        </member>
        <member name="P:Colosoft.Web.RequestResult.IsValid">
            <summary>
            Identifica se é um resultado valido.
            </summary>
        </member>
        <member name="T:Colosoft.Web.StreamingMultipartFormDataParser">
             <summary>
                 Provides methods to parse a
                 <see href="http://www.ietf.org/rfc/rfc2388.txt">
                     <c>multipart/form-data</c>
                 </see>
                 stream into it's parameters and file data.
             </summary>
             <remarks>
                 <para>
                     A parameter is defined as any non-file data passed in the multipart stream. For example
                     any form fields would be considered a parameter.
                 </para>
                 <para>
                     The parser determines if a section is a file or not based on the presence or absence
                     of the filename argument for the Content-Type header. If filename is set then the section
                     is assumed to be a file, otherwise it is assumed to be parameter data.
                 </para>
             </remarks>
             <example>
                 <code lang="C#"> 
                   Stream multipartStream = GetTheMultipartStream();
                   string boundary = GetTheBoundary();
                   var parser = new StreamingMultipartFormDataParser(multipartStream, boundary, Encoding.UTF8);
            
                   // Set up our delegates for how we want to handle recieved data. 
                   // In our case parameters will be written to a dictionary and files
                   // will be written to a filestream
                   parser.ParameterHandler += parameter => AddToDictionary(parameter);
                   parser.FileHandler += (name, fileName, type, disposition, buffer, bytes) => WriteDataToFile(fileName, buffer, bytes);
                   parser.Run();
               </code>
             </example>
        </member>
        <member name="F:Colosoft.Web.StreamingMultipartFormDataParser.DefaultBufferSize">
            <summary>
                The default buffer size.
            </summary>
        </member>
        <member name="F:Colosoft.Web.StreamingMultipartFormDataParser.stream">
            <summary>
                The stream we are parsing.
            </summary>
        </member>
        <member name="F:Colosoft.Web.StreamingMultipartFormDataParser.boundary">
            <summary>
                The boundary of the multipart message  as a string.
            </summary>
        </member>
        <member name="F:Colosoft.Web.StreamingMultipartFormDataParser.boundaryBinary">
            <summary>
                The boundary of the multipart message as a byte string
                encoded with CurrentEncoding
            </summary>
        </member>
        <member name="F:Colosoft.Web.StreamingMultipartFormDataParser.endBoundary">
            <summary>
                The end boundary of the multipart message as a string.
            </summary>
        </member>
        <member name="F:Colosoft.Web.StreamingMultipartFormDataParser.endBoundaryBinary">
            <summary>
                The end boundary of the multipart message as a byte string
                encoded with CurrentEncoding
            </summary>
        </member>
        <member name="F:Colosoft.Web.StreamingMultipartFormDataParser.readEndBoundary">
            <summary>
                Determines if we have consumed the end boundary binary and determines
                if we are done parsing.
            </summary>
        </member>
        <member name="M:Colosoft.Web.StreamingMultipartFormDataParser.#ctor(System.IO.Stream)">
            <summary>
                Initializes a new instance of the <see cref="T:Colosoft.Web.StreamingMultipartFormDataParser"/> class
                with an input stream. Boundary will be automatically detected based on the
                first line of input.
            </summary>
            <param name="stream">
                The stream containing the multipart data
            </param>
        </member>
        <member name="M:Colosoft.Web.StreamingMultipartFormDataParser.#ctor(System.IO.Stream,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Colosoft.Web.StreamingMultipartFormDataParser"/> class
                with the boundary and input stream.
            </summary>
            <param name="stream">
                The stream containing the multipart data
            </param>
            <param name="boundary">
                The multipart/form-data boundary. This should be the value
                returned by the request header.
            </param>
        </member>
        <member name="M:Colosoft.Web.StreamingMultipartFormDataParser.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
                Initializes a new instance of the <see cref="T:Colosoft.Web.StreamingMultipartFormDataParser"/> class
                with the input stream and stream encoding. Boundary is automatically
                detected.
            </summary>
            <param name="stream">
                The stream containing the multipart data
            </param>
            <param name="encoding">
                The encoding of the multipart data
            </param>
        </member>
        <member name="M:Colosoft.Web.StreamingMultipartFormDataParser.#ctor(System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>
                Initializes a new instance of the <see cref="T:Colosoft.Web.StreamingMultipartFormDataParser"/> class
                with the boundary, input stream and stream encoding.
            </summary>
            <param name="stream">
                The stream containing the multipart data
            </param>
            <param name="boundary">
                The multipart/form-data boundary. This should be the value
                returned by the request header.
            </param>
            <param name="encoding">
                The encoding of the multipart data
            </param>
        </member>
        <member name="M:Colosoft.Web.StreamingMultipartFormDataParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Colosoft.Web.StreamingMultipartFormDataParser"/> class
                with the stream, input encoding and buffer size. Boundary is automatically
                detected.
            </summary>
            <param name="stream">
                The stream containing the multipart data
            </param>
            <param name="encoding">
                The encoding of the multipart data
            </param>
            <param name="binaryBufferSize">
                The size of the buffer to use for parsing the multipart form data. This must be larger
                then (size of boundary + 4 + # bytes in newline).
            </param>
        </member>
        <member name="M:Colosoft.Web.StreamingMultipartFormDataParser.#ctor(System.IO.Stream,System.String,System.Text.Encoding,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Colosoft.Web.StreamingMultipartFormDataParser"/> class
                with the boundary, stream, input encoding and buffer size.
            </summary>
            <param name="stream">
                The stream containing the multipart data
            </param>
            <param name="boundary">
                The multipart/form-data boundary. This should be the value
                returned by the request header.
            </param>
            <param name="encoding">
                The encoding of the multipart data
            </param>
            <param name="binaryBufferSize">
                The size of the buffer to use for parsing the multipart form data. This must be larger
                then (size of boundary + 4 + # bytes in newline).
            </param>
        </member>
        <member name="M:Colosoft.Web.StreamingMultipartFormDataParser.Run">
            <summary>
                Begins executing the parser. This should be called after all handlers have been set.
            </summary>
        </member>
        <member name="M:Colosoft.Web.StreamingMultipartFormDataParser.DetectBoundary(Colosoft.Web.RebufferableBinaryReader)">
            <summary>
                Detects the boundary from the input stream. Assumes that the
                current position of the reader is the start of the file and therefore
                the beginning of the boundary.
            </summary>
            <param name="reader">
                The binary reader to parse
            </param>
            <returns>
                The boundary string
            </returns>
        </member>
        <member name="M:Colosoft.Web.StreamingMultipartFormDataParser.FindNextNewline(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
                Finds the next sequence of newlines in the input stream.
            </summary>
            <param name="data">The data to search</param>
            <param name="offset">The offset to start searching at</param>
            <param name="maxBytes">The maximum number of bytes (starting from offset) to search.</param>
            <returns>The offset of the next newline</returns>
        </member>
        <member name="M:Colosoft.Web.StreamingMultipartFormDataParser.CalculateNewlineLength(System.Byte[]@,System.Int32)">
            <summary>
                Calculates the length of the next found newline.
                data[offset] is the start of the space to search.
            </summary>
            <param name="data">
                The data containing the newline
            </param>
            <param name="offset">
                The offset of the start of the newline
            </param>
            <returns>
                The length in bytes of the newline sequence
            </returns>
        </member>
        <member name="M:Colosoft.Web.StreamingMultipartFormDataParser.Parse(Colosoft.Web.RebufferableBinaryReader)">
            <summary>
                Begins the parsing of the stream into objects.
            </summary>
            <param name="reader">
                The multipart/form-data binary reader to parse from.
            </param>
            <exception cref="T:Colosoft.Web.MultipartParseException">
                thrown on finding unexpected data such as a boundary before we are ready for one.
            </exception>
        </member>
        <member name="M:Colosoft.Web.StreamingMultipartFormDataParser.ParseFilePart(System.Collections.Generic.Dictionary{System.String,System.String},Colosoft.Web.RebufferableBinaryReader)">
            <summary>
                Parses a section of the stream that is known to be file data.
            </summary>
            <param name="parameters">
                The header parameters of this file, expects "name" and "filename" to be valid keys
            </param>
            <param name="reader">
                The StreamReader to read the data from
            </param>
            <returns>
                The <see cref="T:Colosoft.Web.FilePart"/> con[]              taining the parsed data (name, filename, stream containing file).
            </returns>
        </member>
        <member name="M:Colosoft.Web.StreamingMultipartFormDataParser.ParseParameterPart(System.Collections.Generic.Dictionary{System.String,System.String},Colosoft.Web.RebufferableBinaryReader)">
            <summary>
                Parses a section of the stream that is known to be parameter data.
            </summary>
            <param name="parameters">
                The header parameters of this section. "name" must be a valid key.
            </param>
            <param name="reader">
                The StreamReader to read the data from
            </param>
            <returns>
                The <see cref="T:Colosoft.Web.ParameterPart"/> containing the parsed data (name, value).
            </returns>
            <exception cref="T:Colosoft.Web.MultipartParseException">
                thrown if unexpected data is found such as running out of stream before hitting the boundary.
            </exception>
        </member>
        <member name="M:Colosoft.Web.StreamingMultipartFormDataParser.ParseSection(Colosoft.Web.RebufferableBinaryReader)">
            <summary>
                Parses the header of the next section of the multipart stream and
                determines if it contains file data or parameter data.
            </summary>
            <param name="reader">
                The StreamReader to read data from.
            </param>
            <exception cref="T:Colosoft.Web.MultipartParseException">
                thrown if unexpected data is hit such as end of stream.
            </exception>
        </member>
        <member name="M:Colosoft.Web.StreamingMultipartFormDataParser.SplitBySemicolonIgnoringSemicolonsInQuotes(System.String)">
            <summary>
                Splits a line by semicolons but ignores semicolons in quotes.
            </summary>
            <param name="line">The line to split</param>
            <returns>The split strings</returns>
        </member>
        <member name="P:Colosoft.Web.StreamingMultipartFormDataParser.BinaryBufferSize">
            <summary>
                Gets or sets the binary buffer size.
            </summary>
        </member>
        <member name="P:Colosoft.Web.StreamingMultipartFormDataParser.Encoding">
            <summary>
                Gets the encoding.
            </summary>
        </member>
        <member name="P:Colosoft.Web.StreamingMultipartFormDataParser.FileHandler">
            <summary>
            The FileHandler. Delegates attached to this property will recieve sequential file stream data from this parser.
            </summary>
        </member>
        <member name="P:Colosoft.Web.StreamingMultipartFormDataParser.ParameterHandler">
            <summary>
            The ParameterHandler. Delegates attached to this property will recieve parameter data.
            </summary>
        </member>
        <member name="P:Colosoft.Web.StreamingMultipartFormDataParser.StreamClosedHandler">
            <summary>
            The StreamClosedHandler. Delegates attached to this property will be notified when the source stream is exhausted.
            </summary>
        </member>
        <member name="T:Colosoft.Web.StreamingMultipartFormDataParser.FileStreamDelegate">
             <summary>
             The FileStreamDelegate defining functions that can handle file stream data from this parser.
            
             Delegates can assume that the data is sequential i.e. the data recieved by any delegates will be
             the data immediately following any previously recieved data.
             </summary>
             <param name="name">The name of the multipart data</param>
             <param name="fileName">The name of the file</param>
             <param name="contentType">The content type of the multipart data</param>
             <param name="contentDisposition">The content disposition of the multipart data</param>
             <param name="buffer">Some of the data from the file (not neccecarily all of the data)</param>
             <param name="bytes">The length of data in buffer</param>
        </member>
        <member name="T:Colosoft.Web.StreamingMultipartFormDataParser.StreamClosedDelegate">
            <summary>
            Assinatura do evento acionado quando o stream for fechada.
            </summary>
        </member>
        <member name="T:Colosoft.Web.StreamingMultipartFormDataParser.ParameterDelegate">
            <summary>
            The ParameterDelegate defining functions that can handle multipart parameter data
            </summary>
            <param name="part">The parsed parameter part</param>
        </member>
        <member name="T:Colosoft.Web.StringContentParameter">
            <summary>
            Representa o conteúdo do tipo string.
            </summary>
        </member>
        <member name="M:Colosoft.Web.StringContentParameter.#ctor(System.String,System.String)">
            <summary>
            Cria a instancia com o nome do parametro e o conteúdo.
            </summary>
            <param name="name"></param>
            <param name="content"></param>
        </member>
        <member name="M:Colosoft.Web.StringContentParameter.#ctor(System.String,System.String,System.Text.Encoding)">
            <summary>
            Cria a instancia com o nome do parametro e o conteúdo.
            </summary>
            <param name="name"></param>
            <param name="content"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Colosoft.Web.StringContentParameter.#ctor(System.String,System.String,System.Text.Encoding,System.String)">
            <summary>
            Cria a instancia com o nome do parametro e o conteído.
            </summary>
            <param name="name"></param>
            <param name="content"></param>
            <param name="encoding"></param>
            <param name="mediaType"></param>
        </member>
        <member name="M:Colosoft.Web.StringContentParameter.GetContentByteArray(System.String,System.Text.Encoding)">
            <summary>
            Recupera os bytes.
            </summary>
            <param name="content"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Web.SubsequenceFinder">
            <summary>
                Provides methods to find a subsequence within a
                sequence.
            </summary>
        </member>
        <member name="M:Colosoft.Web.SubsequenceFinder.Search(System.Byte[],System.Byte[],System.Int32)">
            <summary>
                Finds if a sequence exists within another sequence. 
            </summary>
            <param name="haystack">
                The sequence to search
            </param>
            <param name="needle">
                The sequence to look for
            </param>
            <param name="haystackLength">
                The length of the haystack to consider for searching
            </param>
            <returns>
                The start position of the found sequence or -1 if nothing was found
            </returns>
        </member>
        <member name="T:Colosoft.Web.UrlDecoder">
            <summary>
            Decoder de URL.
            </summary>
        </member>
        <member name="M:Colosoft.Web.UrlDecoder.#ctor(System.Int32,System.Text.Encoding)">
            <summary>
            Construtor padrão.
            </summary>
            <param name="bufferSize"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Colosoft.Web.UrlDecoder.AddByte(System.Byte)">
            <summary>
            Adiciona um byte.
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:Colosoft.Web.UrlDecoder.AddChar(System.Char)">
            <summary>
            Adiciona um char.
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:Colosoft.Web.UrlDecoder.FlushBytes">
            <summary>
            Flush nos bytes.
            </summary>
        </member>
        <member name="M:Colosoft.Web.UrlDecoder.GetString">
            <summary>
            Recupera a string associado.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Colosoft.Web.WebClient">
            <summary>
            Representa o cliente de acesso a web.
            </summary>
        </member>
        <member name="M:Colosoft.Web.WebClient.Request(System.String)">
            <summary>
            Realiza a requisicao de uma Uri.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Web.WebClient.Request(System.String,Colosoft.Web.IRequestParameter)">
            <summary>
            Realiza a requisicao de uma Uri.
            </summary>
            <param name="uri"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Colosoft.Web.WebClient.Request(System.Uri,Colosoft.Web.IRequestParameter)">
            <summary>
            Faz uma requisicao no servidor.
            </summary>
            <param name="uri"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="P:Colosoft.Web.WebClient.CookieContainer">
            <summary>
            Container dos cookies.
            </summary>
        </member>
        <member name="P:Colosoft.Web.WebClient.LastUri">
            <summary>
            Ultima url acessada.
            </summary>
        </member>
    </members>
</doc>
